<refentry id="symbol.element">
<?dbhtml filename="symbol.html"?>

<refmeta>
<indexterm><primary>elements</primary>
<secondary>symbol</secondary></indexterm>
<refentrytitle>symbol</refentrytitle>
<refmiscinfo>Element</refmiscinfo>
</refmeta>
<refnamediv>
<refname>symbol</refname>
<refpurpose>&symbol.purpose;</refpurpose>
</refnamediv>

&symbol.synopsis.gen;
<refsect1 condition='ref.description'><title>Description</title>

<para>
A <sgmltag>Symbol</sgmltag> is a name that represents a value.  It should be used
in contexts in which the name will actually be replaced by a value before
processing.  The canonical example is a <literal>#define</literal>d symbol in
a C program where the C preprocessor replaces every occurance of the symbol
with its value before compilation begins.
</para>

<para>
The <literal>Limit</literal> value of the <sgmltag class='attribute'>Class</sgmltag> attribute
identifies those symbols that represent system limitations (for example, the
number of characters allowed in a path name or the largest possible positive
integer). DocBook <acronym>V3.1</acronym> introduced the <sgmltag>Constant</sgmltag> element,
which may be more suitable for some of these symbols.
</para>

<refsect2><title>Processing expectations</title>
<para>
&format.inline;
</para>
</refsect2>


&symbol.parents.gen;
&symbol.children.gen;
</refsect1>
<refsect1 condition='ref.elem.attrdesc'><title>Attributes</title>
<variablelist>
<varlistentry><term>class</term>
<listitem>
<para>
<sgmltag class="attribute">Class</sgmltag> indicates the type of <sgmltag>Symbol</sgmltag>.
</para>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 condition='ref.elem.seealso'><title>See Also</title>
&symbol.seealso.gen;
</refsect1>
<refsect1><title>Examples</title>

<informalexample role="example-source">
<programlisting>&symbol.example.1.txt;</programlisting>
</informalexample>

<anchor id="ex.os.symbol.1" role="HACK-ex.out.start"/>
&symbol.example.1.gen;
<anchor id="ex.oe.symbol.1" role="HACK-ex.out.end"/>

</refsect1>
</refentry>

