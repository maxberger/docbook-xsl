<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/docbook-ng" version="gin" xml:id="ch-publish">
<?dbhtml filename="ch04.html"?>
<title>Publishing DocBook Documents</title>
<info>
<pubdate>$Date$</pubdate>
<releaseinfo>$Revision$</releaseinfo>
</info>

<para>
<indexterm xml:id="publishDocBookch04" class="startofrange" significance="normal"><primary>DocBook DTD</primary>
  <secondary>publishing documents</secondary></indexterm>
<indexterm xml:id="DocBookpublishch04" class="startofrange" significance="normal"><primary>publishing DocBook documents</primary></indexterm>
<indexterm significance="normal"><primary>stylesheets</primary>
  <secondary>publishing SGML/XML documents</secondary></indexterm>
<indexterm significance="normal"><primary>HTML</primary>
  <secondary>translating SGML/XML documents</secondary>
</indexterm>Creating and editing
<acronym>XML</acronym> documents is usually
only half the battle. After you've composed your document, you'll want
to publish it. Publishing, for our purposes, means either print or web
publishing. For <acronym>XML</acronym>
documents, this is usually accomplished with some kind of
<glossterm>stylesheet</glossterm>. In some environments, it is now
possible to publish an <acronym>XML</acronym> document on the Web
simply by putting it online with a stylesheet.
</para>

<section><info><title>A Survey of Stylesheet Languages</title></info>
<para>
<indexterm significance="normal"><primary>stylesheets</primary>
  <secondary>languages</secondary></indexterm>
<indexterm significance="normal"><primary>languages</primary>
  <secondary>stylesheets</secondary></indexterm>

Over the years, a number of attempts have been made to produce a
standard stylesheet language and, failing that, a large number of
proprietary languages have been developed.
</para>
<variablelist>
<varlistentry><term>FOSIs</term>
<listitem>
<para>
<indexterm significance="normal"><primary>FOSI stylesheets</primary></indexterm>
<indexterm significance="normal"><primary>Formatting Output Specification Instance</primary><see>FOSI stylesheets</see></indexterm>
<indexterm significance="normal"><primary>U.S. Department of Defense stylesheet standard</primary></indexterm>

First, the U.S. Department of Defense, in an attempt to
standardize stylesheets across military branches, created the
<citetitle>Output Specification</citetitle>, which is defined in
<acronym>MIL-PRF-28001C</acronym>, <citetitle>Markup Requirements and
Generic Style Specification for Electronic Printed Output and Exchange
of Text</citetitle>.<footnote>
<para>
See <citetitle><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www-cals.itsi.disa.mil/core/formal/fps.htm">Formally
Published CALS Standards</link></citetitle> for more information.
</para>
</footnote>
</para>
<para>
<indexterm significance="normal"><primary>ADEPT Publisher (Arbortext), FOSIs support</primary></indexterm>
<indexterm significance="normal"><primary>Arbortext ADEPT Publisher, FOSIs support</primary></indexterm>

Commonly called FOSIs (for Formatting Output Specification Instances),
they are supported by a few products including ADEPT Publisher by
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.arbortext.com/">Arbortext</link> and DL
Composer by <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.datalogics.com/">Datalogics</link>.
</para>
</listitem>
</varlistentry>
<varlistentry><term>DSSSL</term>
<listitem>
<para>
<indexterm significance="normal"><primary>DSSSL</primary></indexterm>
<indexterm significance="normal"><primary>Document Style Semantics and Specification Language</primary><see>DSSSL</see></indexterm>
<indexterm significance="normal"><primary>ISO standards</primary>
  <secondary>DSSSL</secondary></indexterm>
<indexterm significance="normal"><primary>International Organization for Standardization</primary><see>ISO Entity Sets; ISO standards</see></indexterm>

Next, the International Organization for Standardization
(<acronym>ISO</acronym>) created <acronym>DSSSL</acronym>, the
Document Style Semantics and Specification Language. Subsets of
<acronym>DSSSL</acronym> are supported by Jade and a few other tools,
but it never achieved widespread support.
</para>
</listitem>
</varlistentry>
<varlistentry><term>CSS</term>
<listitem>
<para>
<indexterm significance="normal"><primary>CSS</primary></indexterm>
<indexterm significance="normal"><primary>HTML</primary>
  <secondary>CSS</secondary></indexterm>
<indexterm significance="normal"><primary>XML</primary>
  <secondary>CSS</secondary></indexterm>

The <acronym>W3C</acronym> CSS Working Group created
<acronym>CSS</acronym> as a style attachment language for <acronym>HTML</acronym>, and,
more recently, <acronym>XML</acronym>.
</para>
</listitem>
</varlistentry>
<varlistentry><term>XSL</term>
<listitem>
<para>
<indexterm significance="normal"><primary>XSL</primary></indexterm>
<indexterm significance="normal"><primary>XML</primary>
  <secondary>XSL</secondary></indexterm>
<indexterm significance="normal"><primary>Extensible Style Language</primary><see>XSL</see></indexterm>
Most recently, the <acronym>XML</acronym> effort has identified a standard Extensible Style
Language (<acronym>XSL</acronym>) as a requirement. The
<acronym>W3C</acronym> <acronym>XSL</acronym> Working Group is
currently pursuing that effort.
</para>
</listitem>
</varlistentry>
</variablelist>
<section><info><title>Stylesheet Examples</title></info>
<para>
<indexterm xml:id="stylsheetsch04" class="startofrange" significance="normal"><primary>stylesheets</primary>
  <secondary>examples</secondary></indexterm>



By way of comparison, here's an example of each of the standard style
languages. In each case, the stylesheet fragment shown contains the
rules that reasonably formatted the following paragraph:
</para>
<screen>
&lt;para&gt;
This is an example paragraph. It should be presented in a
reasonable body font. &lt;emphasis&gt;Emphasized&lt;/emphasis&gt; words
should be printed in italics. A single level of 
&lt;emphasis&gt;Nested &lt;emphasis&gt;emphasis&lt;/emphasis&gt; should also
be supported.&lt;/emphasis&gt;
&lt;/para&gt;
</screen>
<section><info><title><acronym>FOSI</acronym> stylesheet</title></info>

<para>
<indexterm significance="normal"><primary>FOSI stylesheets</primary>
  <secondary>example</secondary></indexterm>
<indexterm significance="normal"><primary>SGML</primary>
  <secondary>FOSIs</secondary></indexterm>
<indexterm significance="normal"><primary>e-i-c element</primary></indexterm>
<indexterm significance="normal"><primary>element in context (e-i-c)</primary></indexterm>

<acronym>FOSI</acronym>s are <acronym>SGML</acronym> documents. The element in the
<acronym>FOSI</acronym> that controls the presentation of specific
elements is the <tag>e-i-c</tag> (element in context) element.
A sample <acronym>FOSI</acronym> fragment is shown in <xref linkend="ex-fosi"/>.
</para>
<example xml:id="ex-fosi"><info><title>A Fragment of a <acronym>FOSI</acronym> Stylesheet</title></info>

<programlisting><![CDATA[<e-i-c gi="para">
  <charlist>
    <textbrk startln="1" endln="1">
  </charlist>
</e-i-c>

<e-i-c gi="emphasis">
  <charlist inherit="1">
    <font posture="italic">
  </charlist>
</e-i-c>

<e-i-c gi="emphasis" context="emphasis">
  <charlist inherit="1">
    <font posture="upright">
  </charlist>
</e-i-c>]]></programlisting>
</example>
</section>
<section><info><title><acronym>DSSSL</acronym> stylesheet</title></info>
<para>
<indexterm significance="normal"><primary>DSSSL</primary>
  <secondary>stylesheets</secondary>
    <tertiary>example</tertiary></indexterm>
<indexterm significance="normal"><primary>Scheme language</primary>
  <secondary>DSSSL stylesheets</secondary></indexterm>

<acronym>DSSSL</acronym> stylesheets are written in a Scheme-like
language. It is the
<function>element</function> function that controls the presentation of
individual elements. See the example in <xref linkend="ex-dsssl"/>.
</para>
<example xml:id="ex-dsssl"><info><title>A Fragment of a <acronym>DSSSL</acronym> Stylesheet</title></info>

<programlisting><![CDATA[(element para
  (make paragraph
    (process-children)))

(element emphasis
  (make sequence
    font-posture: 'italic
    (process-children)))

(element (emphasis emphasis)
  (make sequence
    font-posture: 'upright
    (process-children)))]]></programlisting>
</example>
</section>
<section><info><title><acronym>CSS</acronym> stylesheet</title></info>
<para>
<indexterm significance="normal"><primary>CSS stylesheets</primary>
  <secondary>example</secondary></indexterm>

<acronym>CSS</acronym> stylesheets consist of selectors and formatting
properties, as shown in <xref linkend="ex-css"/>.
</para>

<example xml:id="ex-css">
<info>
  <title>A Fragment of a <acronym>CSS</acronym> Stylesheet</title>
</info>
<programlisting><![CDATA[para              { display: block }
emphasis          { display: inline;
                    font-style: italic; }
emphasis emphasis { display: inline;
                    font-style: upright; }]]></programlisting>

</example>

</section>
<section><info><title><acronym>XSL</acronym> stylesheet</title></info>
<para>
<indexterm significance="normal"><primary>XSL stylesheets</primary>
  <secondary>example</secondary></indexterm>

<acronym>XSL</acronym> stylesheets are <acronym>XML</acronym> documents, as shown in
<xref linkend="ex-xsl"/>. The element in the <acronym>XSL</acronym>
stylesheet that controls the presentation of specific elements is the
<tag>xsl:template</tag> element.
</para>

<example xml:id="ex-xsl">
<info>
  <title>A Fragment of an <acronym>XSL</acronym> Stylesheet</title>
</info>
<programlisting>
FIXME: THIS IS WRONG!

<![CDATA[<?xml version='1.0'?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/XSL/Transform/1.0"
                xmlns:fo="http://www.w3.org/XSL/Format/1.0"
                version="1.0">

<xsl:template match="para">   
  <fo:block>
    <xsl:apply-templates/>  
  </fo:block>
</xsl:template>  

<xsl:template match="emphasis">
  <fo:sequence font-style="italic">
    <xsl:apply-templates/>  
  </fo:sequence>
</xsl:template>  

<xsl:template match="emphasis/emphasis">
  <fo:sequence font-style="upright">
    <xsl:apply-templates/>  
  </fo:sequence>
</xsl:template>  

</xsl:stylesheet>]]></programlisting>
</example>
</section>
</section>
</section>

<section xml:id="jade"><info><title>Using Jade and <acronym>DSSSL</acronym> to Publish DocBook Documents</title></info>
<para>
<indexterm significance="normal"><primary>Jade</primary>
  <secondary>DSSSL, using (DocBook document)</secondary></indexterm>
<indexterm significance="normal"><primary>SGML</primary>
  <secondary>DSSSL stylesheets</secondary></indexterm>
<indexterm significance="normal"><primary>XML</primary>
  <secondary>DSSSL stylesheets</secondary></indexterm>
<indexterm significance="normal"><primary>DSSSL</primary>
  <secondary>stylesheets</secondary>
    <tertiary>print and HTML output (DocBook)</tertiary></indexterm>
<indexterm significance="normal"><primary>HTML</primary>
  <secondary>DSSSL stylesheets</secondary></indexterm>

Jade is a free tool that applies <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.jclark.com/dsssl/"> <acronym>DSSSL</acronym></link>
stylesheets to <acronym>SGML</acronym> and <acronym>XML</acronym> documents. As distributed, Jade can
output <acronym>RTF</acronym>, TeX, <acronym>MIF</acronym>, and
<acronym>SGML</acronym>. The <acronym>SGML</acronym> backend can be used for <acronym>SGML</acronym> to <acronym>SGML</acronym>
transformations (for example, DocBook to <acronym>HTML</acronym>).
</para>

<para>For more information about <application>Jade</application> and
<acronym>DSSSL</acronym>, see the first edition of this book.</para>
</section>

<section xml:id="xsl">
<info>
  <title>Using <acronym>XSL</acronym> to Publish DocBook Documents</title>
</info>

<para>For more information about using <acronym>XSL</acronym> to publish
DocBook documents, see
<citetitle>DocBook XSL: The Complete Guide</citetitle> by
<personname><firstname>Bob</firstname><surname>Stayton</surname></personname>.
</para>

</section>
</chapter>
