<refentry id="glossterm.element">
<?dbhtml filename="glossterm.html"?>

<refmeta>
<indexterm><primary>elements</primary>
<secondary>glossterm</secondary></indexterm>
<refentrytitle>glossterm</refentrytitle>
<refmiscinfo>Element</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossterm</refname>
<refpurpose>&glossterm.purpose;</refpurpose>
</refnamediv>

&glossterm.synopsis.gen;
<refsect1 condition='ref.description'><title>Description</title>

<para>
<sgmltag>GlossTerm</sgmltag> identifies a term that appears in a
<sgmltag>Glossary</sgmltag> or <sgmltag>GlossList</sgmltag>.  This element
occurs in two very different places: it is both an inline, and a
structure element of a <sgmltag>GlossEntry</sgmltag>.  As an inline, it
identifies a term defined in a glossary, and may point to it.
Within a <sgmltag>GlossEntry</sgmltag>, it identifies the term defined
by that particular entry.
</para>

<refsect2><title>Processing expectations</title>
<para>
As an inline, <sgmltag>GlossTerm</sgmltag>s frequently get special typographic
treatment, such as italics. In an online environment, they may also
form a link (explicitly or implicitly) to the corresponding definition
in a glossary.
</para>

<para>
<sgmltag>GlossTerm</sgmltag>s must not be nested within other
<sgmltag>GlossTerm</sgmltag>s. Because DocBook is harmonizing towards
&XML;, this restriction is difficult to enforce with the
&DTD;. The processing of nested <sgmltag>GlossTerm</sgmltag>s is
undefined.
</para>

<para>
As part of a <sgmltag>GlossEntry</sgmltag>, <sgmltag>GlossTerm</sgmltag>s are usually
set as block and separated from the definition.
</para>

</refsect2>

<refsect2 role='fu' revision="4.0"><title>&FutureChanges;</title>
<para>
<!--do not index this occurance-->
&fu.interfacedefinition;
</para>
</refsect2>

<refsect2 role='fu' revision="5.0"><title>&FutureChanges;</title>
<para><indexterm><primary>DocBook DTD</primary><secondary>Changes for <acronym>V5.0</acronym></secondary>
</indexterm><sgmltag>RevHistory</sgmltag> will be removed.</para>
</refsect2>

&glossterm.parents.gen;
&glossterm.children.gen;
</refsect1>
<refsect1 condition='ref.elem.attrdesc'><title>Attributes</title>
<variablelist>
<varlistentry><term>baseform</term>
<listitem>
<para>
<sgmltag class="attribute">BaseForm</sgmltag>, if specified, contains the
root form of the word identified as a <sgmltag>GlossTerm</sgmltag>. If unspecified,
the content of <sgmltag>GlossTerm</sgmltag> element should be used. 
<sgmltag class="attribute">BaseForm</sgmltag> allows sorting, collating, and indexing
to work properly even when different parts of speech are identifed as
<sgmltag>GlossTerm</sgmltag>s. For example, <literal><![CDATA[
<glossterm>sort</glossterm>
]]></literal> and <literal><![CDATA[
<glossterm baseform="sort">sorting</glossterm>
]]></literal>.
</para>
</listitem>
</varlistentry>
<varlistentry><term>linkend</term>
<listitem>
<para>
<sgmltag class="attribute">Linkend</sgmltag> points to a related element,
generally the <sgmltag>GlossEntry</sgmltag> that defines it.
</para>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 condition='ref.elem.seealso'><title>See Also</title>
&glossterm.seealso.gen;
</refsect1>
<refsect1><title>Examples</title>

<para>For examples, see
&glossterm.example.seealso.gen;.</para>
</refsect1>
</refentry>

