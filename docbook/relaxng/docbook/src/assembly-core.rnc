# This file is a module of DocBook V5.0 to support modular DocBook assemblies.
#
# Copyright 1992-2010 HaL Computer Systems, Inc.,
# O'Reilly & Associates, Inc., ArborText, Inc., Fujitsu Software
# Corporation, Norman Walsh, Sun Microsystems, Inc., and the
# Organization for the Advancement of Structured Information
# Standards (OASIS).
#
# Release: $Id: assembly.rnc 7466 2009-03-27 14:03:55Z shudson310 $
#
# Permission to use, copy, modify and distribute the DocBook schema
# and its accompanying documentation for any purpose and without fee
# is hereby granted in perpetuity, provided that the above copyright
# notice and this paragraph appear in all copies. The copyright
# holders make no representation about the suitability of the schema
# for any purpose. It is provided "as is" without expressed or implied
# warranty.
#
# If you modify the DocBook schema in any way, label your schema as a
# variant of DocBook. See the reference documentation
# (http://docbook.org/tdg5/en/html/ch05.html#s-notdocbook)
# for more information.
#
# Please direct all questions, bug reports, or suggestions for changes
# to the docbook@lists.oasis-open.org mailing list. For more
# information, see http://www.oasis-open.org/docbook/.
#
# ======================================================================

namespace ctrl = "http://nwalsh.com/xmlns/schema-control/"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace rng  = "http://relaxng.org/ns/structure/1.0"
namespace s = "http://www.ascc.net/xml/schematron"
namespace db = "http://docbook.org/ns/docbook"
default namespace = "http://docbook.org/ns/docbook"

db.grammar.attribute =
   [
      db:refpurpose [ "Identifies the default markup grammar for resources in this collection" ]
   ]
   attribute grammar { text }

[
   db:refname [ "assembly" ]
   db:refpurpose [ "Defines the hierarchy and relationships for a collection of resources" ]
]
div {

   db.assembly.role.attribute = attribute role { text }

   db.assembly.attlist =
      db.assembly.role.attribute?
    & db.common.attributes

   db.assembly.info = db._info

   db.assembly =
      element assembly {
         db.assembly.attlist,
         db.assembly.info,
         db.resources+,
         db.structure*,
         db.relationships*,
         db.transforms?
      }
}

[
   db:refname [ "resources" ]
   db:refpurpose [ "Contains one or more resource objects that are managed by the assembly" ]
]
div {

   db.resources.role.attribute = attribute role { text }

   db.resources.grammar.attribute = db.grammar.attribute

   db.resources.attlist =
      db.resources.role.attribute?
    & db.resources.grammar.attribute?
    & db.common.attributes

   db.resources.info = db._info.title.forbidden

   db.resources =
      element resources {
         db.resources.attlist,
         db.resources.info?,
         db.resource+
      }
}

[
   db:refname [ "resource" ]
   db:refpurpose [ "Identifies an object managed within the assembly" ]
]
div {

   db.resource.role.attribute = attribute role { text }

   db.resource.fileref.attribute =
      [
         db:refpurpose [ "Indentifies the location of the data by URI" ]
      ]
      attribute fileref { xsd:anyURI }

   db.resource.grammar.attribute = db.grammar.attribute

   db.resource.attlist =
      db.resource.role.attribute?
    & db.grammar.attribute?
    & db.common.attributes

   db.resource = db.file.resource | db.container.resource

   db.file.resource =
      element resource {
         db.resource.attlist,
         db.resource.fileref.attribute,
         empty
      }

   # FIXME: contents should be any valid DocBook content model fragment
   db.container.resource =
      element resource {
         db.resource.attlist,
         text
      }
}

[
   db:refname [ "structure" ]
   db:refpurpose [ "Describes the structure of a document" ]
]
div {

   db.structure.role.attribute = attribute role { text }

   db.structure.type.attribute =
      [
         db:refpurpose [ "Identifies the structure type of the structure" ]
      ]
      attribute type { xsd:NMTOKEN }

   db.structure.defaultformat.attribute =
      [
         db:refpurpose [ "Identifies the default format of the structure" ]
      ]
      attribute defaultformat { xsd:NMTOKEN }

   db.structure.attlist =
      db.structure.role.attribute?
    & db.structure.type.attribute?
    & db.structure.defaultformat.attribute?
    & db.common.attributes

   db.structure.info = db._info.title.req

   db.structure =
      element structure {
         db.structure.attlist,
         db.output*,
         db.filterin?,
         db.filterout?,
         db.structure.info,
         db.revhistory?,
         db.toc*,
         db.module+,
         db.index*
      }
}

[
   db:refname [ "output" ]
   db:refpurpose [ "Specify an output format and/or file name and/or renderas" ]
]
div {

   db.output.role.attribute = attribute role { text }

   db.output.format.attribute =
      [
         db:refpurpose [ "Identifies the format of the module or structure" ]
      ]
      attribute format { xsd:NMTOKEN }

   db.output.file.attribute =
      [
         db:refpurpose [ "Specifies the output file for this module or structure" ]
      ]
      attribute file { xsd:anyURI }

   db.output.renderas.attribute =
      [
         db:refpurpose [ "Specifies the DocBook element to which this unit should be renamed" ]
      ]
      attribute renderas { xsd:NMTOKEN }

   db.output.grammar.attribute = db.grammar.attribute

   db.output.transform.attribute =
      [
         db:refpurpose [ "Specifies the transformation that should be applied to this unit" ]
      ]
      attribute transform { xsd:NMTOKEN }

   db.output.suppress.attribute =
      [
         db:refpurpose [ "Indicates whether or not this unit should be suppressed" ]
      ]
      attribute suppress { xsd:boolean }

   db.output.attlist =
      db.output.role.attribute?
    & db.common.attributes
    & db.output.format.attribute?
    & db.output.file.attribute?
    & db.output.renderas.attribute?
    & db.output.grammar.attribute?
    & db.output.transform.attribute?
    & db.output.suppress.attribute?

   db.output =
      element output {
         db.output.attlist,
         empty
      }
}

[
   db:refname [ "module" ]
   db:refpurpose [ "A modular component within a structure" ]
]
div {

   db.module.role.attribute = attribute role { text }

   db.module.chunk.enumeration =
      ## This module will be in a chunk
      "true"
    | ## This module will not be in a chunk
      "false"
    | ## Chunking of this module depends on the overall chunking algorithm
      "auto"

   db.module.chunk.attribute =
      [
         a:defaultValue = "auto"
         db:refpurpose [ "Specifies chunking for this module" ]
      ]
      attribute chunk { db.module.chunk.enumeration }

   db.module.resourceref.attribute =
      [
         db:refpurpose [ "Indicates a single resource from which to construct this module" ]
      ]
      attribute resourceref { xsd:IDREF }

   db.module.omittitles.attribute =
      [
         db:refpurpose [ "Indicates if titles should be omitted when including a resource" ]
      ]
      attribute omittitles { xsd:boolean }?

   db.module.contentonly.attribute =
      [
         db:refpurpose [ "Indicates if only the content should be copied when including a resource" ]
      ]
      attribute contentonly {xsd:boolean }?

   db.module.renderas.attribute =
      [
         db:refpurpose [ "Specifies the DocBook element to which this unit should be renamed" ]
      ]
      attribute renderas { xsd:NMTOKEN }

   db.module.attlist =
      db.module.role.attribute?
    & db.module.chunk.attribute?
    & db.module.resourceref.attribute?
    & db.module.omittitles.attribute?
    & db.module.contentonly.attribute?
    & db.module.renderas.attrbribute?
    & db.common.attributes

   db.module.info = db._info

   db.module =
      element module {
         db.module.attlist,
         ((db.output | db.filterin | db.filterout)*,
            db.module.info,
            db.toc*,
            db.module*,
            db.index*)
      }
}

[
   db:refname [ "filterout" ]
   db:refpurpose [ "Elements with effectivity attributes matching this element are suppressed" ]
]
div {
   db.filterout.role.attribute = attribute role { text }

   db.filterout.attlist =
      db.filterout.role.attribute?
    & db.common.attributes

   db.filterout =
      element filterout {
         db.filterout.attlist,
         empty
      }
}

[
   db:refname [ "filterin" ]
   db:refpurpose [ "Elements with effectivity attributes matching this element are allowed" ]
]
div {
   db.filterin.role.attribute = attribute role { text }

   db.filterin.attlist =
      db.filterin.role.attribute?
    & db.common.attributes

   db.filterin =
      element filterin {
         db.filterin.attlist,
         empty
      }
}

[
   db:refname [ "relationships" ]
   db:refpurpose [ "Groups relationship elements to define associations between resources" ]
]
div {
   db.relationships.role.attribute = attribute role { text }

   db.relationships.attlist =
      db.relationships.role.attribute?
    & db.common.attributes

   db.relationships =
      element relationships {
         db.relationships.attlist,
         db.relationship+
      }
}

[
   db:refname [ "relationship" ]
   db:refpurpose [ "A relationship associates one or more resources" ]
]
div {
   db.relationship.role.attribute = attribute role { text }

   db.relationship.type.attribute =
      [
         db:refpurpose [ "Identifies the type of the relationship" ]
      ]
      attribute type { xsd:NMTOKEN }

   db.relationship.attlist =
      db.relationship.role.attribute?
    & db.relationship.type?
    & db.linkend.attribute?
    & db.common.attributes

   db.relationship =
      element relationship {
         db.relationship.attlist,
         db.association,
         db.instance+
      }
}

[
   db:refname [ "association" ]
   db:refpurpose [ "Identifies the type of relationship between one or more resources" ]
]
div {
   db.association.role.attribute = attribute role { text }

   db.association.attlist =
      db.association.role.attribute?
    & db.linkend.attribute?
    & db.common.attributes

   db.association =
      element association {
         db.association.attlist,
         text?
      }
}

[
   db:refname [ "instance" ]
   db:refpurpose [ "Identifies a resource that is part of a relationship" ]
]
div {
   db.instance.role.attribute = attribute role { text }

   db.instance.attlist =
      db.instance.role.attribute?
    & db.common.attributes

   db.instance =
      element instance {
         db.instance.attlist,
         db.linkend.attribute,
         empty
      }
}

[
   db:refname [ "transforms" ]
   db:refpurpose [ "List of transforms for converting from non-DocBook schemas" ]
]
div {
   db.transforms.role.attribute = attribute role { text }

   db.transforms.attlist =
      db.transforms.role.attribute?
    & db.common.attributes

   db.transforms =
      element transforms {
         db.transforms.attlist,
         db.transform+
      }
}

[
   db:refname [ "transform" ]
   db:refpurpose [ "Identifies a transform for converting from a non-DocBook schema" ]
]
div {

   db.transform.role.attribute = attribute role { text }

   db.transform.grammar.attribute = db.grammar.attribute

   db.transform.fileref.attribute =
      [
         db:refpurpose [ "Indentifies the location of the data by URI" ]
      ]
      attribute fileref { xsd:anyURI }

   db.transform.name.attribute =
      [
         db:refpurpose [ "Identifies the location of the data by reference" ]
      ]
      attribute name { xsd:NMTOKEN }

   db.transform.attlist =
      db.transform.role.attribute?
    & (db.grammar.attribute | db.name.attribute)
    & db.fileref.attribute
    & db.common.attributes

   db.transform =
      element transform {
         db.transform.attlist,
         empty
      }
}
