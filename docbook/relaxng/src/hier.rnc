# This file is part of DocBook NG: The "IPA" Release.

# This schema is a "work-in-progress". It validates a DocBook-like grammar that
# may, in some incarnation, form the basis for DocBook V.next. Or it may not.
# At the moment, it's just an exploration by Norm. It has utterly no normative
# value at all.
#
# Author: Norman Walsh, <ndw@nwalsh.com>
# Source: Derived from DocBook XML V4.3
# Release: $Id$
#
# ======================================================================

namespace rng  = "http://relaxng.org/ns/structure/1.0"
namespace s = "http://www.ascc.net/xml/schematron"
namespace db = "http://docbook.org/docbook-ng"
namespace dbx = "http://sourceforge.net/projects/docbook/defguide/schema/extra-markup"
default namespace = "http://docbook.org/docbook-ng"

[
   db:refpurpose [
      "Identifies the editorial or publication status of the element " ~
      "on which it occurs"
   ]
   dbx:description [
      db:para [
         "Publication status might be used to control formatting " ~
         "(for example, printing a “draft” watermark on drafts) " ~
         "or processing (perhaps a document with a status of " ~
         "“final” should not include any components that are not " ~
         "final)."
      ]
   ]
]
db.status.attribute = attribute status { text }

[
   db:refpurpose [
      "Specifies an identifying string for presentation purposes"
   ]
   dbx:description [
      db:para [
         "Generally, an explicit Label attribute is used only if the " ~
         "processing system is incapable of generating the label automatically. " ~
         "Under such circumstances, the third "
         db:tag [ "book" ]
         " in a "
         db:tag [ "set" ]
         " might be labeled “Volume III”, for example."
      ]
      db:para [
         "If present, the "
         db:tag [ class = "attribute" "label" ]
         " is normative; it will used even if the " ~
         "processing system is capable of automatic labelling."
      ]
   ]
]
db.label.attribute = attribute label { text }

# ======================================================================

db.toplevel.optional.sections = db.section* | db.simplesect*

db.toplevel.required.sections = db.section+ | db.simplesect+

db.toplevel.blocks.or.sections =
  (db.all.blocks+, db.toplevel.optional.sections) | db.toplevel.required.sections

db.recursive.optional.sections = db.section* | db.simplesect*

db.recursive.required.sections = db.section+ | db.simplesect+

db.recursive.blocks.or.sections =
  (db.all.blocks+, db.recursive.optional.sections) | db.recursive.required.sections

db.optional.refentry = notAllowed
db.required.refentry = notAllowed

# ======================================================================

db.divisions = db.part

db.components =
   db.dedication
 | db.preface
 | db.chapter
 | db.appendix
 | db.article
 | db.colophon

db.navigation.components = notAllowed

db.component.contentmodel =
  db.navigation.components*, db.toplevel.blocks.or.sections, db.navigation.components*

# ======================================================================

db.setindex.components = notAllowed
db.toc.components = notAllowed

# ======================================================================

[
   db:refname [ "set" ]
   db:refpurpose [ "A collection of books" ]
]
div {

   db.set.status.attribute = db.status.attribute

   db.set.role.attribute = attribute role { text }

   db.set.attlist =
      db.set.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.set.status.attribute?

   db.set.info = db._info.title.req

   db.set =
      element set {
         db.set.attlist,
         db.set.info,
         db.toc.components?,
         (db.set|db.book)+,
         db.setindex.components?
      }
}

# ======================================================================

[
   db:refname [ "book" ]
   db:refpurpose [ "A book" ]
]
div {

   db.book.status.attribute = db.status.attribute

   db.book.role.attribute = attribute role { text }

   db.book.attlist =
      db.book.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.book.status.attribute?

   db.book.info = db._info.title.req

   db.book =
      element book {
         db.book.attlist,
         db.book.info,
         (db.navigation.components | db.components | db.divisions)+
      }
}

# ======================================================================

[
   db:refname [ "dedication" ]
   db:refpurpose [ "A wrapper for the dedication section of a book" ]
]
div {

   db.dedication.status.attribute = db.status.attribute

   db.dedication.role.attribute = attribute role { text }

   db.dedication.attlist =
      db.dedication.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.dedication.status.attribute?

   db.dedication.info = db._info

   db.dedication =
      element dedication {
         db.dedication.attlist,
         db.dedication.info,
         db.all.blocks+
      }
}

# ======================================================================

[
   db:refname [ "colophon" ]
   db:refpurpose [ "Text at the back of a book describing facts about its production" ]
]
div {

   db.colophon.status.attribute = db.status.attribute

   db.colophon.role.attribute = attribute role { text }

   db.colophon.attlist =
      db.colophon.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.colophon.status.attribute?

   db.colophon.info = db._info

   db.colophon =
      element colophon {
         db.colophon.attlist,
         db.colophon.info,
         db.all.blocks+
      }
}

# ======================================================================

[
   db:refname [ "appendix" ]
   db:refpurpose [ "An appendix in a Book or Article" ]
]
div {

   db.appendix.status.attribute = db.status.attribute

   db.appendix.role.attribute = attribute role { text }

   db.appendix.attlist =
      db.appendix.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.appendix.status.attribute?

   db.appendix.info = db._info.title.req

   db.appendix =
      element appendix {
         db.appendix.attlist,
         db.appendix.info,
         db.component.contentmodel
      }
}

# ======================================================================

[
   db:refname [ "chapter" ]
   db:refpurpose [ "A chapter, as of a book" ]
]
div {

   db.chapter.status.attribute = db.status.attribute

   db.chapter.role.attribute = attribute role { text }

   db.chapter.attlist =
      db.chapter.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.chapter.status.attribute?

   db.chapter.info = db._info.title.req

   db.chapter =
      element chapter {
         db.chapter.attlist,
         db.chapter.info,
         db.component.contentmodel
      }
}

# ======================================================================

db.part.components = db.navigation.components | db.components

# ======================================================================

[
   db:refname [ "part" ]
   db:refpurpose [ "A division in a book" ]
]
div {

   db.part.status.attribute = db.status.attribute

   db.part.role.attribute = attribute role { text }

   db.part.attlist =
      db.part.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.part.status.attribute?

   db.part.info = db._info.title.req

   db.part =
      element part {
         db.part.attlist,
         db.part.info,
         db.partintro?,
         db.part.components+
      }
}

# ======================================================================

[
   db:refname [ "preface" ]
   db:refpurpose [ "Introductory matter preceding the first chapter of a book" ]
]
div {

   db.preface.status.attribute = db.status.attribute

   db.preface.role.attribute = attribute role { text }

   db.preface.attlist =
      db.preface.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.preface.status.attribute?

   db.preface.info = db._info.title.req

   db.preface =
      element preface {
         db.preface.attlist,
         db.preface.info,
         db.component.contentmodel
      }
}

# ======================================================================

[
   db:refname [ "partintro" ]
   db:refpurpose [ "An introduction to the contents of a part" ]
]
div {

   db.partintro.status.attribute = db.status.attribute

   db.partintro.role.attribute = attribute role { text }

   db.partintro.attlist =
      db.partintro.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.partintro.status.attribute?

   db.partintro.info = db._info

   db.partintro =
      element partintro {
         db.partintro.attlist,
         db.partintro.info,
         db.toplevel.blocks.or.sections
      }
}

# ======================================================================

[
   db:refname [ "section" ]
   db:refpurpose [ "A recursive section" ]
]
div {

   db.section.status.attribute = db.status.attribute

   db.section.role.attribute = attribute role { text }

   db.section.attlist =
      db.section.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.section.status.attribute?

   db.section.info = db._info.title.req

   db.section =
      element section {
         db.section.attlist,
         db.section.info,
         db.recursive.blocks.or.sections,
         db.navigation.components*
      }
}

# ======================================================================

[
   db:refname [ "simplesect" ]
   db:refpurpose [ "A section of a document with no subdivisions" ]
]
div {

   db.simplesect.status.attribute = db.status.attribute

   db.simplesect.role.attribute = attribute role { text }

   db.simplesect.attlist =
      db.simplesect.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.simplesect.status.attribute?

   db.simplesect.info = db._info.title.req

   db.simplesect =
      element simplesect {
         db.simplesect.attlist,
         db.simplesect.info,
         db.all.blocks+
      }
}

# ======================================================================

[
   db:refname [ "ackno" ]
   db:refpurpose [ "Acknowledgements in an Article" ]
]
div {

   db.ackno.role.attribute = attribute role { text }

   db.ackno.attlist =
      db.ackno.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes

   db.ackno =
      element ackno {
         db.ackno.attlist,
         db.para.blocks+
      }
}

# ======================================================================

db.article.optional.components = db.section* | db.simplesect*
db.article.required.components = db.section+ | db.simplesect+

# ======================================================================

[
   db:refname [ "article" ]
   db:refpurpose [ "An article" ]
   dbx:description [
      db:para [
         "The "
         db:tag [ "article" ]
         " element is a general-purpose container for " ~
         " articles.  The content model is both quite complex and rather loose in " ~
         "order to accommodate the wide range of possible "
         db:tag [ "article" ]
         " structures.  Although changes to the "
         db:tag [ "article" ]
         " element have been discussed on several occasions, " ~
         "no better model has been presented."
      ]
      db:para [
         "An "
         db:tag [ "article" ]
         " is composed of a header and a body.  The body " ~
         " may include a table of contents and multiple lists of tables, figures, " ~
         " and so on, before the main text of the article and may include a number of" ~
         " common end-matter components at the end."
      ]
   ]
   dbx:expectations [
      db:para [
         dbx:format [ class="block" ]
         "Formatted as a displayed block. " ~
         "Frequently causes a forced page break in print media. " ~
         "May be numbered separately and presented in the table of contents."
      ]
   ]
]
div {

   db.article.status.attribute = db.status.attribute

   [
      db:refpurpose [
         "Class identifies the type of article."
      ]
   ]
   db.article.class.attribute =
      attribute class {
         "faq"
       | "journalarticle"
       | "productsheet"
       | "specification"
       | "techreport"
       | "whitepaper"
      }

   db.article.role.attribute = attribute role { text }

   db.article.attlist =
      db.article.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.article.status.attribute?
    & db.article.class.attribute?

   db.article.info = db._info.title.req

   db.article =
      element article {
         db.article.attlist,
         db.article.info,
         db.navigation.components*,
         ((db.all.blocks+,
            db.article.optional.components)
          | db.article.required.components),
         (db.appendix | db.navigation.components | db.ackno | db.colophon)*
      }
}

