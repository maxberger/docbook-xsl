<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0" xml:id="assemblies"
         revision="5.1">
<?dbhtml filename="ch06.html"?>
<info>
<title>DocBook Assemblies</title>
</info>

<para>One modern school of thought on technical documentation stresses
the development of independent units of documentation, often called
topics, rather than a single narrative. Instead of writing something
that DocBook users would easily recognize as a book consisting of a
preface, several consecutive chapters, and a few appendixes, the
author (or authors) write a set of discrete topics covering different aspects of
the system as if they were wholly independent.</para>

<para>In a typical online presentation system, for example the world
wide web or online help, each topic is a page that stands alone.
Except, of course, that just as no man is an island, no topic is
completely unrelated to the other topics that are available.</para>

<para>From any given topic, there may be topics of obviously related
interest. The nature of the relationships may vary. Some topics are
related by physical proximity (if you're interested in the ink
cartridges in a printer, you may also be interested in the print
head), others by their procedural nature (adding or replacing memory,
adding or replacing a hard drive, or even changing the CPU are all
topics that might logically follow a topic that describes how to open
the computer case).</para>

<para>In a single narrative, it is the responsibility of the author to
manage these relationships. He or she can reasonably assume that
anyone reading chapter 4 has read chapters 1, 2, and 3. If the reader
needs to be directed elsewhere, a cross reference can be used (for
example, “for more information on paper jams, see Section 3.5,
<citetitle>The Paper Path</citetitle>”).</para>

<para>In a topic-oriented system, authors are explicitly instructed to
write independent units. No linear order can be assumed and many forms
of explicit cross-reference are discouraged.</para>

<para>Documentation managers treat the library of available topics
very much as programmers treat libraries of available functions. Just
as any given program can pick and choose from the available libraries,
the documentation for any given system can pick and choose from the
available topics.</para>

<para>If you imagine a large documentation group managing the documentation
for several related systems (different models of printer, different
configurations of a software system, computers assembled from
different components, etc.) it's easy to see the appeal of topic-oriented
authoring.</para>

<para>In a successful deployment, you might find a library of say 1,000
topics which, taken together, document five or six related systems, each of
which uses 700-800 topics. Some topics are used in every system, many are
used in several systems, and a small number of topics are unique to a
specific system.</para>

<para>In order to make such a documentation platform functional, you
need not only the individual topics, but also some sort of “map” or
“assembly” file that describes which topics from the library are used,
what relationships exist between them and, at least for print
presentation, what linear order should be imposed upon them.</para>

<para>DocBook uses an <tag>assembly</tag> for this purpose.</para>

<section xml:id="physical">
<title>Physical structure</title>

<para>The notion of a DocBook <tag>assembly</tag> is predicated on a few
assumptions about the physical layout of the topics that are to be combined
together into units of documentation. We call the units of documentation
“structures” and the topics from which they are composed “resources”.</para>

<para>For the most part, we assume that resources exist as stand alone
documents accessible via URIs. The structures that result from assembling
the resources together may be a single file (as in a single PDF book) or
a collection of files (as in a web site or help system).</para>

<para>Other arrangements are possible, but for simplicity, we assume
that the resources are accessible via URIs and the resulting
structures can be written to the local filesystem as one or more
files.</para>
</section>

<section xml:id="logical">
<title>Logical structure</title>

<para>Many features of an assembly allow the assembly process to
update metadata associated with a document, for example changing the
title or removing the metadata altogether. Throughout the description
of assemblies, we assume that all metadata always occurs inside an
<tag>info</tag> wrapper. In other words, although the following is
perfectly legal:</para>

<programlisting><![CDATA[<chapter>
  <title>Chapter Title</title>
  <info>
    <pubdate>2009-11-23</pubdate>
  </info>
  <para>Some chapter content.</para>
</chapter>]]></programlisting>

<para>we always assume that this is instead represented with a single
<tag>info</tag> element:</para>

<programlisting><![CDATA[<chapter>
  <info>
    <title>Chapter Title</title>
    <pubdate>2009-11-23</pubdate>
  </info>
  <para>Some chapter content.</para>
</chapter>]]></programlisting>

<para>Even in cases where there is no <tag>info</tag> element:</para>

<programlisting><![CDATA[<section>
  <title>Section Title</title>
  <para>Some section content.</para>
</section>]]></programlisting>

<para>we assume one is present:</para>

<programlisting><![CDATA[<section>
  <info>
    <title>Section Title</title>
  </info>
  <para>Some section content.</para>
</section>]]></programlisting>

<para>Authors <emphasis>are not</emphasis> required to author in this way
in order to use assemblies. Processing systems are to behave <emphasis>as
if</emphasis> they had.</para>

<para>The assumption that all metadata is always present in a single,
explicit <tag>info</tag> wrapper <emphasis>greatly</emphasis> simplifies
the exposition of assemblies without introducing any actual limitations.</para>

</section>

<section>
<title>Assembly Files</title>

<para>An <tag>assembly</tag> has four major parts:</para>

<variablelist>
<varlistentry>
<term><tag>resources</tag></term>
<listitem>
<para>Identifies a collection of topics. An assembly may identify
one or more collections.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>structure</tag></term>
<listitem>
<para>Identifies a single artifact to be assembled. At present, we
assume that these artifacts are single documents, but that may change.
A document in this case is the particular collection of topics that
forms the documentation for a product or system. An assembly may
identify one or more structures.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>relationships</tag></term>
<listitem>
<para>Identifies relationships between resources. These relationships
may be manifested in any number of structures during assembly. An assembly
may identify any number of relationships.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>transformations</tag></term>
<listitem>
<para>Identifies transformations that can be applied during assembly.
An assembly may identify any number of transformations.</para>
</listitem>
</varlistentry>
</variablelist>

<section xml:id="resources">
<title>Resources</title>

<para>Individual resources are identified through a <tag>resource</tag>
element:</para>

<programlisting>&lt;resource xml:id="topicA" fileref="uri/for/topicA.xml"/&gt;</programlisting>

<para>Here the resource “<literal>topicA</literal>” is associated with
the URI <uri>uri/for/topicA.xml</uri>. Relative URIs are made absolute
with respect to the element on which they appear. An optional <tag
class="attribute">description</tag> attribute may also be used to
provide a description of the resource.</para>

<para>A collection of resources may appear in a <tag>resources</tag>
wrapper. The primary motivation for the resources wrapper is to group
physically and logically colocated resources together. The
<tag>resources</tag> wrapper is a convenient place, for example, to specify
a common <tag class="attribute">xml:base</tag> or
<tag class="attribute">xml:lang</tag> and
<tag class="attribute">description</tag>.</para>

<para>If the <tag>resource</tag> element does not have a
<tag class="attribute">fileref</tag> attribute, then the content of
the <tag>resource</tag> element itself is the resource. This is often
used to create modules which trigger the automatic generation of
content, for example Tables of Contents or Indexes:</para>

<programlisting>&lt;resource xml:id=”toc”>
  &lt;toc/>
  &lt;toc role=”procedures”/>
&lt;/resource></programlisting>

<para>It is an error
if the <tag class="attribute">fileref</tag> attribute is specified and
the element is not empty.</para>
</section>

<section xml:id="structures">
<title>Structures</title>

<para>Structures are where the real work is performed. There is considerable
tension between the goal of providing <tag>structure</tag> elements that are
simple for the simple cases and simultaneously allowing them to be complex
enough to describe the full richness of possibility.</para>

<para>This inherent tension is compounded by the fact that the nature of
<tag>structure</tag> outputs is naturally open ended. The goal is that
DocBook assemblies should be able to handle both the richness of the structures
that we produce today as well as the structures we will want to produce
tomorrow.</para>

<para>The principle task of the <tag>structure</tag> element is to
identify the resources that are to be combined for that structure. The
processing expectation of a structure is that after combining the
resources together, the result will be a single document, the
<firstterm>realized structure</firstterm>. The realized structure is
then processed to produce the desired output. (Whether or not a processor
actually realizes the structure as a single document in memory or on
disk is an implementation detail; logically, that's what happens.)</para>

<para>It is important to observe that the realized structure is often,
but not necessarily, a valid DocBook document. What is important is
not it's validity from an authoring perspective, but rather it's
validity with respect to what the downstream processor is
expecting.</para>

<para>For example, if the <tag>structure</tag> is defining a book, then the
realized structure should be a valid <tag>book</tag>. If, on the other hand,
what is defined is a help system, then the realized structure may be a
collection of nested <tag>topic</tag> elements. Even though authors
are not allowed to nest topics (per the currently proposed <tag>topic</tag>
element), the assembly process may be allowed to nest them.</para>

<para>A <tag>structure</tag> consists mostly of <tag>module</tag> elements.
</para>
</section>

<section xml:id="relationships">
<title>Relationships</title>

<para>A relationship, in the context of an assembly, is an assertion
that a particular collection of resources are related. The nature of
the relationship is specified with a <tag class="attribute">type</tag>
attribute. For example:</para>

<programlisting><![CDATA[<relationship type="seealso">
  <instance resourceref="tut1"/>
  <instance resourceref="tut2"/>
  <instance resourceref="task1"/>
</relationship>]]></programlisting>

<para>This asserts that there is a “seealso” relationship between these
resources. The processor might use this information to automatically generate
a “See Also” section at the end of any of these topics.</para>

<para>Relationships are often, but not necessarily, unordered. This
relationship establishes a path through a set of resources:</para>

<programlisting><![CDATA[<relationship type="path">
  <info>
    <title>New User Introduction</title>
  </info>
  <instance resourceref="over1"/>
  <instance resourceref="over2"/>
  <instance resourceref="task3"/>
  <instance resourceref="cleanup"/>
</relationship>]]></programlisting>

<para>A sophisticated help system could use this path to guide a new
user through a sequence of resources.</para>

</section>

<section xml:id="transformations">
<title>Transformations</title>

<para>An assembly can identify a collection of transformations that can
be used during the assembly process. A transformation can be associated
with a resource (for example, to translate from some other format into
DocBook), or with a module (to address requirements beyond the limited
transformation capabilities of the assembly).</para>

<programlisting><![CDATA[<transformations>
  <transform name="dita2docbook" type="text/xsl" fileref="dita2db.xsl"/>
  <transform name="tutorial" type="text/xsl" fileref="db2tutorial.xsl"/>
  <transform name="art2pi" type="text/xsl" fileref="art2pi.xsl"/>
  <transform name="office" type="application/xproc+xml" fileref="office2db.xpl"/>
  <transform name="office" type="text/xsl" fileref="extractoffice.xsl"/>
</transformations>]]></programlisting>

<para>If there are several ways to provide a transformation, they may
all be listed provided that they have different types. In the example above,
it may be that the XProc transformation from office documents to DocBook
is superior to the XSLT-only transformation, but the XSLT-only transformation
is better than nothing. If no type is specified, the default is implementation
dependent.</para>

<note>
<para>Not all systems may support arbitrary transformations, nor can
all systems support all possible transformation languages. To maximize
interoperability it is best to use as few explicit transformations
as possible, ideally none.</para>
</note>

<para>Given the transformations above, a DITA resource might be
included in the assembly:</para>

<programlisting>&lt;resource xml:id="overview" fileref="dita/over.xml"
          transform="dita2docbook"/></programlisting>

<para>Whenever a module refers to this resource, it will receive the transformed,
DocBook result.</para>

<para>If a module needs to perform a transformation to get from one DocBook
format to another, it can name a transform as well:</para>

<programlisting><![CDATA[<module resourceref="overview">
  <transform name="art2pi"/>
  <output type="book" renderas="partintro"/>
</module>]]></programlisting>

<para>In this case, two transformations will occur. This can be generalized
to an arbitrary number by listing more than one <tag>transform</tag> in the
<tag>module</tag>.
The transforms are applied in the order specified.</para>

<para>If the <tag>output</tag> specifies a <tag
class="attribute">renderas</tag>, it is applied to the result of the
last transformation.</para>

</section>
</section>

<section xml:id="ex-book">
<title>Example: Assembling a Printed Book</title>

<para>For the purposes of this section, let's
assume that we have the following resources available:</para>

<programlisting><![CDATA[<resource xml:id="full-toc">
  <toc/>
  <toc role="figures"/>
  <toc role="tables"/>
  <toc role="procedures"/>
</resource>

<resource xml:id="index">
  <index/>
</resource>

<resources xml:base="tutorial/">
  <resource xml:id="tut1" fileref="tut1.xml"/>
  <resource xml:id="tut2" fileref="tut2.xml"/>
  <resource xml:id="tut3" fileref="tut3.xml"/>
  <resource xml:id="tut4" fileref="tut4.xml"/>
  <resource xml:id="tut5" fileref="tut5.xml"/>
</resources>

<resources xml:base="tasks/">
  <resource xml:id="task1" fileref="task1.xml"/>
  <resource xml:id="task2" fileref="task2.xml"/>
  <resource xml:id="task3" fileref="task3.xml"/>
  <resource xml:id="task4" fileref="task4.xml"/>
</resources>]]></programlisting>

<para>Further, let's assume that each of the tutorials and tasks is
authored as a standalone <tag>topic</tag>.</para>

<para>Our first challenge is to create a PDF user guide.
A subject matter expert has informed us that the proper linear
presentation for the user guide is tutorials 1 and 2, task 1, tutorial 3,
task 4, and an index.</para>

<para>Our first attempt at a structure might look like this:</para>

<programlisting><![CDATA[<structure xml:id="user-guide">
  <output renderas="book"/>
  <module resourceref="full-toc"/>
  <module resourceref="tut1"/>
  <module resourceref="tut2"/>
  <module resourceref="task1"/>
  <module resourceref="tut3"/>
  <module resourceref="task4"/>
  <module resourceref="index"/>
</structure>]]></programlisting>

<para>The <tag>output</tag> element identifies the kind of output to
be generated. There may be more than one type.
The <tag class="attribute">renderas</tag> attribute on the
<tag>output</tag> tells us that the realized structure should be a book.
</para>

<para>The <tag>module</tag> elements identify the resources to be included.
That's fine as far as it goes. Processing this <tag>structure</tag> will
create a realized structure that is a <tag>book</tag> (because that's what
the <tag class="attribute">renderas</tag> on the <tag>output</tag> tells
us) consisting of the tables of contents and the correct six topics:</para>

<programlisting><![CDATA[<book xmlns="http://docbook.org/ns/docbook">
  <toc/>
  <toc role="figures"/>
  <toc role="tables"/>
  <toc role="procedures"/>
  <topic xml:base="tutorial/tut1.xml">
    <title>Introduction</title>
    ...
  </topic>
  <topic xml:base="tutorial/tut2.xml">
    <title>Getting Started</title>
    ...
  </topic>
  <topic xml:base="tasks/task1.xml">
    <title>Engaging the spindle</title>
    ...
  </topic>
  <topic xml:base="tutorial/tut3.xml">
    <title>Troubleshooting</title>
    ...
  </topic>
  <topic xml:base="tasks/task4.xml">
    <title>Diagnosing spindle problems</title>
    ...
  </topic>
  <index/>
</book>]]></programlisting>

<para>The trouble is, that's not a valid <tag>book</tag>. Not only does it
consist of topics instead of the expected chapters and such, but it's lacking
necessary metadata like a title.</para>

<para>We can address the first problem by allowing
<tag>output</tag> elements inside modules.</para>

<para>Most high-level elements (<tag>chapter</tag>, <tag>appendix</tag>,
<tag>book</tag>, <tag>section</tag>, <tag>topic</tag>, etc.) in DocBook have
the same general structure: they contain an (optional) <tag>info</tag>
element followed by a collection of block elements.</para>

<para>The semantic of <tag class="attribute">renderas</tag> in a
<tag>module</tag> that points to a resource is that it renames the
root element of that resource. This simple transformation will allow us
to turn all those topics into elements more appropriate for <tag>book</tag>
content. (We'll consider how to address the situation where more complex
transformation is necessary later.)</para>

<para>We can address the problem of missing metadata by creating a new
<tag>resource</tag> that contains an <tag>info</tag> element containing
the appropriate metadata and then pointing to it. But this case is so common,
that we simply allow the <tag>info</tag> element to be placed in the
<tag>structure</tag>.</para>

<para>With these amendments, here's our new structure:</para>

<programlisting><![CDATA[<structure xml:id="user-guide">
  <output renderas="book"/>
  <info>
    <title>Widget User Guide</title>
  </info>
  <module resourceref="full-toc"/>
  <module resourceref="tut1">
    <output renderas="chapter"/>
  </module>
  <module resourceref="tut2"/>
  <module resourceref="task1"/>
  <module resourceref="tut3">
    <output renderas="appendix"/>
  </module>
  <module resourceref="task4"/>
  <module resourceref="index">
    <output renderas="index"/>
  </module>
</structure>]]></programlisting>

<para>By default, the <tag class="attribute">renderas</tag> value is
inherited from a module's preceding sibling. Even though the index
is an <tag>index</tag>, because there is an explicit rendering on
a preceding module, it must be explicit on the index.</para>

<para>The realized structure that this produces is:</para>

<programlisting><![CDATA[<book xmlns="http://docbook.org/ns/docbook">
  <info>
    <title>Widget User Guide</title>
  </info>
  <toc/>
  <toc role="figures"/>
  <toc role="tables"/>
  <toc role="procedures"/>
  <chapter xml:base="tutorial/tut1.xml">
    <title>Introduction</title>
    ...
  </chapter>
  <chapter xml:base="tutorial/tut2.xml">
    <title>Getting Started</title>
    ...
  </chapter>
  <chapter xml:base="tasks/task1.xml">
    <title>Engaging the spindle</title>
    ...
  </chapter>
  <appendix xml:base="tutorial/tut3.xml">
    <title>Troubleshooting</title>
    ...
  </appendix>
  <appendix xml:base="tasks/task4.xml">
    <title>Diagnosing spindle problems</title>
    ...
  </appendix>
  <index/>
</book>]]></programlisting>

<para>That realized structure is a valid <tag>book</tag> so you would
expect the processing system to produce the correct results.</para>

<para>Except that it's not the right book. Upon further review by our subject
matter expert, it's been decided that tutorial 3 and task 4 shouldn't
be separate appendixes, they should instead both be sections in a single
appendix called “Troubleshooting”.</para>

<para>We can address this issue with nested modules. Instead of having
separate top-level modules for the tutorial and task, we'll make them
subordinate modules in a new top-level module:</para>

<programlisting><![CDATA[<structure xml:id="user-guide">
  <output renderas="book"/>
  <info>
    <title>Widget User Guide</title>
  </info>
  <module resourceref="full-toc"/>
  <module resourceref="tut1">
    <output renderas="chapter"/>
  </module>
  <module resourceref="tut2"/>
  <module resourceref="task1"/>
  <module>
    <output renderas="appendix">
    <info>
      <title>Troubleshooting</title>
    </info>
    <module resourceref="tut3">
      <output renderas="section"/>
    </module>
    <module resourceref="task4"/>
  </module>
  <module resourceref="index"/>
</structure>]]></programlisting>

<para>The semantics of <tag class="attribute">renderas</tag> on a module
that does not have a <tag class="attribute">resourceref</tag> is that it
simply generates that element.</para>

<para>The realized document is now:</para>

<programlisting><![CDATA[<book xmlns="http://docbook.org/ns/docbook">
  <info>
    <title>Widget User Guide</title>
  </info>
  <toc/>
  <toc role="figures"/>
  <toc role="tables"/>
  <toc role="procedures"/>
  <chapter xml:base="tutorial/tut1.xml">
    <title>Introduction</title>
    ...
  </chapter>
  <chapter xml:base="tutorial/tut2.xml">
    <title>Getting Started</title>
    ...
  </chapter>
  <chapter xml:base="tasks/task1.xml">
    <title>Engaging the spindle</title>
    ...
  </chapter>
  <appendix>
    <info>
      <title>Troubleshooting</title>
    </info>
    <section xml:base="tutorial/tut3.xml">
      <title>Troubleshooting</title>
      ...
    </section>
    <section xml:base="tasks/task4.xml">
      <title>Diagnosing spindle problems</title>
      ...
    </section>
  </appendix>
  <index/>
</book>]]></programlisting>

<para>That's probably not quite what was intended. Given that tutorial 3
has the title “Troubleshooting”, what we probably wanted was to make that
tutorial the <tag>appendix</tag> and make the task a subordinate section
of that appendix.</para>

<para>We can achieve that by nesting the modules differently:</para>

<programlisting><![CDATA[  <module resourceref="tut3">
    <output renderas="appendix"/>
    <module resourceref="task4">
      <output renderas="section"/>
    </module>
  </module>]]></programlisting>

<para>Now the <tag>appendix</tag> in the realized structure has the form
that we want:</para>

<programlisting><![CDATA[  <appendix xml:base="tutorial/tut3.xml">
    <title>Troubleshooting</title>
    ...
    <section xml:base="tasks/task4.xml">
      <title>Diagnosing spindle problems</title>
      ...
    </section>
  </appendix>]]></programlisting>

<para>If a module “A” is nested within a module “B” that refers to a
resource, the result of processing “A” is inserted into “B” as the last
child of “B”. (in the case of several nested modules, they are inserted
as the last children in the order specified.)</para>

<para>After further review of the content, the subject matter expert decides
that tutorial 5 and task 3 are also relevant to trouble shooting. Tutorial
5 also has the title “Troubleshooting” and naturally follows tutorial 3.
Task 3 is about diagnosing bearing issues.</para>

<para>It's easy to combine them the new content into the appendix:</para>

<programlisting><![CDATA[  <module resourceref="tut3">
    <output renderas="appendix"/>
    <module resourceref="tut5">
      <output renderas="section"/>
    </module>
    <module resourceref="task4"/>
    <module resourceref="task3"/>
  </module>]]></programlisting>

<para>but that doesn't produce a pleasing result:</para>

<programlisting><![CDATA[  <appendix xml:base="tutorial/tut3.xml">
    <title>Troubleshooting</title>
    ...
    <section xml:base="tutorial/tut5.xml">
      <title>Troubleshooting</title>
      ...
    </section>
    <section xml:base="tasks/task4.xml">
      <title>Diagnosing spindle problems</title>
      ...
    </section>
    <section xml:base="tasks/task3.xml">
      <title>Diagnosing bearing problems</title>
      ...
    </section>
  </appendix>]]></programlisting>

<para>What we really want to do is combine tutorials 3 and 5, not make 5
a subordinate section of 3. While we're at it, let's change the title of
the appendix to “Troubleshooting spindle and bearing problems” since that's
what it's really about.</para>

<para>We can solve the first problem with the
<tag class="attribute">contentonly</tag> attribute on <tag>module</tag>:
</para>

<programlisting><![CDATA[  <module resourceref="tut3">
    <output renderas="appendix"/>
    <module resourceref="tut5" contentonly="true"/>
    <module resourceref="task4">
      <output renderas="section"/>
    </module>
    <module resourceref="task3"/>
  </module>]]></programlisting>

<para>If
<tag class="attribute">contentonly</tag> is <literal>true</literal>,
then only the content of the document element, and not the document element
itself, is included. Any metadata associated with the document element is
also discarded. (If the referenced resource has several top-level element
children, then this processing is applied to each, in turn.)</para>

<para>The realized structure for this appendix is now:</para>

<programlisting><![CDATA[  <appendix xml:base="tutorial/tut3.xml">
    <title>Troubleshooting</title>
    ...
    ...content (only) of tutorial 5...
    <section xml:base="tasks/task4.xml">
      <title>Diagnosing spindle problems</title>
      ...
    </section>
    <section xml:base="tasks/task3.xml">
      <title>Diagnosing bearing problems</title>
      ...
    </section>
  </appendix>]]></programlisting>

<para>There are two ways that we can change the title. The first uses only
semantics we've already encountered:</para>

<programlisting><![CDATA[  <module>
    <output renderas="appendix"/>
    <info>
      <title>Troubleshooting spindle and bearing problems</title>
    </info>
    <module resourceref="tut3" contentonly="true"/>
    <module resourceref="tut5" contentonly="true"/>
    <module resourceref="task4">
      <output renderas="section"/>
    </module>
    <module resourceref="task3"/>
  </module>]]></programlisting>

<para>The only disadvantage of this approach is that we lose all of the
metadata associated with tutorials 3 and 5. This might include publication
dates, copyright information, etc. We could add those fields to the <tag>info</tag>
wrapper for the <tag>appendix</tag> in the assembly, but then it may have
to be maintained in two places.</para>

<para>Instead, we introduce one more convention: if a <tag>module</tag>
refers to another resource <emphasis>and</emphasis> contains an <tag>info</tag>
element, then the elements within that <tag>info</tag> replace any elements
of the same name in the referenced resource's metadata. (If the referenced
resource has no metadata, then the specified <tag>info</tag> becomes the
first child of the referenced resource.)</para>

<para>The second approach uses this convention:</para>

<programlisting><![CDATA[  <module resourceref="tut3">
    <output renderas="appendix"/>
    <info>
      <title>Troubleshooting spindle and bearing problems</title>
    </info>
    <module resourceref="tut5" contentonly="true"/>
    <module resourceref="task4">
      <output renderas="section"/>
    </module>
    <module resourceref="task3"/>
  </module>]]></programlisting>

<para>In the realized structure for this example, the appendix
metadata includes everything in tutorial 3's metadata, with the title
changed as indicated. Of course, all of the metadata for tutorial 5 is
still lost, but there's nothing we can do about that because there's
no where to put it.</para>

</section>

<section xml:id="ex-html">
<title>Example: Assembling an Online Book</title>

<para>This example extends the book example, see <xref
linkend="ex-book"/>. In addition to the printed user guide, we want to
produce an online user guide. The online guide is, by design, a
straightforward, linear rendering of the book. We'll look at a more
intricately structured example later.</para>

<para>We could create a separate assembly for the online guide, but it
will be better in the long run if we can manage the structure of the user
guide in one place.</para>

<para>The first step is to create a new output type:</para>

<programlisting><![CDATA[<structure xml:id="user-guide">
  <output type="book" renderas="book"/>
  <output type="web" renderas="book"/>
  <info>
    <title>Widget User Guide</title>
  </info>
  <module resourceref="full-toc"/>
  <module resourceref="tut1">
    <output renderas="chapter"/>
  </module>
  <module resourceref="tut2"/>
  <module resourceref="task1"/>
  <module resourceref="tut3">
    <output renderas="appendix"/>
    <info>
      <title>Troubleshooting spindle and bearing problems</title>
    </info>
    <module resourceref="tut5" contentonly="true"/>
    <module resourceref="task4">
      <output renderas="section"/>
    </module>
    <module resourceref="task3"/>
  </module>
  <module resourceref="index"/>
</structure>]]></programlisting>

<para>Now we can process this structure either as a “book” type structure
or a “web” type structure. At the moment, there's no difference between them.
Let's consider some of the changes we need to make for the
online site:</para>

<orderedlist>
<listitem>
<para>We want to control the names of the HTML documents produced.</para>
</listitem>
<listitem>
<para>We want to control how chunking is performed.</para>
</listitem>
<listitem>
<para>We want to suppress some “print only” content.</para>
</listitem>
</orderedlist>

<para>The first two of these we can address with <tag>output</tag>
elements:</para>

<programlisting><![CDATA[<structure xml:id="user-guide">
  <output type="book" renderas="book"/>
  <output type="web" renderas="book" file="user-guide.html"/>
  <info>
    <title>Widget User Guide</title>
  </info>
  <module resourceref="full-toc">
    <output type="web" chunk="false"/>
  </module>
  <module resourceref="tut1">
    <output renderas="chapter"/>
  </module>
  <module resourceref="tut2"/>
  <module resourceref="task1"/>
  <module resourceref="tut3">
    <output renderas="appendix"/>
    <info>
      <title>Troubleshooting spindle and bearing problems</title>
    </info>
    <module resourceref="tut5" contentonly="true"/>
    <module resourceref="task4">
      <output renderas="section"/>
      <output type="web" chunk="false"/>
    </module>
    <module resourceref="task3"/>
  </module>
  <module resourceref="index">
    <output type="web" file="book-index.html"/>
  </module>
</structure>]]></programlisting>

<para>Specifying a <tag class="attribute">file</tag> on an <tag>output</tag>
tells the assembly where to write the chunk. (If it occurs on a module which
is not chunked, it is simply ignored.) The <tag class="attribute">chunk</tag>
attribute can be used to specify which modules should (or should not) be
placed in separate chunks. The implied value on modules where it is not
specified depends on the name of the rendered element and the output type.</para>

<para>When processing a module, all of the relevant output directives are
combined. An <tag>output</tag> is relevant if it does not specify a
type or if the type specified matches the type of processing that is being
performed. If conflicting values are specified for any attribute, the last
value specified (in document order) is used.</para>

<para>To exclude (or include) content, we add the
<tag>filterout</tag> (and <tag>filterin</tag>) elements to the assembly.
Each may have a <tag class="attribute">type</tag> and specifies some number
of effectivity values.</para>

<para>If no conditions are specified on <tag>filterout</tag>, the
module is unconditionally excluded. (Specifying no conditions on a
<tag>filterin</tag> has no effect.)</para>

<para>If filters are used at the <tag>structure</tag> level, they apply to
the entire document. If they are used at the <tag>module</tag> level, they
apply only to that module.</para>

<para>With filters, our <tag>structure</tag> might look like this:</para>

<programlisting><![CDATA[<structure xml:id="user-guide">
  <output type="book" renderas="book"/>
  <output type="web" renderas="book" file="user-guide.html"/>
  <filterout type="web" condition="print"/>
  <info>
    <title>Widget User Guide</title>
  </info>
  <module resourceref="full-toc">
    <output type="web" chunk="false"/>
  </module>
  <module resourceref="tut1">
    <output renderas="chapter"/>
  </module>
  <module resourceref="tut2">
    <filterin type="web" condition="print"/>
    <filterout type="web" userlevel="advanced"/>
  </module>
  <module resourceref="task1"/>
  <module resourceref="tut3">
    <output renderas="appendix"/>
    <info>
      <title>Troubleshooting spindle and bearing problems</title>
    </info>
    <module resourceref="tut5" contentonly="true"/>
    <module resourceref="task4">
      <output renderas="section"/>
      <output type="web" chunk="false"/>
    </module>
    <module resourceref="task3"/>
  </module>
  <module resourceref="index">
    <filterout type="web"/>
  </module>
</structure>]]></programlisting>

<para>This <tag>structure</tag> applies the following filters when rendering
for the web: print only content is excluded globally; in tutorial 2,
print only content <emphasis>is</emphasis> included, but advanced material
is excluded; and the entire index is excluded.</para>

</section>

<section xml:id="ex-ref">
<title>Example: Assembling an Online Reference</title>

<para>The online reference differs from the preceding book-based examples
in that no total, linear order is imposed on the content. Instead, navigation
is performed either by search (which is outside the scope of assemblies)
or through related links.</para>

<para>Using the resources defined in <xref linkend="ex-book"/>, here's
a plausible <tag>structure</tag> for our online reference.</para>

<programlisting><![CDATA[<structure xml:id="user-guide">
  <output renderas="topic"/>
  <filterout type="web" condition="print"/>
  <info>
    <title>Widget Reference</title>
  </info>
  <module resourceref="tut1"/>
  <module resourceref="tut2"/>
  <module resourceref="task1"/>
  <module resourceref="tut3">
    <info>
      <title>Troubleshooting spindle and bearing problems</title>
    </info>
    <module resourceref="tut5" contentonly="true"/>
    <module resourceref="task4"/>
    <module resourceref="task3"/>
  </module>
  <module resourceref="tut4"/>
  <module resourceref="task2"/>
  <module resourceref="index"/>
</structure>]]></programlisting>

<para>The resulting realized structure will be a nested set of
<tag>topic</tag> elements. Topics don't nest in DocBook (at least
under the current proposal), so this isn't a valid DocBook document.
However, the nested topics provide a navigational structure for the
online presentation. The rendering system is, we assume, smart enough
to render each of the topics separately, as if they were all top-level
siblings.</para>

</section>
</chapter>