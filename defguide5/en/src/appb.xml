<?xml version="1.0" encoding="utf-8"?>
<appendix xmlns="http://docbook.org/docbook-ng" version="gin" xml:id="app-xml">
<?dbhtml filename="appb.html"?>
<info>
  <title>DocBook and <acronym>XML</acronym></title>
  <pubdate>$Date$</pubdate>
  <releaseinfo>$Revision$</releaseinfo>
</info>

<para>
<indexterm xml:id="xmldocbookappb" class="startofrange" significance="normal"><primary>DocBook DTD</primary>
  <secondary>XML</secondary></indexterm>
<indexterm xml:id="docbookxmlappa" class="startofrange" significance="normal"><primary>XML</primary>
  <secondary>DocBook and</secondary></indexterm>
<indexterm significance="normal"><primary>SGML</primary>
  <secondary>XML and</secondary></indexterm>
<indexterm significance="normal"><primary>XML</primary>
  <secondary>SGML, processing</secondary></indexterm>

<acronym>XML</acronym>, the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.w3.org/TR/REC-xml">Extensible
Markup Language</link>, is a simple dialect of <acronym>SGML</acronym>. In the words of the
<acronym>XML</acronym> specification, “the goal [of <acronym>XML</acronym>] is to enable generic <acronym>SGML</acronym> to be
served, received, and processed on the Web in the way that is now possible
with <acronym>HTML</acronym>.”</para>
<para><acronym>XML</acronym> raises two issues with respect to DocBook:<itemizedlist>
<listitem><para>Are DocBook <acronym>SGML</acronym> instances valid <acronym>XML</acronym> instances?</para>
</listitem>
<listitem><para>Can the DocBook <acronym>DTD</acronym> be made into a valid <acronym>XML</acronym> <acronym>DTD</acronym>?</para>
</listitem>
</itemizedlist></para>
<para>If you have an existing <acronym>SGML</acronym> system, and your primary goal is
to serve DocBook documents over the Web as <acronym>XML</acronym>, only the first of
these issues is relevant.  As the popularity of <acronym>XML</acronym> grows, we will
see more and more <acronym>XML</acronym>-aware tools that don't implement full
<acronym>ISO</acronym> 8879 <acronym>SGML</acronym>. If your goal is to author DocBook
documents with one of this new generation of tools, you will only be
able to achieve validity with an <acronym>XML</acronym> DocBook <acronym>DTD</acronym>.</para>
<para>
<indexterm significance="normal"><primary>OASIS</primary>
  <secondary>XML DocBook version</secondary></indexterm>

Although not yet officially adopted by the <acronym>OASIS</acronym> DocBook Technical 
Committee, an <acronym>XML</acronym> version of DocBook is available now and
provided on the <acronym>CD-ROM</acronym>.
</para>
<section><info><title>DocBook Instances as <acronym>XML</acronym></title></info>

<para>
<indexterm significance="normal"><primary>DocBook DTD</primary>
  <secondary>instances, converting to XML</secondary></indexterm>
<indexterm significance="normal"><primary>XML</primary>
  <secondary>DocBook instances, converting to</secondary></indexterm>

Most DocBook documents can be made into well-formed <acronym>XML</acronym> documents very
easily. With few exceptions, valid DocBook <acronym>SGML</acronym> instances are also well-formed
<acronym>XML</acronym> instances. The following areas may need to be addressed.</para>

<section><info><title>System Identifiers</title></info>
<para>
<indexterm significance="normal"><primary>system identifiers</primary>
  <secondary>SGML</secondary></indexterm>
<indexterm significance="normal"><primary>public identifiers</primary>
  <secondary>SGML</secondary></indexterm>
<indexterm significance="normal"><primary>parameter entities</primary>
  <secondary>SGML declarations</secondary></indexterm>
<indexterm significance="normal"><primary>declarations</primary>
  <secondary>document type and parameter entity (SGML)</secondary></indexterm>

It is common for <acronym>SGML</acronym> instances to use only a public identifier in document
type and parameter entity declarations:</para>
<programlisting>&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN"&gt;
&lt;chapter&gt;&lt;title&gt;Chapter Title&lt;/title&gt;
&lt;para&gt;
This &lt;emphasis&gt;paragraph&lt;/paragraph&gt; is important.
&lt;/para&gt;
&lt;/chapter&gt;</programlisting>
<para><acronym>XML</acronym> requires a system identifier:
<programlisting>
&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"&gt;
&lt;chapter&gt;&lt;title&gt;Chapter Title&lt;/title&gt;
&lt;para&gt;
This &lt;emphasis&gt;paragraph&lt;/paragraph&gt; is important.
&lt;/para&gt;
&lt;/chapter&gt;</programlisting></para>
<para>
<indexterm significance="normal"><primary>catalog files</primary>
  <secondary>system identifiers, resolving</secondary></indexterm>
<indexterm significance="normal"><primary>URN</primary>
  <secondary>XML system identifiers, future</secondary></indexterm>
<indexterm significance="normal"><primary>public identifiers</primary>
  <secondary>system identifiers, overriding</secondary></indexterm>

If you're used to using catalog files to resolve system identifiers,
you may be dismayed to learn that system identifiers are required. Because most
tools favor system identifiers over public identifiers, all of the portability
that was gained by the use of catalog files seems to have been lost. In the
long run, it'll be regained by the fact that <acronym>XML</acronym> system identifiers can be
<acronym>URN</acronym>s, which will have a resolution scheme like catalogs, but what about the
short run?</para>
<para>Luckily, there are a couple of options.  First, you can tell your tools to use the public identifiers even
though system identifiers are present. Simply add:</para>
<screen>OVERRIDE YES</screen>
<para>
<indexterm significance="normal"><primary>system identifiers</primary>
  <secondary>remapping with SYSTEM catalog directive</secondary></indexterm>

to your catalog files. Alternatively, you can remap system identifers
with the <literal>SYSTEM</literal> catalog directive.  If you are faced with 
documents that don't use public identifiers at all, this is probably your
only option.
</para>
</section>

<section><info><title>Minimization</title></info>
<para>
<indexterm significance="normal"><primary>markup</primary>
  <secondary>minimization</secondary>
    <tertiary>SGML/XML conversion problems</tertiary></indexterm>
<indexterm significance="normal"><primary>minimization</primary>
  <secondary>markup</secondary>
    <tertiary>SGML/XML conversion problems</tertiary></indexterm>

If you have used <acronym>SGML</acronym> minimization features in your instances:</para>

<programlisting>&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN"&gt;
&lt;chapter id=<co xml:id="xml-attrquote"/>chap1&gt;&lt;title&gt;Chapter Title&lt;/title&gt;
&lt;para&gt;
This &lt;emphasis&gt;paragraph<co xml:id="xml-endtag"/>&lt;/&gt; is important.
&lt;/para&gt;
&lt;/chapter&gt;</programlisting>

<para>they will not be well-formed <acronym>XML</acronym> instances. In particular, <acronym>XML</acronym><calloutlist>
<callout arearefs="xml-attrquote"><para>

<indexterm significance="normal"><primary>quotes</primary>
  <secondary>attribute values</secondary></indexterm>
<indexterm significance="normal"><primary>attributes</primary>
  <secondary>values</secondary>
    <tertiary>quoting</tertiary></indexterm>

Requires that all attribute values
be quoted.</para>
</callout>
<callout arearefs="xml-endtag"><para>Does not allow short tag minization.
</para>
</callout></calloutlist>
<acronym>XML</acronym> also forbids tag omission, and there are
probably a half dozen or so more exotic
examples of minimization that you have used. They're all illegal. The
easiest way to remove these minimizations is probably with a tool like <command>
sgmlnorm</command> (included in the <acronym>SP</acronym> and Jade distributions, on
the <xref linkend="app-cdrom"/>).</para>
<para>The result will be something like this:</para>
<programlisting>&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"&gt;
&lt;chapter id="chap1"&gt;&lt;title&gt;Chapter Title&lt;/title&gt;
&lt;para&gt;
This &lt;emphasis&gt;paragraph&lt;/emphasis&gt; is important.
&lt;/para&gt;
&lt;/chapter&gt;</programlisting>
</section>

<section><info><title>Attribute Default Values</title></info>
<para>
<indexterm significance="normal"><primary>attributes</primary>
  <secondary>default values</secondary></indexterm>

Correct processing of this document may require access to the default
attributes:</para>
<programlisting>&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN"&gt;
&lt;chapter&gt;&lt;title&gt;Chapter Title&lt;/title&gt;
&lt;para&gt;
Write to us at:
&lt;address<co xml:id="xml-defattr"/>&gt;
90 Sherman Street
Cambridge, MA 02140
&lt;/address&gt;
&lt;/para&gt;
&lt;/chapter&gt;</programlisting>
<calloutlist>
<callout arearefs="xml-defattr"><para><tag>Address</tag> expresses
that its content is line-specific with an attribute.</para>
</callout></calloutlist>
<para>Some <acronym>XML</acronym> processing environments are going to ignore the doctype declaration
in your document, even if it's present. This is relevant when your instance
uses elements that have attributes with default values. The default values
are expressed in the <acronym>DTD</acronym>, but may not be expressed in your instance. In the
case of DocBook, there are relatively few of these, and your stylesheet can
probably be constructed to do the right thing in either case. (It essentially
treats the attributes as if they had implied values.)</para>
<para>The result will be something like this:</para>
<programlisting>&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"&gt;
&lt;chapter&gt;&lt;title&gt;Chapter Title&lt;/title&gt;
&lt;para&gt;
Write to us at:
&lt;address format="linespecific"&gt;
90 Sherman Street
Cambridge, MA 02140
&lt;/address&gt;
&lt;/para&gt;
&lt;/chapter&gt;</programlisting>
</section>

<section><info><title>Character and <literal>SDATA</literal> Entities</title></info>
<programlisting>&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN"&gt;
&lt;chapter&gt;&lt;title&gt;Chapter Title&lt;/title&gt;
&lt;para&gt;
This book was published by O'Reilly<co xml:id="xml-sdata"/>&amp;trade;.
&lt;/para&gt;
&lt;/chapter&gt;</programlisting>
<calloutlist>
<callout arearefs="xml-sdata"><para>
<indexterm significance="normal"><primary>characters</primary>
  <secondary>entities</secondary></indexterm>
<indexterm significance="normal"><primary>SDATA entities</primary></indexterm>
<indexterm significance="normal"><primary>entities</primary>
  <secondary>characters</secondary></indexterm>
<indexterm significance="normal"><primary>entities</primary>
  <secondary>SDATA</secondary></indexterm>
<indexterm significance="normal"><primary>XML</primary>
  <secondary>SDATA entities, not allowing</secondary></indexterm>
<indexterm significance="normal"><primary>ISO standards</primary>
  <secondary>entity sets</secondary>
    <tertiary>SDATA entities, problems with (XML)</tertiary></indexterm>
<indexterm significance="normal"><primary>Unicode character set</primary>
  <secondary>ISO standard entity sets and</secondary></indexterm>

The DocBook <acronym>DTD</acronym> defines all of the standard <acronym>ISO</acronym>
entities automatically, but the <acronym>ISO</acronym> definitions use
<literal>SDATA</literal>, which is not allowed in <acronym>XML</acronym>. Eventually,
<acronym>ISO</acronym> (or someone else) will release official
<acronym>ISO</acronym> standard entity sets that make reference to the
appropriate Unicode character for each entity. Until then, the <acronym>XML</acronym>
version of DocBook is
distributed with an unofficial set.</para>
<para>
<indexterm significance="normal"><primary>internal subset</primary>
  <secondary>entity declarations</secondary></indexterm>
<indexterm significance="normal"><primary>external subset</primary>
  <secondary>entity declarations (SGML/XML conversion)</secondary></indexterm>

If you use entities in your document, it may be wise to put declarations
for them in the internal subset of each instance, because some
<acronym>XML</acronym> browsers are going to parse the internal subset but not the external subset.
If the entity declarations are in your <acronym>DTD</acronym>, and the browser does not parse
the external subset, the browser won't know how to display the entities in
your document.</para>
</callout></calloutlist>
<para>The result will be something like this:</para>
<programlisting>&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
&lt;!ENTITY trade "&amp;#x2122;"&gt;
&lt;chapter&gt;&lt;title&gt;Chapter Title&lt;/title&gt;
&lt;para&gt;
This book was published by O'Reilly&amp;trade;.
&lt;/para&gt;
&lt;/chapter&gt;</programlisting>
</section>

<section><info><title>Case-Sensitivity</title></info>
<programlisting><co xml:id="xml-nmcasekey"/>&lt;!DocType Book PUBLIC "-//OASIS//DTD DocBook V3.1//EN"&gt;
<co xml:id="xml-namecase1"/>&lt;book&gt;&lt;title&gt;Book Title&lt;/title&gt;
&lt;chapter&gt;&lt;title&gt;Chapter Title<co xml:id="xml-namecase2"/>&lt;/Title&gt;
&lt;para&gt;
Paragraph test.
&lt;/para&gt;
<co xml:id="xml-wf1"/>&lt;PARA&gt;
A second paragraph.
&lt;/PARA&gt;
&lt;/chapter&gt;
&lt;/book&gt;</programlisting>
<para>
<indexterm significance="normal"><primary>case sensitivity</primary>
  <secondary>DocBook SGML declaration</secondary></indexterm>
<indexterm significance="normal"><primary>elements</primary>
  <secondary>case sensitivity (DocBook)</secondary></indexterm>
<indexterm significance="normal"><primary>attributes</primary>
  <secondary>case sensitivity (DocBook)</secondary></indexterm>
<indexterm significance="normal"><primary>XML</primary>
  <secondary>case sensitivity</secondary></indexterm>

With the standard DocBook <acronym>SGML</acronym> declaration, DocBook instances are not
case-sensitive with respect to element and attribute names. <acronym>XML</acronym> is always
case-sensitive. As long as you have used the same case consistently, your
<acronym>XML</acronym> instances will be well-formed, but it may still be advantageous to do some
case-folding because it will simplify the construction of stylesheets.</para>
<calloutlist>
<callout arearefs="xml-nmcasekey"><para>Keywords in <acronym>XML</acronym> are case-sensitive,
and must be in uppercase.
<indexterm significance="normal"><primary>keywords</primary>
  <secondary>case sensitivity, XML</secondary></indexterm>
</para>
</callout>
<callout arearefs="xml-namecase1"><para>The name declared in the document
type declaration, like all other names, is case-sensitive.
<indexterm significance="normal"><primary>names</primary>
  <secondary>case sensitivity</secondary></indexterm>

</para>
</callout>
<callout arearefs="xml-namecase2"><para>Start and end tags must use the same
case.
<indexterm significance="normal"><primary>start tags</primary>
  <secondary>case sensitivity</secondary></indexterm>
<indexterm significance="normal"><primary>end tags</primary>
  <secondary>case sensitivity</secondary></indexterm>
</para>
</callout>
<callout arearefs="xml-wf1"><para>In <acronym>XML</acronym>, <tag>Para</tag> is not the
same as <tag>PARA</tag>. Note that this is a validity error (against
the <acronym>XML</acronym> version of DocBook), but it is not an <acronym>XML</acronym> well-formedness error. The use of <tag>
para</tag> and <tag>PARA</tag> as distinct names is as legitimate
as using <tag>foo</tag> and <tag>bar</tag>, as long as they
are properly nested.
<indexterm significance="normal"><primary>Para element</primary>
  <secondary>PARA vs. (XML)</secondary></indexterm>
</para>
</callout></calloutlist>
<para>The result will be something like this:</para>
<programlisting>&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"&gt;
&lt;book&gt;&lt;title&gt;Book Title&lt;/title&gt;
&lt;chapter&gt;&lt;title&gt;Chapter Title&lt;/title&gt;
&lt;para&gt;
Paragraph test.
&lt;/para&gt;
&lt;para&gt;
A second paragraph.
&lt;/para&gt;
&lt;/chapter&gt;
&lt;/book&gt;</programlisting>
</section>

<section><info><title>No #CONREF Attributes</title></info>
<programlisting>&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN"&gt;
&lt;chapter&gt;&lt;title&gt;Chapter Title&lt;/title&gt;
&lt;indexterm id="idx-bor"&gt;&lt;primary&gt;Something&lt;/primary&gt;&lt;/indexterm&gt;<co xml:id="xml-conrefstart"/>
&lt;para&gt;
Paragraph test.
&lt;/para&gt;
&lt;indexterm startref="idx-bor"&gt;<co xml:id="xml-conref"/>
&lt;/chapter&gt;</programlisting>
<para>
<indexterm significance="normal"><primary>#CONREF attributes</primary></indexterm>
<indexterm significance="normal"><primary>Startref attribute</primary></indexterm>
<indexterm significance="normal"><primary>IndexTerm element</primary></indexterm>
<indexterm significance="normal"><primary>OtherTerm attribute</primary></indexterm>
<indexterm significance="normal"><primary>GlossSee element</primary></indexterm>
<indexterm significance="normal"><primary>GlossSeeAlso element</primary></indexterm>
<indexterm significance="normal"><primary>empty tags</primary>
  <secondary>#CONREF attributes</secondary></indexterm>

The <tag class="attribute">StartRef</tag> attribute on <tag>
indexterm</tag> and the <tag class="attribute">OtherTerm</tag>
attribute on <tag>GlossSee</tag> and <tag>GlossSeeAlso</tag>
are <literal>#CONREF</literal> attributes.</para>
<para>In <acronym>SGML</acronym> terms, this means that when these attributes are used, the content
of the tag is taken to be the same as the content of the tag pointed to by
the attribute. <calloutlist>
<callout arearefs="xml-conrefstart xml-conref"><para>If you
have used these attributes, your instance will contain both empty and non-empty
versions of these tags.</para>
</callout></calloutlist></para>
<para>Your best bet is to transform the <literal>#CONREF</literal>
version into an empty tag and let your stylesheet deal with it appropriately.
</para>
<para>The result will be something like this:</para>
<programlisting>&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"&gt;
&lt;chapter&gt;&lt;title&gt;Chapter Title&lt;/title&gt;
&lt;indexterm id="idx-bor"&gt;&lt;primary&gt;Something&lt;/primary&gt;&lt;/indexterm&gt;
&lt;para&gt;
Paragraph test.
&lt;/para&gt;
&lt;indexterm startref="idx-bor"/&gt;
&lt;/chapter&gt;</programlisting>
</section>

<section><info><title>Only Explicit CDATA-Marked Sections Are Allowed</title></info>
<programlisting>&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [
&lt;!ENTITY % draft "IGNORE"&gt;
&lt;!ENTITY % sourcecode "CDATA"&gt;
]&gt;
&lt;chapter&gt;&lt;title&gt;Chapter Title&lt;/title&gt;
<co xml:id="xml-ignore"/>&lt;![ %draft; [
&lt;para&gt;
Draft paragraph.
&lt;/para&gt;
]]&gt;
&lt;para&gt;
The following code is totally out of context:
&lt;programlisting&gt;
&lt;![ <co xml:id="xml-cdata"/>%sourcecode; [
if (x &lt; 3) {
  y = 3;
}
]]&gt;
&lt;/programlisting&gt;
&lt;/chapter&gt;</programlisting>
<calloutlist>
<callout arearefs="xml-ignore xml-cdata"><para>
<indexterm significance="normal"><primary>parameter entities</primary>
  <secondary>XML document body</secondary></indexterm>
<indexterm significance="normal"><primary>XML</primary>
  <secondary>parameter entities</secondary></indexterm>
<indexterm significance="normal"><primary>internal subset</primary>
  <secondary>parameter entities (XML)</secondary></indexterm>

Parameter entities are not
allowed in the body of <acronym>XML</acronym> documents (they are allowed in the internal subset).
</para>
</callout>
<callout arearefs="xml-ignore"><para><acronym>XML</acronym> instances cannot contain <literal>
IGNORE</literal>, <literal>INCLUDE</literal>, <literal>TEMP</literal>, or <literal>
RCDATA</literal> marked sections.
<indexterm significance="normal"><primary>marked sections</primary>
  <secondary>XML, restrictions</secondary></indexterm>
<indexterm significance="normal"><primary>IGNORE keyword (marked section)</primary></indexterm>
<indexterm significance="normal"><primary>INCLUDE keyword (marked section)</primary>
  <secondary>XML, not allowing</secondary></indexterm>
<indexterm significance="normal"><primary>TEMP marked section (XML)</primary></indexterm>
<indexterm significance="normal"><primary>RCDATA</primary></indexterm>
</para>
</callout>
<callout arearefs="xml-cdata"><para><literal>CDATA</literal> marked sections
must use the “<literal>CDATA</literal>” keyword literally because
parameter entities are not allowed.
<indexterm significance="normal"><primary>CDATA</primary>
  <secondary>marked sections</secondary></indexterm>
</para>
</callout></calloutlist>
<para>The result will be something like this:</para>
<programlisting>&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"&gt;
&lt;chapter&gt;&lt;title&gt;Chapter Title&lt;/title&gt;
&lt;para&gt;
The following code is totally out of context:
&lt;programlisting&gt;
&lt;![CDATA[
if (x &lt; 3) {
  y = 3;
}
]]&gt;
&lt;/programlisting&gt;
&lt;/chapter&gt;</programlisting>
</section>

<section><info><title>No SUBDOC or CDATA External Entities</title></info>
<programlisting>&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [
&lt;!ENTITY % sourcecode SYSTEM "program.c" CDATA&gt;
]&gt;
&lt;chapter&gt;&lt;title&gt;Chapter Title&lt;/title&gt;
&lt;para&gt;
The following code is totally out of context:
&lt;programlisting&gt;
&amp;sourcecode;
&lt;/programlisting&gt;
&lt;/chapter&gt;</programlisting>
<para>
<indexterm significance="normal"><primary>external general entities</primary>
  <secondary>XML restrictions</secondary></indexterm>
<indexterm significance="normal"><primary>XML</primary>
  <secondary>external entities, restrictions</secondary></indexterm>
<indexterm significance="normal"><primary>CDATA</primary>
  <secondary>XML instances, restrictions</secondary></indexterm>
<acronym>XML</acronym> instances cannot use <literal>CDATA</literal> or <literal>SUBDOC
</literal> external entities. One option for integrating external <literal>
CDATA</literal> content into a document is to employ a pre-processing pass
that inserts the content inline, wrapped in a <literal>CDATA</literal> marked
section.</para>
<para>
<indexterm significance="normal"><primary>SUBDOC entities</primary></indexterm>
<indexterm significance="normal"><primary>namespaces</primary></indexterm>

<literal>SUBDOC</literal> entities may be more problematic. If you do
not require validation, it may be sufficient to simply put them inline. <acronym>XML</acronym>
namespaces may offer another possible solution.</para>
<para>The result will be something like this:</para>
<programlisting>&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"&gt;
&lt;chapter&gt;&lt;title&gt;Chapter Title&lt;/title&gt;
&lt;para&gt;
The following code is totally out of context:
&lt;programlisting&gt;
&lt;![CDATA[
int main () {
..
}
]]&gt;
&lt;/programlisting&gt;
&lt;/chapter&gt;</programlisting>
</section>

<section><info><title>No Data Attributes on Notations</title></info>
<para>They're not allowed in <acronym>XML</acronym>, so don't add any.
<indexterm significance="normal"><primary>data attributes, notations (XML prohibiting)</primary></indexterm>

</para>
</section>

<section><info><title>No Attribute Value Specifications on<?lb?>Entity Declarations</title></info>
<para>
<indexterm significance="normal"><primary>attributes</primary>
  <secondary>values</secondary>
    <tertiary>specifying (entity declarations)</tertiary></indexterm>
<indexterm significance="normal"><primary>declarations</primary>
  <secondary>entities</secondary>
    <tertiary>attribute values, prohibiting (XML)</tertiary></indexterm>
<indexterm significance="normal"><primary>entities</primary>
  <secondary>declarations, attribute values (XML)</secondary></indexterm>

They're not allowed in <acronym>XML</acronym>, so don't add any.</para>
</section>
</section>
<section xml:id="s-docbookxml"><info><title>The DocBook <acronym>DTD</acronym> as <acronym>XML</acronym></title></info>

<indexterm significance="normal"><primary>DocBook DTD</primary>
  <secondary>XML</secondary>
    <tertiary>converting to</tertiary></indexterm>
<indexterm significance="normal"><primary>XML</primary>
  <secondary>DocBook DTD, converting to</secondary></indexterm>

<para>Converting the DocBook <acronym>DTD</acronym> to <acronym>XML</acronym> is much more challenging
than converting the instances. It is probably not possible to
construct an <acronym>XML</acronym> <acronym>DTD</acronym> that is identical to the validation power
of DocBook. The list below identifies most of the issues that
must be addressed, and describes how the DocBook <acronym>XML</acronym> <acronym>DTD</acronym>; deals with
them:</para>

<variablelist>
<varlistentry><term>Comments are not allowed inside markup declarations</term>
<listitem>
<para>
<indexterm significance="normal"><primary>comments</primary>
  <secondary>markup declarations (DocBook XML)</secondary></indexterm>
<indexterm significance="normal"><primary>declarations</primary>
  <secondary>comment declarations</secondary></indexterm>

Most of them have been moved to comment declarations preceding the markup
declaration that used to contain them. A few small, inline comments that seemed
like they would be out of context if moved before the declaration were simply
deleted.</para>
</listitem>
</varlistentry>
<varlistentry><term>Name groups are not allowed in element or attribute list
declarations</term>
<listitem>
<para>
<indexterm significance="normal"><primary>name groups (DocBook XML)</primary></indexterm>
<indexterm significance="normal"><primary>elements</primary>
  <secondary>declarations</secondary>
    <tertiary>name groups, prohibiting</tertiary></indexterm>
<indexterm significance="normal"><primary>attributes</primary>
  <secondary>declarations</secondary>
    <tertiary>name groups, prohibiting</tertiary></indexterm>

The small number of places in which DocBook uses name groups have
been expanded.</para>
<para>There's one downside: DocBook uses <literal>%admon.class;</literal> in a name
group to define the content model, and attribute lists for elements in the
admonitions class. In DocBook XML, this convenience cannot be expressed. If additional
admonitions are added, the element and attribute list declarations will have
to be copied for them.</para>
</listitem>
</varlistentry>
<varlistentry><term>No <literal>CDATA</literal> or <literal>RCDATA</literal>
declared content</term>
<listitem>
<para>
<indexterm significance="normal"><primary>CDATA</primary>
  <secondary>declared content, prohibiting</secondary></indexterm>
<indexterm significance="normal"><primary>RCDATA</primary></indexterm>

<tag>Graphic</tag> and <tag>InlineGraphic</tag> have
been made <literal>EMPTY</literal>. The content model for <tag>SynopFragmentRef
</tag>, the only <literal>RCDATA</literal> element in DocBook, has been
changed to <literal>(arg | group)+</literal>.</para>
</listitem>
</varlistentry>
<varlistentry><term>No exclusions or inclusions on element declarations</term>
<listitem>
<para>
<indexterm significance="normal"><primary>inclusions</primary>
  <secondary>element declarations, prohibiting (DocBook XML)</secondary></indexterm>
<indexterm significance="normal"><primary>exclusions</primary>
  <secondary>element declarations, prohibiting (DocBook XML)</secondary></indexterm>

They had to be removed.</para>
<para>
<indexterm significance="normal"><primary>exclusions</primary>
  <secondary>DocBook, uses</secondary></indexterm>

In DocBook, exclusions are used to exclude the following:<itemizedlist>
<listitem><para>Ubiquitous elements (<tag>indexterm</tag>
and <tag>BeginPage</tag>) from a number of contexts in which they
should not occur (such as metadata, for example).</para>
</listitem>
<listitem><para>
<indexterm significance="normal"><primary>formal objects, exclusions (DocBook)</primary></indexterm>

Formal objects from <tag>Highlights</tag>, <tag>
Example</tag>s, <tag>Figure</tag>s and <tag>LegalNotice</tag>s.
</para>
</listitem>
<listitem><para>
<indexterm significance="normal"><primary>tables</primary>
  <secondary>exclusions (DocBook)</secondary></indexterm>
<indexterm significance="normal"><primary>InformalTable element</primary>
  <secondary>excluding from tables</secondary></indexterm>

Formal objects and <tag>InformalTable</tag>s
from tables.</para>
</listitem>
<listitem><para>
<indexterm significance="normal"><primary>footnotes, exclusions (DocBook)</primary></indexterm>
<indexterm significance="normal"><primary>block elements</primary>
  <secondary>excluding from footnotes</secondary></indexterm>

Block elements and <tag>Footnote</tag>s
from <tag>Footnote</tag>s</para>
</listitem>
<listitem><para>Admonitions, <tag>EntryTbl</tag>s, and <tag>
Acronym</tag>s from themselves.
<indexterm significance="normal"><primary>admonitions</primary>
  <secondary>exclusions (DocBook)</secondary></indexterm>
<indexterm significance="normal"><primary>acronyms (DocBook XML)</primary></indexterm>
</para>
</listitem>
</itemizedlist></para>
<para>Removing these exclusions from DocBook <acronym>XML</acronym> means that it is now valid, in
the <acronym>XML</acronym> sense, to do some things that don't make a lot of sense (like put
a <tag>Footnote</tag> in a <tag>Footnote</tag>). Be careful.
</para>
<para>
<indexterm significance="normal"><primary>inclusions</primary>
  <secondary>DocBook, uses</secondary></indexterm>
<indexterm significance="normal"><primary>IndexTerm element</primary>
  <secondary>inclusions, DocBook</secondary></indexterm>
<indexterm significance="normal"><primary>BeginPage element (DocBook inclusions)</primary></indexterm>
<indexterm significance="normal"><primary>parameter entities</primary>
  <secondary>DbXML, ubiquitous element inclusions</secondary></indexterm>
<indexterm significance="normal"><primary>#PCDATA keyword</primary>
  <secondary>DbXML, ubiquitous elements</secondary></indexterm>

Inclusions in DocBook are used to add the ubiquitious elements (<tag>
indexterm</tag> and <tag>BeginPage</tag>) unconditionally to a
large number of contexts. In order to make these elements available in
DocBook <acronym>XML</acronym>,
they have been added to most of the parameter entities that include <literal>
#PCDATA</literal>. If new locations are discovered where these terms are desired, DocBook <acronym>XML</acronym>
will be updated.</para>
</listitem>
</varlistentry>
<varlistentry><term>Elements with mixed content must have <literal>#PCDATA
</literal> first.</term>
<listitem>
<para>
<indexterm significance="normal"><primary>elements</primary>
  <secondary>mixed content (DocBook XML)</secondary></indexterm>
<indexterm significance="normal"><primary>content models</primary>
  <secondary>elements, updating (DocBook XML)</secondary></indexterm>

The content models of many elements have been updated to make them a
repeatable OR group beginning with <literal>#PCDATA</literal>.</para>
</listitem>
</varlistentry>
<varlistentry><term>Many declared attribute types (<literal>NAME</literal>, <literal>
NUMBER</literal>, <literal>NUTOKEN</literal>, and so on) are not allowed</term>
<listitem>
<para>
<indexterm significance="normal"><primary>attributes</primary>
  <secondary>declared types, prohibiting (DocBook XML)</secondary></indexterm>
<indexterm significance="normal"><primary>NMTOKEN(S) attribute</primary>
  <secondary>DbXML</secondary></indexterm>
<indexterm significance="normal"><primary>CDATA</primary>
  <secondary>DbXML</secondary></indexterm>

They have all been replaced by <literal>NMTOKEN</literal> or <literal>
CDATA</literal>.</para>
</listitem>
</varlistentry>
<varlistentry><term>No <literal>#CONREF</literal> attributes allowed.</term>
<listitem>
<para>
<indexterm significance="normal"><primary>#CONREF attributes</primary>
  <secondary>DbXML, prohibiting</secondary></indexterm>
<indexterm significance="normal"><primary>#IMPLIED attribute (DocBook XML)</primary></indexterm>
<indexterm significance="normal"><primary>GlossSee element</primary>
  <secondary>DbXML</secondary></indexterm>
<indexterm significance="normal"><primary>GlossSeeAlso element</primary>
  <secondary>DbXML</secondary></indexterm>
<indexterm significance="normal"><primary>IndexTerm element</primary>
  <secondary>empty (DocBook XML)</secondary></indexterm>

The <literal>#CONREF</literal> attributes on <tag>indexterm</tag>, <tag>
GlossSee</tag>, and <tag>GlossSeeAlso</tag> were changed to <literal>
#IMPLIED</literal>. The content model of <tag>indexterm</tag> was
modified so that it can be empty.</para>
</listitem>
</varlistentry>
<varlistentry><term>Attribute default values must be quoted.</term>
<listitem>
<para>
<indexterm significance="normal"><primary>quotes</primary>
  <secondary>attribute values</secondary>
    <tertiary>DbXML</tertiary></indexterm>
<indexterm significance="normal"><primary>attributes</primary>
  <secondary>values</secondary>
    <tertiary>quoting</tertiary></indexterm>

Quotes were added wherever necessary.
<indexterm startref="docbookxmlappa" class="endofrange"/>
<indexterm startref="xmldocbookappb" class="endofrange"/>
</para>
</listitem>
</varlistentry>
</variablelist>

</section>
</appendix>