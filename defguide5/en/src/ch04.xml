<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="ch-publish">
<?dbhtml filename="ch04.html"?>
<title>Publishing DocBook Documents</title>
<info>
<pubdate>$Date$</pubdate>
<releaseinfo>$Revision$</releaseinfo>
</info>

<para><indexterm xml:id="publishDocBookch04" class="startofrange" significance="normal"><primary>DocBook DTD</primary>
  <secondary>publishing documents</secondary></indexterm><indexterm xml:id="DocBookpublishch04" class="startofrange" significance="normal"><primary>publishing DocBook documents</primary></indexterm><indexterm significance="normal"><primary>stylesheets</primary>
  <secondary>publishing SGML/XML documents</secondary></indexterm><indexterm significance="normal"><primary>HTML</primary>
  <secondary>translating SGML/XML documents</secondary>
</indexterm>Creating and editing <acronym>XML</acronym> documents is
usually only half the battle. After you've composed your document,
you'll want to publish it. Publishing, for our purposes, means either
print or web publishing. For <acronym>XML</acronym> documents, this is
usually accomplished with some kind of
<glossterm>stylesheet</glossterm>. In some environments, it is now
possible to publish an <acronym>XML</acronym> document on the Web
simply by putting it online with a stylesheet.
</para>

<section xml:id="stylesurvey"><info><title>A Survey of Stylesheet Languages</title></info>
<para><indexterm significance="normal"><primary>stylesheets</primary>
  <secondary>languages</secondary></indexterm><indexterm significance="normal"><primary>languages</primary>
  <secondary>stylesheets</secondary>
</indexterm>Over the years, a number of attempts have been made to
produce a standard stylesheet language and, failing that, a large
number of proprietary languages have been developed. Since this book was
first written, three standards have emerged as the clear front-runners:
</para>
<variablelist>
<varlistentry><term>CSS</term>
<listitem>
<para><indexterm significance="normal"><primary>CSS</primary></indexterm><indexterm significance="normal"><primary>HTML</primary>
  <secondary>CSS</secondary></indexterm><indexterm significance="normal"><primary>XML</primary>
  <secondary>CSS</secondary>
</indexterm>
The <acronym>W3C</acronym> CSS Working Group created
<acronym>CSS</acronym> as a style attachment language for <acronym>HTML</acronym>.
It has also been advanced as a stylesheet language for XML. Some browsers will
style arbitrary XML with CSS and some commercial products exist that will
render XML+CSS either online or in print.</para>
</listitem>
</varlistentry>
<varlistentry><term>XSL</term>
<listitem>
<para><indexterm significance="normal"><primary>XSL</primary></indexterm><indexterm significance="normal"><primary>XML</primary>
  <secondary>XSL</secondary></indexterm><indexterm significance="normal"><primary>Extensible Style Language</primary><see>XSL</see>
</indexterm>XSL 1.0 is well-established and is probably the most common
styling technology for DocBook. XSL 2.0 offers a number of important new
features (at the expense of some complexity, naturally) and is growing
in popularity.</para>
<para>It's worth observing that there are two, related technologies in play
here. XSLT 1.0 and 2.0, the transformation languages, and XSL Formatting
Objects. XSL Formatting Objects are an XML vocabulary for describing constraints
on page layout.
</para>
</listitem>
</varlistentry>
<varlistentry><term>XQuery</term>
<listitem>
<para><indexterm significance="normal"><primary>XQuery</primary></indexterm><indexterm significance="normal"><primary>XML</primary>
  <secondary>XQuery</secondary></indexterm><indexterm significance="normal"><primary>XML Query Language</primary><see>XQuery</see>
</indexterm>XQuery 1.0, developed in parallel with XSL 2.0, provides a different
set of features than XSL, but can be used to transform DocBook into other
formats.</para>
</listitem>
</varlistentry>
</variablelist>
<section xml:id="styleexamples"><info><title>Stylesheet Examples</title></info>

<para><indexterm xml:id="stylsheetsch04" class="startofrange" significance="normal"><primary>stylesheets</primary>
  <secondary>examples</secondary>
</indexterm>By way of comparison, here's an example of each of the
standard style languages. In each case, the stylesheet fragment shown
contains the rules that reasonably formatted the following paragraph:
</para>
<screen>
&lt;para&gt;This is an example paragraph. It should be presented in a
reasonable body font. &lt;emphasis&gt;Emphasized&lt;/emphasis&gt; words
should be printed in italics. A single level of 
&lt;emphasis&gt;Nested &lt;emphasis&gt;emphasis&lt;/emphasis&gt; should also
be supported.&lt;/emphasis&gt;
&lt;/para&gt;
</screen>
<section xml:id="s.css"><info><title><acronym>CSS</acronym> stylesheet</title></info>
<para><indexterm significance="normal"><primary>CSS stylesheets</primary>
  <secondary>example</secondary>
</indexterm>
<acronym>CSS</acronym> stylesheets consist of selectors and formatting
properties, as shown in <xref linkend="ex-css"/>.
</para>

<example xml:id="ex-css">
<info>
  <title>A Fragment of a <acronym>CSS</acronym> Stylesheet</title>
</info>
<programlisting>para              { display: block }
emphasis          { display: inline;
                    font-style: italic; }
emphasis emphasis { display: inline;
                    font-style: upright; }</programlisting>
</example>

<para>FIXME: update this example to use namespaces correctly.</para>

</section>
<section xml:id="s.xsl"><info><title><acronym>XSL</acronym> stylesheet</title></info>
<para><indexterm significance="normal"><primary>XSL stylesheets</primary>
  <secondary>example</secondary>
</indexterm>
<acronym>XSL</acronym> stylesheets are <acronym>XML</acronym> documents, as shown in
<xref linkend="ex-xsl"/>. The element in the <acronym>XSL</acronym>
stylesheet that controls the presentation of specific elements is the
<tag namespace="http://www.w3.org/1999/XSL/Transform">xsl:template</tag> element.
</para>

<example xml:id="ex-xsl">
<info>
  <title>A Fragment of an <acronym>XSL</acronym> Stylesheet</title>
</info>
<programlisting>&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/XSL/Transform/1.0"
                xmlns:fo="http://www.w3.org/XSL/Format/1.0"
                version="1.0"&gt;

&lt;xsl:template match="para"&gt;   
  &lt;fo:block&gt;
    &lt;xsl:apply-templates/&gt;  
  &lt;/fo:block&gt;
&lt;/xsl:template&gt;  

&lt;xsl:template match="emphasis"&gt;
  &lt;fo:sequence font-style="italic"&gt;
    &lt;xsl:apply-templates/&gt;  
  &lt;/fo:sequence&gt;
&lt;/xsl:template&gt;  

&lt;xsl:template match="emphasis/emphasis"&gt;
  &lt;fo:sequence font-style="upright"&gt;
    &lt;xsl:apply-templates/&gt;  
  &lt;/fo:sequence&gt;
&lt;/xsl:template&gt;  

&lt;/xsl:stylesheet&gt;</programlisting>
</example>

<para>A complete stylesheet for generating an entire XSL Formatting Objects
document would
require additional boilerplate text not shown.</para>
</section>

<section xml:id="s.xquery"><info><title>XQuery</title></info>
<para><indexterm significance="normal"><primary>XQuery</primary>
  <secondary>example</secondary>
</indexterm>
<acronym>XQuery</acronym> is expressed in a mixture of text and XML
fragments, as shown in 
<xref linkend="ex-xquery"/>.
</para>

<example xml:id="ex-xquery">
<info>
  <title>A Fragment of XQuery</title>
</info>
<programlisting>FIXME: WRITE THIS</programlisting>
</example>

<para>A complete query for generating an XSL Formatting Objects document
would
require additional boilerplate text not shown.</para>
</section>
</section>
</section>

<section xml:id="xsl">
<info>
  <title>Using <acronym>XSL</acronym> to Publish DocBook Documents</title>
</info>

<para>For a detailed discussion of using <acronym>XSL</acronym> to publish
DocBook documents, see
<citetitle>DocBook XSL: The Complete Guide</citetitle> by
<personname><firstname>Bob</firstname><surname>Stayton</surname></personname>.
</para>

</section>
</chapter>