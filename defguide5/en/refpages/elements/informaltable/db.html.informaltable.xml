<refentry xmlns='http://docbook.org/ns/docbook'
          xmlns:xlink='http://www.w3.org/1999/xlink'
          xmlns:xi='http://www.w3.org/2001/XInclude'>
<info>
  <pubdate>$Date$</pubdate>
  <releaseinfo>$Revision$</releaseinfo>
</info>

<refmeta>
  <refentrytitle><?tdg-refentrytitle?></refentrytitle>
  <refmiscinfo role='element'>informaltable</refmiscinfo>
  <refmiscinfo role='pattern'>db.html.informaltable</refmiscinfo>
</refmeta>

<refnamediv>
  <refname><?tdg-refname?></refname>
  <refpurpose><?tdg-refpurpose?></refpurpose>
</refnamediv>

<?tdg-refsynopsisdiv?>

<refsection condition='ref.description'>
<title>Description</title>


<para>This <tag>informaltable</tag> element identifies an informal
HTML table (one without a <tag>caption</tag>). DocBook allows either
<acronym>CALS</acronym> or <acronym>HTML</acronym> tables, both of
which describe tables geometrically using rows, columns, and cells.
</para>

<para>HTML tables may include column headers and footers. To identify a 
row header, use a <tag>th</tag> in the row.</para>

<sidebar>
<title>Why aren't HTML tables in the HTML namespace?</title>
<para>HTML tables were introduced in DocBook V4.3 which was not in a namespace and
was defined normatively with a DTD. DTDs do not support namespaces very well. The
Technical Committee decided to simply add the HTML element names to DocBook.
This solution simplified specification, avoided issues of namespace support in
DTDs, and solved the most compelling use case: cut-and-paste of simple, text-only
HTML tables into DocBook.</para>
<para>It's worth noting that the <tag>td</tag> and <tag>th</tag>
elements have very different content models than their HTML counterparts.
</para>
</sidebar>

<refsection><title>Processing expectations</title>
<para><?tdg gentext='format.block'?></para>
</refsection>

<?tdg-attributes?>
<?tdg-parents?>
<?tdg-children?>

</refsection>

<?tdg-seealso?>

<!-- FIXME: add examples -->

</refentry>
