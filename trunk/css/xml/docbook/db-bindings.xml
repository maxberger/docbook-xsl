<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl"
     xmlns:html="http://www.w3.org/1999/xhtml">

  <binding id="ulink">
    <handlers>
      <handler event="click" button="0"
               action="window.location=this.attributes.url.value;"/>
      <handler event="mouseover"
               action="window.status=this.attributes.url.value;"/>
      <handler event="mouseout"
               action="window.status=null;"/>
    </handlers>
  </binding>

  <!--
    Binding for <xref>

    This binding both creates content for the <xref>, and defines its behaviour
    as a UI element.

    Current implementation relies on getElementById() for content genetration,
    which will usually not work, since Mozilla browsers don't use the DTD.
  -->
  <binding id="xref">

    <!-- This span is used to hold the content generated by the constructor -->
    <content>
      <html:span/>
    </content>

    <stylesheet src="plain-xref.css"/>

    <handlers>
      <!--
	I had a complicated action for "click", implemented with
	window.scrollTo().  This is *much* nicer, being simpler and making
	the back button work as expected.
      -->
      <handler event="click" button="0"
               action="window.location.hash = this.attributes.linkend.value"/>
      <handler event="mouseover"
               action="window.status=this.attributes.linkend.value;"/>
      <handler event="mouseout"
               action="window.status=null;"/>
    </handlers>

    <implementation>
      <constructor><![CDATA[
	var node = document.getAnonymousNodes(this)[0];
	var child = document.createTextNode(generateXrefText());
	var f = function() { node.appendChild(child); }
	setTimeout(f, 0);
      ]]></constructor>

      <method name="generateXrefText">
	<body><![CDATA[
	  if (this.attributes.endterm) {
	    var node = document.getElementById(this.attributes.endterm.value);
	    return node.textContent;
	  }
	  var targetNode = this.findLinkend();
	  if (targetNode == null) {
	    return this.attributes.linkend.value;
	  }
	  if (targetNode.attributes.xreflabel) {
	    return targetNode.attributes.xreflabel.value;
	  }
	  if (targetNode.getElementsByTagName('title')[0]) {
	    return targetNode.getElementsByTagName('title')[0].textContent;
	  }
	  return this.attributes.linkend.value;
	]]></body>
      </method>

      <method name="findLinkend">
	<body><![CDATA[
	  return document.getElementById(this.attributes.linkend.value);
	]]></body>
      </method>
    </implementation>
  </binding>

  <binding id="image">
    <content>
      <html:img xbl:inherits="src=fileref"/>
    </content>

    <implementation>
      <constructor>
	var img = document.getAnonymousNodes(this)[0];
	var file = this.getAttribute("fileref");
	// HACK: using img.src=file 'inline' doesn't seem to work
	//       but it does when called from a setTimeout()
	var f = function() { img.src = file; }
	setTimeout(f, 0);
      </constructor>
    </implementation>
  </binding>
</bindings>
