#!/bin/bash

# This shell script will definitely need to be hacked to run on your system!
# This script is usually called by the xslt script.
#
# Usage: saxon [shellopts] src.xml style.xsl output.{xml|html} [styleopts]
#

DONE=0
VERSION=652
EXTVERSION=643
DEBUG=0
JAR=0
XARG=""
YARG=""
RARG=""
MEMORY=""
QUIET=0

# identify the directory for DocBook XSL
for dir in "/sourceforge/docbook/xsl" \
           `dirname $0/../xsl` \
           "/usr/share/sgml/docbook/stylesheet/xsl/nwalsh" ; do
  if [ -d "$dir" ]; then
    DOCBOOKXSL="$dir"
    break
  fi
done

while [ "$DONE" = "0" ]; do
    case $1 in
	-d)	DEBUG=1;
		shift;
		;;
	-j)	JAR=1;
		shift;
		;;
	-652)	VERSION=652;
		shift;
		;;
	-651)	VERSION=651;
		shift;
		;;
	-65)	VERSION=65;
		shift;
		;;
	-644)	VERSION=644;
		shift;
		;;
	-643)	VERSION=643;
		shift;
		;;
	-x)     shift;
		XARG="-x $1";
		shift;
		;;
	-y)     shift;
		YARG="-y $1";
		shift;
		;;
	-r)     shift;
		RARG="-r $1";
		shift;
		;;
        -m)     shift
		MEMORY="-Xmx$1";
		shift;
		;;
        -q)     shift
		QUIET=1
		;;
        -X)     shift
		DOCBOOKXSL="$1";
		shift;
		;;
	-*)	DONE=1;
		echo "unexpected argument: $*" 1>&2
		exit 1
		;;
	*)	DONE=1
    esac
done

XMLSRC=$1; shift
XMLSTY=$1; shift
OUTPUT=$1; shift

if [ "$OUTPUT" = "-" ]; then
    OUTPUT="";
fi

if [ "$OUTPUT" != "" ]; then
  OUTPUT="-o $OUTPUT"
fi

if [ ! -d "$DOCBOOKXSL" ]; then
  echo "DocBook XSL dir '$DOCBOOKXSL' doesn't exist" 1>&2
  echo "  Try using the '-X <dir>' argument" 1>&2
  exit 1
fi

case $VERSION in
   652|651|65|644|643)
        :                       # handled normally below
	;;
    *)	echo "unexpected Saxon version $VERSION" 1>&2
	exit 1
	;;
esac


DOTTEDVERSION=`echo $VERSION | sed -e 's/\([0-9]\)\([0-9]\)/\1.\2/g;' | sed -e 's/\([0-9]\)\([0-9]\)/\1.\2/g;'`

##
## locate saxon.jar
##
for jar in "/usr/local/java/saxon-$DOTTEDVERSION/saxon.jar" \
           "/usr/local/share/java/saxon-$DOTTEDVERSION/saxon.jar" \
           "/usr/share/java/saxon-$DOTTEDVERSION.jar" \
           "/usr/local/java/saxon/saxon.jar" \
           "/usr/local/share/java/saxon/saxon.jar" \
           "/usr/share/java/saxon.jar"; do
  if [ -f "$jar" ]; then
    SAXON="$jar"
    break
  fi
done
if [ ! -f "$SAXON" ]; then
  echo "warning: cannot locate Saxon JAR file" 1>&2
fi


##
## DocBook extensions
##
if [ "$JAR" = "1" ]; then
  NDWEXT="$DOCBOOKXSL/extensions/saxon$EXTVERSION.jar"

  if [ ! -f "$NDWEXT" ]; then
    echo "warning: cannot locate DocBook XSL Saxon extensions ($NDWEXT)" 1>&2
  fi
else
  NDWEXT="$DOCBOOKXSL/extensions/saxon$EXTVERSION/.classes";

  if [ ! -d "$NDWEXT" ]; then
    echo "warning: cannot locate DocBook XSL Saxon extensions ($NDWEXT)" 1>&2
  fi
fi

##
## Saxon debugging stuff
##
if [ "$DEBUG" = "1" ]; then
  for try in "/usr/local/java/saxon-$DOTTEDVERSION/.classes" \
             "/usr/local/share/java/saxon-$DOTTEDVERSION/.classes" \
             "/usr/share/java/saxon-$DOTTEDVERSION/.classes"; do
    if [ -d "$try" ]; then
        SAXON="$try:$SAXON"
    fi
  done
fi

##
## locate Xerces classpath
##
if [ ! "$XERCES" ]; then
  for path in "/projects/apache/xml-xerces/java/build/classes" \
              "/usr/local/share/java/xerces.jar" \
              "/usr/local/java/xerces.jar" \
              "/usr/share/java/xerces.jar"; do
    if [ -f "$path" -o -d "$path" ]; then
      XERCES="$path"
    fi
  done
fi
if [ ! "$XERCES" ]; then
  echo "warning: cannot locate Xerces (xerces.jar)" 1>&2
fi

##
## locate JAXP classpath
##
if [ ! "$JAXP" ]; then
  for path in "/usr/local/share/java/jaxp.jar" \
              "/usr/local/java/jaxp.jar" \
              "/usr/local/jaxp-1.1/jaxp.jar" \
              "/usr/local/share/java/jaxp-1.1/jaxp.jar" \
              "/usr/share/java/jaxp.jar"; do
    if [ -f "$path" -o -d "$path" ]; then
      JAXP="$path"
    fi
  done
fi
if [ ! "$JAXP" ]; then
  echo "warning: cannot locate JAXP (jaxp.jar)" 1>&2
fi

##
## optionally replace the URI resolver with the Apache
## resolver classes
##
for path in $RESOLVER \
	    "/projects/apache/xml-commons/java/build/classes" ; do
  if [ -f "$path" -o -d "$path" ]; then
    RESOLVER="$path"
    break
  fi
done
if [ -f "$RESOLVER" -o -d "$RESOLVER" ]; then
  # use the sun resolver
  if [ ! "$XARG" ]; then
    XARG="-x org.apache.xml.resolver.tools.ResolvingXMLReader"
  fi
  if [ ! "$YARG" ]; then
    YARG="-y org.apache.xml.resolver.tools.ResolvingXMLReader"
  fi
  if [ ! "$RARG" ]; then
    RARG="-r org.apache.xml.resolver.tools.CatalogResolver"
  fi
fi

CLASSPATH=$SAXON:$NDWEXT:$JAXP:$RESOLVER:$XERCES:$CLASSPATH

# echo "classpath is $CLASSPATH"

if [ "$QUIET" = "0" ]; then
  echo saxon$VERSION $OUTPUT $XMLSRC $XMLSTY "$@"

  if [ "$MEMORY" != "" ]; then
      echo "java $MEMORY ..."
  fi
fi

TRANSFACTORY=com.icl.saxon.TransformerFactoryImpl

# Force Saxon to use a decent parser (AElfred doesn't do PEs right)
DBFACTORY=org.apache.xerces.jaxp.DocumentBuilderFactoryImpl
SPFACTORY=org.apache.xerces.jaxp.SAXParserFactoryImpl

exec java $MEMORY $FOO \
     -cp $CLASSPATH \
     -Djavax.xml.parsers.DocumentBuilderFactory=$DBFACTORY \
     -Djavax.xml.parsers.SAXParserFactory=$SPFACTORY \
     -Djavax.xml.transform.TransformerFactory=$TRANSFACTORY \
     com.icl.saxon.StyleSheet \
     $XARG $YARG $RARG $OUTPUT $XMLSRC $XMLSTY "$@"

if [ $? != 0 ]; then
  echo ""
  echo FAILED
  echo ""
  exit 1
fi
