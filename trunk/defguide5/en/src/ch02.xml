<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
	 xmlns:xlink="http://www.w3.org/1999/xlink"
	 version="5.0" xml:id="ch-create">
<?dbhtml filename="ch02.html"?>
<title>Creating DocBook Documents</title>
<info>
  <pubdate>$Date$</pubdate>
  <releaseinfo>$Revision$</releaseinfo>
</info>

<para><indexterm xml:id="documentsDocBookch02" class="startofrange">
<primary>documents</primary>
<secondary>creating</secondary>
<tertiary>DocBook</tertiary>
</indexterm>This chapter explains in concrete, practical terms how to
make DocBook documents. It's an overview of all the kinds of markup
that are possible in DocBook documents. It explains how to create
several kinds of DocBook documents: books, sets of books, chapters,
articles, and reference manual entries. The idea is to give you enough
basic information to actually start writing. The information here is
intentionally skeletal; you can find “the details” in the
reference section of this book.
</para>

<section xml:id="ch02-makexml">
<info>
<title>Making an <acronym>XML</acronym> Document</title>
</info>

<para><indexterm>
  <primary>XML</primary>
  <secondary>DocBook documents, creating</secondary>
</indexterm><indexterm>
  <primary>DocBook DTD</primary>
  <secondary>documents</secondary>
  <tertiary>creating in XML</tertiary>
</indexterm><indexterm>
  <primary>documents</primary>
  <secondary>creating</secondary>
  <tertiary>in XML (DocBook)</tertiary>
</indexterm><indexterm>
  <primary>prologue</primary>
  <secondary>XML documents</secondary>
</indexterm>An <acronym>XML</acronym> consists of an optional
XML Declaration, an optional Document Type Declaration, which includes
an optional Internal Subset, and a Document (or Root) Element.
If you're used to using a DTD, many of these will be familiar to you.
If you're using the RELAX NG version of DocBook, many of your documents
will omit the Document Type Declaration.</para>

<section xml:id="s.xmldecl">
<info>
  <title>An <acronym>XML</acronym> Declaration</title>
</info>

<para><indexterm>
  <primary>declarations</primary>
  <secondary>XML</secondary>
</indexterm><indexterm>
  <primary>XML</primary>
  <secondary>declarations</secondary>
</indexterm><indexterm>
  <primary>versions</primary>
  <secondary>XML, identifying</secondary>
</indexterm><acronym>XML</acronym> documents often begin with an
<acronym>XML</acronym> declaration that identifies a few simple aspects of
the document:</para>
<screen>&lt;?xml version="1.0" encoding="utf-8"?&gt;</screen>

<para>Identifying the version of <acronym>XML</acronym> ensures that
future changes to the <acronym>XML</acronym> specification will not
alter the semantics of this document. The encoding declaration
tells the processor what character encoding your document uses.
It must match the actual encoding that you use. The
complete details of the <acronym>XML</acronym> declaration are
described in the <link xlink:href="http://www.w3.org/TR/REC-xml"><acronym>XML</acronym>
specification</link>.
</para>

<para>If your document uses XML 1.0 and an encoding of either <literal role="encoding">utf-8</literal> or <literal role="encoding">utf-16</literal>, the XML Declaration is not required.
But it is never wrong to include it.</para>
</section>

<section xml:id="s.doctypedecl">
<info>
  <title>A Document Type Declaration</title>
</info>

<para><indexterm>
  <primary>declarations</primary>
  <secondary>document type declaration</secondary>
  <tertiary>XML</tertiary>
</indexterm><indexterm>
  <primary>XML</primary>
  <secondary>document type declaration</secondary>
</indexterm><indexterm>
  <primary>document type declaration</primary>
  <secondary>XML documents</secondary>
</indexterm><indexterm>
  <primary>DocBook DTD</primary>
  <secondary>XML</secondary>
  <tertiary>document type declaration</tertiary>
</indexterm><acronym>XML</acronym> documents don't
require a <acronym>DTD</acronym> and if you are using RELAX NG, often
they will not include one. Historically, DocBook
<acronym>XML</acronym> documents have almost always had one.
</para>

<para><indexterm>
  <primary>elements</primary>
  <secondary>root element</secondary>
</indexterm><indexterm>
  <primary>root element</primary>
  <secondary>document type declaration</secondary>
</indexterm>The document type declaration identifies the
<acronym>DTD</acronym> that will be used by the document and what the
root element of the document will be. A typical doctype declaration
for a DocBook V4.4 document looks like this:
</para>

<screen>&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
               "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"&gt;</screen>

<para><indexterm>
  <primary>external declarations (XML)</primary>
</indexterm><indexterm>
  <primary>public identifiers</primary>
  <secondary>XML documents</secondary>
</indexterm><indexterm>
  <primary>system identifiers</primary>
  <secondary>XML</secondary>
</indexterm>This declaration indicates that the root element will be
<tag>book</tag> and that the <acronym>DTD</acronym>
used will be DocBook V4.4. External
declarations in <acronym>XML</acronym> must include a system
identifier (the public identifier is optional). In this example, the
<acronym>DTD</acronym> is stored on a web server.
<indexterm>
  <primary>URI</primary>
  <secondary>XML system identifiers</secondary>
</indexterm>System identifiers in <acronym>XML</acronym> must be
<acronym>URI</acronym>s. Many systems may accept filenames and
interpret them locally as <literal>file:</literal>
<acronym>URL</acronym>s, but it's always correct to fully qualify
them.
</para>

<para>DocBook V5.0 documents can be validated with a DTD:</para>

<screen>&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V5.0//EN"
               "http://www.oasis-open.org/docbook/xml/5.0/docbook.dtd"&gt;</screen>

<para>But the limited constraints that can be expressed in DTDs mean
that the resulting document may or may not <emphasis>really</emphasis>
be valid DocBook V5.0. The normative schema for DocBook V5.0 is
the RELAX NG Grammar with its Schematron annotations.</para>

</section>
<section xml:id="s.internalsubset"><info><title>An Internal Subset</title></info>

<para><indexterm>
  <primary>declarations</primary>
  <secondary>document type declaration</secondary>
  <tertiary>XML</tertiary>
</indexterm><indexterm>
  <primary>document type declaration</primary>
  <secondary>internal subset</secondary>
</indexterm><indexterm>
  <primary>internal subset</primary>
  <secondary>XML document type declarations</secondary>
</indexterm><indexterm>
  <primary>XML</primary>
  <secondary>document type declarations</secondary>
  <tertiary>internal subset</tertiary>
</indexterm>It's also possible to provide additional declarations in a
document by placing them inside the document type declaration:
</para>

<screen>&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V5.0/EN"
               "http://www.oasis-open.org/docbook/xml/5.0/docbook.dtd" [
&lt;!ENTITY nwalsh "Norman Walsh"&gt;
&lt;!ENTITY chap1 SYSTEM "chap1.sgm"&gt;
&lt;!ENTITY chap2 SYSTEM "chap2.sgm"&gt;
]&gt;</screen>

<para>These declarations form what is known as the internal subset.
The declarations stored in the file referenced by the public or system
identifier in the <literal>DOCTYPE</literal> declaration is called the
external subset, which is technically optional. It is legal to put the
<acronym>DTD</acronym> in the internal subset and to have no external
subset, which often makes sense documents that will be validated with
RELAX NG:</para>

<screen>&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE book [
&lt;!ENTITY nwalsh "Norman Walsh"&gt;
&lt;!ENTITY chap1 SYSTEM "chap1.sgm"&gt;
&lt;!ENTITY chap2 SYSTEM "chap2.sgm"&gt;
]&gt;</screen>

<note>
<para><indexterm>
  <primary>parsing</primary>
  <secondary>order</secondary>
  <tertiary>XML document declarations</tertiary>
</indexterm>The internal subset is parsed <emphasis>first</emphasis>
in <acronym>XML</acronym> and, if multiple declarations for an entity
occur, the first declaration is used. Declarations in the internal
subset override declarations in the external subset.</para>
</note>
</section>

<section xml:id="s.rootelem"><info><title>The Document (or Root) Element</title></info>

<para><indexterm>
  <primary>root element</primary>
</indexterm><indexterm>
  <primary>elements</primary>
  <secondary>root element</secondary>
</indexterm>All <acronym>XML</acronym> documents must have exactly one
root element, although it may have sibling comments and processing
instructions. If the document has a document type declaration, the
root element usually immediately follows it:</para>

<screen>&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE book [
&lt;!ENTITY nwalsh "Norman Walsh"&gt;
&lt;!ENTITY chap1 SYSTEM "chap1.sgm"&gt;
&lt;!ENTITY chap2 SYSTEM "chap2.sgm"&gt;
]&gt;
&lt;book&gt;…&lt;/book&gt;</screen>

<para>The important point is that the root element must be physically
present immediately after the document type declaration. You cannot
place the root element of the document in an external entity.</para>
</section>

<section xml:id="typingxml">
<info>
  <title>Typing an <acronym>XML</acronym> Document</title>
</info>

<para><indexterm>
  <primary>text editors</primary>

</indexterm>If you are entering <acronym>XML</acronym> using a text
editor such as <application>Emacs</application> or
<application>vi</application>, there are a few things to keep in mind.
Using a structured text editor designed for <acronym>XML</acronym>
hides most of these issues.</para>

<itemizedlist>
<listitem>
<para><indexterm>
  <primary>case sensitivity</primary>
  <secondary>markup</secondary>
</indexterm><indexterm>
  <primary>markup</primary>
  <secondary>case sensitivity</secondary>
</indexterm><indexterm>
  <primary>compatibility, SGML/XML conversion</primary>
  <secondary>XML markup, case-sensitivity</secondary>
</indexterm>In <acronym>XML</acronym>, all markup is case-sensitive.
In DocBook, you must always type
all element, attribute, and entity names in lowercase.
</para>
</listitem>

<listitem>
<para>You are required to quote all attribute values in <acronym>XML</acronym>.
</para>

<para><indexterm>
  <primary>quotes</primary>
  <secondary>attribute values</secondary>
</indexterm>When quoting attribute values, you can use either a
straight single quote ('), or a straight double quote ("). Don't use
the “curly” quotes (“ and ”) in your editing tool.
</para>
</listitem>

<listitem>
<para><indexterm>
  <primary>empty elements</primary>
  <secondary>markup syntax</secondary>
</indexterm>Empty elements in <acronym>XML</acronym> are marked with a
distinctive syntax: <literal>&lt;xref/&gt;</literal>.
</para>
</listitem>

<listitem>
<para><indexterm>
  <primary>XML</primary>
  <secondary>question marks (?), processing instructions</secondary>
</indexterm>Processing instructions in <acronym>XML</acronym> begin
and end with a question mark: <literal>&lt;?pitarget
data?&gt;</literal>.
</para>
</listitem>
</itemizedlist>
</section>
</section>

<section xml:id="s-pid-sid-catalogs">
<info>
  <title>Public Identifiers, System Identifiers, and Catalog Files</title>
</info>

<para><indexterm>
  <primary>files</primary>
  <secondary>external, referencing</secondary>
</indexterm><indexterm>
  <primary>XML</primary>
  <secondary>external file references, id</secondary>
</indexterm>When a <acronym>DTD</acronym> or other external file is
referenced from a document, the reference can be specified in three
ways: using a <firstterm>public identifier</firstterm>, a
<firstterm>system identifier</firstterm>, or both. In
<acronym>XML</acronym>, the system identifier is required and the
public identifier is optional.
</para>

<para><indexterm>
  <primary>public identifiers</primary>
  <secondary>names, requirements</secondary>
</indexterm>A public identifier is a globally unique, abstract name,
such as the following, which is the official public identifier for
DocBook <acronym>V5.0</acronym>:</para>

<screen>-//OASIS//DTD DocBook V5.0//EN</screen>

<para><indexterm>
  <primary>SGML</primary>
  <secondary>system identifiers</secondary>
</indexterm><indexterm>
  <primary>URI</primary>
  <secondary>XML system identifiers</secondary>
</indexterm><indexterm>
  <primary>URL</primary>
  <secondary>SGML system identifers, similarity to</secondary>
</indexterm><indexterm>
  <primary>Uniform Resource Locator</primary>
  <see>URL</see>
</indexterm><indexterm>
  <primary>Uniform Resource Names</primary>
  <see>URN</see>
</indexterm><indexterm>
  <primary>URN</primary>
  <secondary>XML system identifiers, future</secondary>
</indexterm>In <acronym>XML</acronym> the system identifier
must be a Uniform Resource Indicator (<acronym>URI</acronym>).
The most common <acronym>URI</acronym> today is the Uniform Resource
Locator (<acronym>URL</acronym>), which is familiar to anyone who
browses the Web.
</para>

<para>The advantage of using a public identifier is that it makes
your documents more portable. For any system on which DocBook is
installed, the public identifier will resolve to the appropriate local
version of the <acronym>DTD</acronym> (if public identifiers can be
resolved at all).
</para>

<para>Public identifiers have two disadvantages:</para>

<itemizedlist>
<listitem>
<para>Because <acronym>XML</acronym> does not require them, and because system
identifiers are required, developing <acronym>XML</acronym> tools may not provide
adequate support for public identifiers. To work with these systems
you must use system identifiers.</para>
</listitem>
<listitem>
<para><indexterm>
  <primary>public identifiers</primary>
  <secondary>resolution, mapping to system identifiers</secondary>
</indexterm><indexterm>
  <primary>OASIS</primary>
  <secondary>public identifiers, resolution mechanism</secondary>
</indexterm>Public identifiers aren't magic. They're simply a method
of indirection. For them to work, there must be a resolution mechanism
for public identifiers. Luckily, there are standards that define
mechanisms for mapping public identifiers to
system identifers using catalog files.</para>

<para>See
<link xlink:href="http://www.oasis-open.org/html/a401.htm"><acronym>OASIS</acronym> Technical Resolution 9401:1997 (Amendment 2 to
<acronym>TR</acronym> 9401).</link> or FIXME: link to XML Catalogs.
</para>
</listitem>
</itemizedlist>

<section xml:id="ch.create.pubids">
<info>
  <title>Public Identifiers</title>
</info>

<para><indexterm>
  <primary>uniqueness</primary>
  <secondary>public identifiers</secondary>
</indexterm>An important characteristic of public identifiers is that
they are <emphasis>globally unique</emphasis>. Referring to a document
with a public identifier should mean that the identifier will resolve
to the same actual document on any system even though the location of
that document on each system may vary. As a rule, you should never
reuse public identifiers, and a published revision should have a new
public identifier. Not following these rules defeats one purpose of
the public identifier.
</para>

<para><indexterm>
  <primary>public identifiers</primary>
  <secondary>syntax, examples</secondary>
</indexterm>A public identifier can be any string of upper- and
lowercase letters, digits, any of the following symbols: “'”, “(“,
“)”, “+”, “,”, “-”, “.”, “/”, “:”, “=”, “?”, and white space,
including line breaks.
</para>

<section xml:id="s.fpi">
<info>
  <title>Formal public identifiers</title>
</info>

<para><indexterm>
  <primary>ISO standards</primary>
  <secondary>formal public identifiers</secondary>
</indexterm><indexterm>
  <primary>formal public identifier</primary>
  <see>FPI</see>
</indexterm><indexterm>
  <primary>FPI</primary>
  <secondary>format, standard</secondary>
</indexterm>Most public identifiers conform to the
<acronym>ISO</acronym> 8879 standard that defines <firstterm>formal
public identifiers</firstterm>. Formal public identifiers, frequently
referred to as <acronym>FPI</acronym>, have a prescribed format that
can ensure uniqueness:<footnote>
<para>Essentially, it can ensure that two different owners won't
accidentally tread on each other. Nothing can prevent a given owner
from reusing public identifiers, except maybe common sense.
</para>
</footnote></para>

<screen><replaceable>prefix</replaceable>//<replaceable>owner-identifier</replaceable>//<replaceable>
text-class</replaceable> <replaceable>text-description</replaceable>//<replaceable>
language</replaceable>//<replaceable>display-version</replaceable></screen>

<para>Here are descriptions of the identifiers in this string:</para>

<variablelist>
<varlistentry>
<term><replaceable>prefix</replaceable></term>
<listitem>

<para><indexterm>
  <primary>prefix (registered and unregistered public identifiers)</primary>
</indexterm><indexterm>
  <primary>registered public identifiers</primary>
</indexterm><indexterm>
  <primary>unregistered public identifiers</primary>
</indexterm><indexterm>
  <primary>ISO standards</primary>
  <secondary>formal public identifiers</secondary>
</indexterm>The <replaceable>prefix</replaceable> is either a
“<literal>+</literal>” or a “<literal>-</literal>” Registered public
identifiers begin with “<literal>+</literal>”; unregistered
identifiers begin with “<literal>-</literal>”.</para>

<para>(<acronym>ISO</acronym> standards sometimes use a third form
beginning with <literal>ISO</literal> and the standard number, but
this form is only available to <acronym>ISO</acronym>.)
</para>

<para><indexterm>
  <primary>owner-identifiers</primary>
  <secondary>registered public identifers</secondary>
  <tertiary>uniqueness, guaranteeing</tertiary>
</indexterm>The purpose of registration is to guarantee a unique
owner-identifier. There are few authorities with the power to issue
registered public identifiers, so in practice unregistered identifiers
are more common.
</para>

<para><indexterm>
  <primary>public identifiers</primary>
  <secondary>registered, assigning authority</secondary>
</indexterm><indexterm>
  <primary>Graphics Communication Association (GCA)</primary>
  <secondary>registered public identifiers, assigning</secondary>
</indexterm><indexterm>
  <primary>GCA (Graphics Communication Association)</primary>
</indexterm><indexterm>
  <primary>Graphics Communication Association (GCA)</primary>
</indexterm>The <link xlink:href="http://www.gca.org/">Graphics Communication
Association</link> (<acronym>GCA</acronym>) can assign registered
public identifiers. They do this by issuing the applicant a unique
string and declaring the format of the owner identifier. For example,
the Davenport Group was issued the string “A00002” and could have
published DocBook using an <acronym>FPI</acronym> of the following
form:</para>

<screen>+//ISO/IEC 9070/RA::A00002//<replaceable>...</replaceable></screen>

<para><indexterm>
  <primary>Internet domain names format (registered public identifiers)</primary>
</indexterm>Another way to use a registered public identifier is to
use the format reserved for internet domain names. For example,
O'Reilly can issue documents using an <acronym>FPI</acronym> of the
following form:</para>

<screen>+//IDN oreilly.com//<replaceable>...</replaceable></screen>

<para>As of DocBook V3.1, the <acronym>OASIS</acronym> Technical
Committee responsible for DocBook has elected to use the unregistered
owner identifier, <literal>OASIS</literal>, thus its prefix is
<literal>-</literal>.</para>

<screen>-//OASIS//<replaceable>...</replaceable></screen>
</listitem>
</varlistentry>

<varlistentry>
<term><replaceable>owner-identifier</replaceable></term>
<listitem>
<para><indexterm>
  <primary>names</primary>
  <secondary>individuals as owner-identifiers</secondary>
</indexterm>Identifies the person or organization that owns the
identifier. Registration guarantees a unique owner identifier. Short
of registration, some effort should be made to ensure that the owner
identifier is globally unique. A company name, for example, is a
reasonable choice as are Internet domain names. It's also not uncommon
to see the names of individuals used as the owner-identifier, although
clearly this may introduce collisions over time.
</para>

<para><indexterm>
  <primary>DocBook DTD</primary>
  <secondary>owner-identifier, version 3.1</secondary>
</indexterm>The owner-identifier for DocBook V3.1 is
<literal>OASIS</literal>. Earlier versions used the owner-identifier
<literal>Davenport</literal>.
</para>
</listitem>

</varlistentry>
<varlistentry>
<term><replaceable>text-class</replaceable></term>
<listitem>
<para>
<indexterm>
  <primary>text</primary>
  <secondary>text class</secondary></indexterm><indexterm>
  <primary>DOCUMENT text class</primary>
</indexterm><indexterm>
  <primary>DTDs</primary>
  <secondary>text class</secondary></indexterm><indexterm>
  <primary>ELEMENTS text class</primary>
</indexterm><indexterm>
  <primary>ENTITIES text class</primary>
</indexterm><indexterm>
  <primary>NONSGML text class</primary>
</indexterm>The text class identifies the kind of document that is
associated with this public identifier. Common text classes are
</para>

<variablelist>
<varlistentry>
<term>DOCUMENT</term>
<listitem>
<para>An <acronym>SGML</acronym> or <acronym>XML</acronym> document.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>DTD</term>
<listitem>
<para>A <acronym>DTD</acronym> or part of a <acronym>DTD</acronym>.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>ELEMENTS</term>
<listitem>
<para>A collection of element declarations.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>ENTITIES</term>
<listitem>
<para>A collection of entity declarations.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>NONSGML</term>
<listitem>
<para>Data that is not in <acronym>SGML</acronym> or
<acronym>XML</acronym>.</para>
</listitem>
</varlistentry>
</variablelist>

<para>DocBook is a <acronym>DTD</acronym>, thus its text class is DTD.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><replaceable>text-description</replaceable></term>
<listitem>
<para><indexterm>
  <primary>text</primary>
  <secondary>text description</secondary>
</indexterm><indexterm>
  <primary>DocBook DTD</primary>
  <secondary>text description</secondary>
</indexterm>This field provides a description of the document. The
text description is free-form, but cannot include the string //.
</para>

<para>The text description of DocBook is <literal>DocBook V5.0</literal>.
</para>

<para><indexterm>
  <primary>proprietary DTDs, unavailable public texts</primary>
</indexterm><indexterm>
  <primary>DTDs</primary>
  <secondary>proprietary</secondary>
</indexterm>In the uncommon case of unavailable public texts
(<acronym>FPI</acronym>s for proprietary <acronym>DTD</acronym>s, for
example), there are a few other options available (technically in
front of or in place of the text description), but they're rarely
used.<footnote>
<para>See Appendix A of <xref linkend="maler96"/>, for more details.
</para>
</footnote></para>
</listitem>
</varlistentry>

<varlistentry>
<term><replaceable>language</replaceable></term>
<listitem>
<para><indexterm>
  <primary>languages</primary>
  <secondary>document texts</secondary>
</indexterm><indexterm>
  <primary>ISO standards</primary>
  <secondary>language codes</secondary>
</indexterm>Indicates the language in which the document is written.
It is recommended that the <acronym>ISO</acronym> standard two-letter
language codes be used if possible.
</para>

<para>DocBook is an English-language <acronym>DTD</acronym>, thus its
language is <literal>EN</literal>.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><replaceable>display-version</replaceable></term>
<listitem>
<para><indexterm>
  <primary>display version</primary>
</indexterm>This field, which is not frequently used, distinguishes
between public texts that are the same except for the display device
or system to which they apply.
</para>

<para><indexterm>
  <primary>FPI</primary>
  <secondary>ISO Latin 1 character set, examples</secondary>
</indexterm>For example, the <acronym>FPI</acronym> for the
<acronym>ISO</acronym> Latin 1 character set is: <screen>-//ISO
8879-1986//ENTITIES Added Latin 1//EN</screen>
</para>

<para>A reasonable <acronym>FPI</acronym> for an
<acronym>XML</acronym> version of this character set is:</para>

<screen>-//ISO 8879-1986//ENTITIES Added Latin 1//EN//XML</screen>

</listitem>
</varlistentry>
</variablelist>

</section>
</section>

<section xml:id="s.systemid"><info><title>System Identifiers</title></info>

<para><indexterm>
  <primary>system identifiers</primary>
</indexterm><indexterm>
  <primary>URI</primary>
  <secondary>XML system identifiers</secondary>
</indexterm>System identifiers are usually filenames on the local
system. In <acronym>SGML</acronym>, there's no constraint on what they
can be. Anything that your <acronym>SGML</acronym> processing system
recognizes is allowed. In <acronym>XML</acronym>, system identifiers
must be <acronym>URI</acronym>s (Uniform Resource Identifiers).
</para>

<para>The use of <acronym>URI</acronym>s as system identifiers
introduces the possibility that a system identifier can be a
<acronym>URN</acronym>. This allows the system identifier to benefit
from the same global uniqueness benefit as the public identifier. It
seems likely that <acronym>XML</acronym> system identifiers will
eventually move in this direction.
</para>
</section>

<section xml:id="s-catalog-files">
<info>
  <title>Catalog Files</title>
</info>

<para><indexterm>
  <primary>catalog files</primary>
  <secondary>pubic identifiers, resolving to system</secondary>
</indexterm><firstterm>XML Catalogs</firstterm> are the standard
mechanism for resolving public identifiers into system identifiers.
Some systems also use SGML Open Catalogs.</para>

<para>FIXME: Rewrite this section in terms of XML Catalogs.</para>

</section>
</section>

<section xml:id="ch02-physdiv">
<info>
<title>Physical Divisions: Breaking a Document into Physical Chunks</title>
</info>

<para><indexterm>
  <primary>documents</primary>
  <secondary>dividing</secondary>
</indexterm><indexterm>
  <primary>divisions</primary>
  <secondary>documents (DocBook)</secondary>
</indexterm>The rest of this chapter describes how you can break
documents into logical chunks, such as books, chapters, sections, and
so on. Before we begin, and while the subject of the internal subset
is fresh in your mind, let's take a quick look at how to break
documents into separate physical chunks.
</para>

<para>Actually, we've already told you how to do it. If you recall, in
the preceding sections we had declarations of the form:</para>

<screen>&lt;!ENTITY <replaceable>name</replaceable> SYSTEM "<replaceable>filename</replaceable>"&gt;</screen>

<para><indexterm>
  <primary>entities</primary>
  <secondary>inserting files</secondary>
</indexterm>If you refer to the entity <replaceable>name</replaceable>
in your document after this declaration, the system will insert the
contents of the file <replaceable>filename</replaceable> into your
document at that point. So, if you've got a book that consists of
three chapters and two appendixes, you might create a file called
<filename>book.sgm</filename>, which looks like this:
</para>

<screen>&lt;!DOCTYPE book [
&lt;!ENTITY chap1 SYSTEM "chap1.sgm"&gt;
&lt;!ENTITY chap2 SYSTEM "chap2.sgm"&gt;
&lt;!ENTITY chap3 SYSTEM "chap3.sgm"&gt;
&lt;!ENTITY appa SYSTEM "appa.sgm"&gt;
&lt;!ENTITY appb SYSTEM "appb.sgm"&gt;
]&gt;
&lt;book&gt;&lt;title&gt;My First Book&lt;/title&gt;
&amp;chap1;
&amp;chap2;
&amp;chap3;
&amp;appa;
&amp;appb;
&lt;/book&gt;
</screen>

<para><indexterm>
  <primary>declarations</primary>
  <secondary>document type declaration</secondary>
</indexterm><indexterm>
  <primary>document type declaration</primary>
  <secondary>divisions of documents</secondary>
</indexterm>You can then write the chapters and appendixes
conveniently in separate files. Note that these files do not and must
not have document type declarations.
</para>

<para>For example, Chapter 1 might begin like this:
</para>

<screen>&lt;chapter id="ch1"&gt;&lt;title&gt;My First Chapter&lt;/title&gt;
&lt;para&gt;My first paragraph.&lt;/para&gt;
…</screen>

<para>But it should not begin with its own document type declaration:
</para>

<screen>&lt;!DOCTYPE chapter&gt;
&lt;chapter id="ch1"&gt;&lt;title&gt;My First Chapter&lt;/title&gt;
&lt;para&gt;My first paragraph.&lt;/para&gt;
…</screen>

<para>It is also possible to construct documents from physical chunks
using XInclude. FIXME: say more about xinclude.</para>
</section>

<section xml:id="ch02-logdiv">
<info>
  <title>Logical Divisions: The Categories of Elements in DocBook</title>
</info>

<para><indexterm>
  <primary>divisions</primary>
  <secondary>elements, categories of (DocBook)</secondary>
</indexterm><indexterm>
  <primary>elements</primary>
  <secondary>categories, DocBook divisions</secondary>
</indexterm>DocBook elements can be divided broadly into these
categories:</para>

<simplelist type="vert">
<member>Sets</member>
<member>Books</member>
<member>Divisions, which divide books into parts</member>
<member>Components, which divide books or divisions into chapters</member>
<member>Sections, which subdivide components</member>
<member>Meta-information elements</member>
<member>Block elements</member>
<member>Inline elements</member>
</simplelist>

<para>In the rest of this section, we'll describe briefly the elements
that make up these categories. This section is designed to give you an
overview. It is not an exhaustive list of every element in DocBook.
</para>
<para>
For more information about any specific element and the elements that
it may contain, consult the reference page for the element in
question.
</para>
<section xml:id="s.sets"><info><title>Sets</title></info>

<para>
<indexterm>
  <primary>Sets</primary>
</indexterm>

A <tag>set</tag> contains two or more
<tag>book</tag>s.  It's the hierarchical top of DocBook. You
use the <tag>set</tag> tag, for example, for a series of books
on a single subject that you want to access and maintain as a single
unit, such as the manuals for an airplane engine or the documentation
for a programming language.
</para>
</section>

<section xml:id="s.books"><info><title>Books</title></info>

<para><indexterm>
  <primary>customizing</primary>
  <secondary>DocBook DTD</secondary>
    <tertiary>book organization</tertiary>
</indexterm><indexterm>
  <primary>Book element</primary>
  <secondary>elements, ordering</secondary>
</indexterm>A <tag>book</tag> is probably the most common top-level
element in a document. The DocBook definition of a book is very loose
and general. Given the variety of books authored with DocBook and the
number of different conventions for book organization used in
countries around the world, attempting to impose a strict ordering of
elements can make the content model extremely complex. But DocBook
gives you free reign. It's very reasonable to use a local <xref linkend="app-customizing"/> to impose a more strict ordering for your
applications.
</para>

<para>A <tag>book</tag> consists of a mixture of the following elements:
</para>

<variablelist>
<varlistentry><term>Dedication</term>
<listitem>
<para>The <tag>dedication</tag> pages almost always occur at the front of
a book.<indexterm>
  <primary>Dedication element</primary>
</indexterm></para>
</listitem>
</varlistentry>

<varlistentry><term>Navigational Components</term>
<listitem>
<para><indexterm>
  <primary>navigation, component-level elements</primary>
</indexterm><indexterm>
  <primary>elements</primary>
  <secondary>components, navigation</secondary>
</indexterm><indexterm>
  <primary>ToC</primary>
</indexterm><indexterm>
  <primary>Index element</primary>
</indexterm><indexterm>
  <primary>tables of contents</primary>
  <seealso>ToC</seealso>
</indexterm>There are a couple of component-level elements designed for
navigation: <tag>toc</tag>, for Tables of Contents and Lists of Titles
(for lists of figures, tables, examples, and so
on); and <tag>index</tag>, for indexes.</para>
</listitem>
</varlistentry>

<varlistentry><term>Divisions</term>
<listitem>
<para><indexterm>
  <primary>divisions</primary>
  <secondary>Book</secondary>
</indexterm><indexterm>
  <primary>Part element</primary>
</indexterm><indexterm>
  <primary>Reference element</primary>
</indexterm><indexterm>
  <primary>RefEntry element</primary>
</indexterm><indexterm>
  <primary>components</primary>
</indexterm>Divisions are the first hierarchical level below
<tag>book</tag>. They contain <tag>part</tag>s and
<tag>reference</tag>s. A <tag>part</tag>, in turn, contains components.
A <tag>reference</tag> contains <tag>refentry</tag>s. These are
discussed more thoroughly in <xref linkend="making-refentry"/>”.
</para>

<para>Books can contain components directly and are not required to
contain divisions.
</para>
</listitem>
</varlistentry>

<varlistentry><term>Components</term>
<listitem>
<para><indexterm>
  <primary>Chapter element</primary>
  <secondary>components, similarity to</secondary>

</indexterm>These are the chapter-like elements of a <tag>book</tag>.
</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section xml:id="s.components">
<info>
<title>Components</title>
</info>

<para><indexterm>
  <primary>books</primary>
  <secondary>components</secondary>
</indexterm><indexterm>
  <primary>Part element</primary>
</indexterm><indexterm>
  <primary>Preface element</primary>
</indexterm><indexterm>
  <primary>Chapter element</primary>
</indexterm><indexterm>
  <primary>Appendix element</primary>
</indexterm><indexterm>
  <primary>Glossary element</primary>
</indexterm><indexterm>
  <primary>Bibliography element</primary>
</indexterm><indexterm>
  <primary>Article element</primary>
</indexterm><indexterm>
  <primary>block elements</primary>
</indexterm><indexterm>
  <primary>sections</primary>
  <secondary>elements</secondary>
</indexterm>Components are the chapter-like elements of a
<tag>book</tag> or <tag>part</tag>: <tag>preface</tag>,
<tag>chapter</tag>, <tag>appendix</tag>, <tag>glossary</tag>, and
<tag>bibliography</tag>. An <tag>article</tag> can also occur at the
component level. We describe <tag>article</tag>s in more detail in the
section titled <xref linkend="making-article"/>”. Components generally
contain block elements and/or sections, and some can contain
navigational components and <tag>refentry</tag>s.
</para>
</section>

<section xml:id="s.sections"><info><title>Sections</title></info>

<para><indexterm>
  <primary>nesting</primary>
  <secondary>section elements</secondary>
</indexterm><indexterm>
  <primary>numbered sections, levels</primary>
</indexterm><indexterm>
  <primary>elements</primary>
  <secondary>sections</secondary>
</indexterm>There are several flavors of sectioning elements in
DocBook:</para>

<variablelist>
<varlistentry><term><tag>sect1</tag>…<tag>sect5</tag> elements</term>
<listitem>
<para>The <tag>sect1</tag>…<tag>sect5</tag>
elements are the most common sectioning elements. They can occur in
most component-level elements. These numbered section elements must be
properly nested (<tag>sect2</tag>s can only occur inside
<tag>sect1</tag>s, <tag>sect3</tag>s can only occur inside
<tag>sect2</tag>s, and so on).  There are five levels of numbered
sections.</para>
</listitem>
</varlistentry>

<varlistentry><term><tag>section</tag> element</term>
<listitem>
<para><indexterm>
  <primary>Section element</primary>
</indexterm>The <tag>section</tag> element is an alternative to
numbered sections. The <tag>section</tag> elements are recursive,
meaning that you can nest them to any depth desired.
</para>
</listitem>
</varlistentry>

<varlistentry><term><tag>simplesect</tag> element</term>
<listitem>
<para><indexterm>
  <primary>SimpleSect element</primary>
</indexterm>In addition to numbered sections, there's the
<tag>simplesect</tag> element. It is a terminal section that can occur
at any level, but it cannot have any other sectioning element nested
within it.</para>
<para>The distinguishing feature of <tag>simplesect</tag> is that it
does not occur in the Table of Contents.</para>
</listitem>
</varlistentry>

<varlistentry><term><tag>bridgehead</tag></term>
<listitem>
<para><indexterm>
  <primary>BridgeHead element</primary>
</indexterm>A <tag>bridgehead</tag> provides a section title without
any containing section.</para>
</listitem>
</varlistentry>

<varlistentry><term><tag>refsect1</tag>…<tag>refsect3</tag> elements</term>
<listitem>
<para><indexterm>
  <primary>RefEntry element</primary>

</indexterm>These elements, which occur only in <tag>refentry</tag>s,
are analogous to the numbered section elements in components. There
are only three levels of numbered section elements in a
<tag>refentry</tag>.</para>
</listitem>
</varlistentry>

<varlistentry><term><tag>glossdiv</tag>, <tag>bibliodiv</tag>, and 
<tag>indexdiv</tag></term>
<listitem>
<para><indexterm>
  <primary>glossdiv element</primary>
</indexterm><indexterm>
  <primary>bibliodiv element</primary>
</indexterm><indexterm>
  <primary>glossary element</primary>
</indexterm><indexterm>
  <primary>bibliography element</primary>
</indexterm><indexterm>
  <primary>index element</primary>
</indexterm>The <tag>glossary</tag>, <tag>bibliography</tag>,
and <tag>index</tag> elements can be broken into top-level
divisions, but not sections.  Unlike sections, these elements do not
nest.</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section xml:id="s.meta"><info><title>Meta-Information</title></info>
<para><indexterm>
  <primary>meta-information</primary>
  <secondary>elements</secondary>
</indexterm><indexterm>
  <primary>wrappers</primary>
  <secondary>meta-information</secondary>
</indexterm>All of the elements at the section level and above, and
many block elements further down, include a wrapper
for meta-information about the content.  That element is named
<tag>info</tag>. In earlier versions of DocBook, there were many
similarly named elements for this purpose, <literal>bookinfo</literal>,
<literal>chapterinfo</literal>, etc. In DocBook V5.0, there is only one.
</para>

<para><indexterm>
  <primary>Author element</primary>
</indexterm><indexterm>
  <primary>Title element</primary>
</indexterm><indexterm>
  <primary>Publisher element</primary>
</indexterm><indexterm>
  <primary>revision histories</primary>
</indexterm><indexterm>
  <primary>keywords</primary>
  <secondary>keyword sets (meta-information)</secondary>
</indexterm><indexterm>
  <primary>indexes</primary>
  <secondary>metainformation</secondary>
</indexterm>The meta-information wrapper is designed to contain
bibliographic information about the content (<tag>author</tag>,
<tag>title</tag>, <tag>publisher</tag>, and so on) as well as other
meta-information such as revision histories, keyword sets, and index
terms.
</para>
</section>

<section xml:id="s.block"><info><title>Block Elements</title></info>

<para><indexterm>
  <primary>block elements</primary>
</indexterm><indexterm>
  <primary>paragraphs</primary>
  <secondary>paragraph-level elements</secondary>
</indexterm><indexterm>
  <primary>lists</primary>
</indexterm><indexterm>
  <primary>examples</primary>
</indexterm><indexterm>
  <primary>figures</primary>
</indexterm><indexterm>
  <primary>tables</primary>
</indexterm><indexterm>
  <primary>synopses</primary>
</indexterm><indexterm>
  <primary>admonitions</primary>
</indexterm><indexterm>
  <primary>line-specific environments</primary>
</indexterm>The block elements occur immediately below the component
and sectioning elements. These are the (roughly) paragraph-level
elements in DocBook. They can be divided into a number of categories:
lists, admonitions, line-specific environments, synopses of several
sorts, tables, figures, examples, and a dozen or more miscellaneous
elements.
</para>

<sidebar>
<para><indexterm>
  <primary>block elements</primary>
  <secondary>inline elements vs.</secondary>
</indexterm><indexterm>
  <primary>inline elements</primary>
  <secondary>block elements vs.</secondary>
</indexterm>At the paragraph-level, it's convenient to divide elements
into two classes, <firstterm>block</firstterm> and
<firstterm>inline</firstterm>. From a structural point of view, this
distinction is based loosely on their relative size, but it's easiest
to describe the difference in terms of their presentation.
</para>
<para><indexterm>
  <primary>sidebars</primary>
</indexterm><indexterm>
  <primary>block quotations</primary>
</indexterm><indexterm>
  <primary>quotations (block)</primary>
</indexterm>Block elements are usually presented with a paragraph (or
larger) break before and after them. Most can contain other block
elements, and many can contain character data and inline elements.
Paragraphs, lists, sidebars, tables, and block quotations are all
common examples of block elements.
</para>
<para><indexterm>
  <primary>fonts</primary>
  <secondary>changes (inline elements)</secondary>
</indexterm><indexterm>
  <primary>characters</primary>
  <secondary>inline elements</secondary>
</indexterm><indexterm>
  <primary>cross references</primary>
</indexterm><indexterm>
  <primary>filenames</primary>
</indexterm><indexterm>
  <primary>commands</primary>
</indexterm><indexterm>
  <primary>options</primary>
</indexterm><indexterm>
  <primary>subscripts and superscripts</primary>
</indexterm><indexterm>
  <primary>glossaries</primary>
  <secondary>glossary terms</secondary>
</indexterm>Inline elements are generally represented without any
obvious breaks. The most common distinguishing mark of inline elements
is a font change, but inline elements may present no visual
distinction at all. Inline elements contain character data and
possibly other inline elements, but they never contain block elements.
Inline elements are used to mark up data such as cross references,
filenames, commands, options, subscripts and superscripts, and
glossary terms.
</para>
</sidebar>

<section xml:id="s.lists"><info><title>Lists</title></info>
<para><indexterm>
  <primary>lists</primary>
  <secondary>elements</secondary>
</indexterm><indexterm>
  <primary>elements</primary>
  <secondary>lists</secondary>
</indexterm>There are eight list elements in DocBook:</para>
<variablelist>

<varlistentry>
<term><tag>calloutlist</tag></term>
<listitem>
<para><indexterm>
  <primary>CallOut element</primary>
</indexterm><indexterm>
  <primary>CalloutList element</primary>
</indexterm>A list of <tag>callout</tag>s and their descriptions.
The <tag>callout</tag>s are marks, frequently numbered and typically on a
graphic or verbatim environment, that are described in a
<tag>calloutlist</tag>, outside the element in which they
occur.</para>
</listitem>
</varlistentry>

<varlistentry><term><tag>bibliolist</tag></term>
<listitem>
<para><indexterm>
  <primary>BiblioList element</primary>
</indexterm>A list of bibliography entries.</para>
</listitem>
</varlistentry>

<varlistentry><term><tag>glosslist</tag></term>
<listitem>
<para><indexterm>
  <primary>GlossList element</primary>
</indexterm>A list of glossary terms and their definitions.</para>
</listitem>
</varlistentry>

<varlistentry><term><tag>itemizedlist</tag></term>
<listitem>
<para><indexterm>
  <primary>ItemizedList element</primary>
</indexterm>An unordered (bulleted) list. There are attributes to
control the marks used.</para>
</listitem>
</varlistentry>

<varlistentry><term><tag>orderedlist</tag></term>
<listitem>
<para><indexterm>
  <primary>OrderedList element</primary>
</indexterm>A numbered list. There are attributes to control the type
of enumeration.</para>
</listitem>
</varlistentry>

<varlistentry><term><tag>segmentedlist</tag></term>
<listitem>
<para><indexterm>
  <primary>SegmentedList element</primary>
</indexterm>A repeating set of named items. For example, a list of
states and their capitals might be represented as a
<tag>segmentedlist</tag>.</para>
</listitem>
</varlistentry>

<varlistentry><term><tag>simplelist</tag></term>
<listitem>
<para><indexterm>
  <primary>SimpleList element</primary>
</indexterm>An unadorned list of items. <tag>simplelist</tag>s can be
inline or arranged in columns.</para>
</listitem>
</varlistentry>

<varlistentry><term><tag>variablelist</tag></term>
<listitem>
<para><indexterm>
  <primary>VariableList element</primary>
</indexterm>A list of terms and definitions or descriptions. (This
list of list types is a <tag>variablelist</tag>.)</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section xml:id="s.admonitions"><info><title>Admonitions</title></info>

<para><indexterm>
  <primary>admonitions</primary>
  <secondary>DocBook types</secondary>
</indexterm><indexterm>
  <primary>Caution element</primary>
</indexterm><indexterm>
  <primary>Important element</primary>
</indexterm><indexterm>
  <primary>Note element</primary>
</indexterm><indexterm>
  <primary>Tip element</primary>
</indexterm><indexterm>
  <primary>Warning element</primary>
</indexterm>There are five types of admonitions in DocBook:
<tag>caution</tag>, <tag>important</tag>, <tag>note</tag>,
<tag>tip</tag>, and <tag>warning</tag>.
</para>

<para>All of the admonitions have the same structure: an optional
<tag>title</tag> followed by paragraph-level elements. DocBook does
not impose any specific semantics on the individual admonitions. For
example, DocBook does not mandate that <tag>warning</tag>s be reserved
for cases where bodily harm can result.
</para>
</section>

<section xml:id="s.line-specific">
<info><title>Line-specific environments</title></info>

<para><indexterm>
  <primary>line-specific environments</primary>
</indexterm><indexterm>
  <primary>whitespace</primary>
  <secondary>preserving in source text</secondary>
</indexterm><indexterm>
  <primary>line breaks, preserving</primary>
</indexterm>These environments preserve whitespace and line breaks in
the source text. DocBook does not provide the equivalent of
<acronym>HTML</acronym>'s
<tag namespace="http://www.w3.org/1999/xhtml">br</tag>
tag, so there's no way to interject a line break into normal running
text.
</para>
<variablelist>
<varlistentry>
<term><tag>address</tag></term>
<listitem>
<para>
<indexterm>
  <primary>Address element</primary>
</indexterm>

The <tag>address</tag> element is intended for postal
addresses.  In addition to being line-specific, <tag>address</tag>
contains additional elements suitable for marking up names and
addresses.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>literallayout</tag></term>
<listitem>
<para>
<indexterm>
  <primary>LiteralLayout element</primary>
</indexterm>

A <tag>literallayout</tag> does not have any semantic
association beyond the preservation of whitespace and line breaks.  In
particular, while <tag>programlisting</tag> and
<tag>screen</tag> are frequently presented in a fixed-width
font, a change of fonts is not necessarily implied by
<tag>literallayout</tag>.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>programlisting</tag></term>
<listitem>
<para>
<indexterm>
  <primary>ProgramListing element</primary>
</indexterm><indexterm>
  <primary>fonts</primary>
  <secondary>fixed-width, programs and code</secondary>
</indexterm>

A <tag>programlisting</tag> is a verbatim environment, usually
presented in Courier or some other fixed-width font, for program
sources, code fragments, and similar listings.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>screen</tag></term>
<listitem>
<para>
<indexterm>
  <primary>Screen element</primary>
</indexterm><indexterm>
  <primary>text screen-captures </primary>
</indexterm>

A <tag>screen</tag> is a verbatim or literal environment
for text screen-captures, other fragments of an
<acronym>ASCII</acronym> display, and similar things. <tag>screen</tag> is also a frequent catch-all for any verbatim
text.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>screenshot</tag></term>
<listitem>
<para>
<indexterm>
  <primary>ScreenShot element</primary>
</indexterm>

<tag>screenshot</tag> is actually a wrapper for a
<tag>mediaobject</tag> intended for screen shots of a
<acronym>GUI</acronym> for example.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>synopsis</tag></term>
<listitem>
<para>
<indexterm>
  <primary>Synopsis element</primary>
</indexterm>

A <tag>synopsis</tag> is a verbatim environment for command
and function synopsis.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="s.formal"><info><title>Examples, figures, and tables</title></info>
<para>
<indexterm>
  <primary>block elements</primary>
  <secondary>formal and informal elements</secondary>
</indexterm><indexterm>
  <primary>formal elements</primary>
</indexterm><indexterm>
  <primary>informal elements</primary>
</indexterm><indexterm>
  <primary>Example element</primary>
</indexterm><indexterm>
  <primary>Figure element</primary>
</indexterm><indexterm>
  <primary>Table element</primary>
</indexterm><indexterm>
  <primary>InformalExample element</primary>
</indexterm><indexterm>
  <primary>InformalExample element</primary>
</indexterm><indexterm>
  <primary>InformalTable element</primary>
</indexterm>

Examples, Figures, and Tables are common block-level elements:
<tag>example</tag>, <tag>informalexample</tag>,
<tag>figure</tag>, <tag>informalfigure</tag>,
<tag>table</tag>, and <tag>informaltable</tag>.
</para>
<para>
<indexterm>
  <primary>titles</primary>
  <secondary>formal elements</secondary>
</indexterm>

The distinction between formal and informal elements is that formal
elements have titles while informal ones do not. The
<tag>informalfigure</tag> element was introduced in DocBook
<acronym>V3.1</acronym>. In prior versions of DocBook, you could only
achieve the effect of an informal figure by placing its content,
unwrapped, at the location where the informal figure was desired.
</para>
</section>
<section xml:id="s.paras"><info><title>Paragraphs</title></info>
<para>
<indexterm>
  <primary>Para element</primary>
</indexterm>

There are three paragraph elements: <tag>para</tag>, <tag>simpara</tag> (simple paragraphs may not contain other block-level
elements), and <tag>formalpara</tag> (formal paragraphs have
titles).
</para>
</section>
<section xml:id="s.equations"><info><title>Equations</title></info>
<para>
<indexterm>
  <primary>Equation element</primary>
</indexterm><indexterm>
  <primary>titles</primary>
  <secondary>equation elements</secondary>
</indexterm><indexterm>
  <primary>InlineEquation element</primary>
</indexterm>
There are two block-equation elements, <tag>equation</tag> and
<tag>informalequation</tag> (for inline equations, use
<tag>inlineequation</tag>).
</para>
<para>
Informal equations don't have titles. For reasons of
backward-compatibility, <tag>equation</tag>s are not required
to have titles. However, it may be more difficult for some stylesheet
languages to properly enumerate <tag>equation</tag>s if they
lack titles.
</para>
</section>
<section xml:id="s.graphics"><info><title>Graphics</title></info>
<para>
<indexterm>
  <primary>graphics</primary>
</indexterm><indexterm>
  <primary>Figure element</primary>
</indexterm><indexterm>
  <primary>ScreenShot element</primary>
</indexterm><indexterm>
  <primary>block elements</primary>
  <secondary>Graphic</secondary>
</indexterm><indexterm>
  <primary>InlineGraphic element</primary>
</indexterm>

Graphics occur most frequently in <tag>figure</tag>s and
<tag>screenshot</tag>s, but they can also occur without a
wrapper. DocBook considers a <tag>mediaobject</tag> a block
element, even if it appears to occur inline. For graphics that you
want to be represented inline, use <tag>inlinemediaobject</tag>.
</para>
<para>
<indexterm>
  <primary>MediaObject elements</primary>
</indexterm><indexterm>
  <primary>InlineMediaObject element</primary>
</indexterm>

DocBook <acronym>V3.1</acronym> introduced a new element to contain
graphics and other media types: <tag>mediaobject</tag> and its inline
cousin, <tag>inlinemediaobject</tag>. These elements may contain
video, audio, image, and text data. A single media object can contain
several alternative forms from which the presentation system can
select the most appropriate object.
</para>
</section>
<section xml:id="s.qanda"><info><title>Questions and answers</title></info>
<para>
<indexterm>
  <primary>QandASet element</primary>
</indexterm><indexterm>
  <primary>FAQ element</primary>
</indexterm><indexterm>
  <primary>frequently asked questions (FAQ)</primary>
</indexterm><indexterm>
  <primary>Question element</primary>
</indexterm><indexterm>
  <primary>Answer element</primary>
</indexterm>

DocBook <acronym>V3.1</acronym> introduced the <tag>qandaset</tag>
element, which is suitable for <acronym>FAQ</acronym>s (Frequently
Asked Questions) and other similar collections of
<tag>question</tag>s and <tag>answer</tag>s.
</para>
</section>
<section xml:id="s.misc"><info><title>Miscellaneous block elements</title></info>
<para>
The following block elements are also available:
</para>
<variablelist>
<varlistentry>
<term><tag>blockquote</tag></term>
<listitem><para>
<indexterm>
  <primary>BlockQuote element</primary>
</indexterm><indexterm>
  <primary>Attribution element</primary>
</indexterm>

A block quotation.  Block quotations may have
<tag>attribution</tag>s.</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>cmdsynopsis</tag></term>
<listitem><para>
<indexterm>
  <primary>CmdSynopsis element</primary>
</indexterm><indexterm>
  <primary>parameters (commands), markup</primary>
</indexterm><indexterm>
  <primary>options</primary>
  <secondary>commands, marking up</secondary>
</indexterm><indexterm>
  <primary>commands</primary>
</indexterm>

An environment for marking up all the parameters and options of a command.
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>epigraph</tag></term>
<listitem><para>
<indexterm>
  <primary>Epigraph element</primary>
</indexterm>

A short introduction, typically a quotation, at the beginning of a document.
<tag>epigraph</tag>s may have <tag>attribution</tag>s.
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>funcsynopsis</tag></term>
<listitem><para>
<indexterm>
  <primary>FuncSynopsis element</primary>
</indexterm><indexterm>
  <primary>MsgSet element</primary>
</indexterm>

An environment for marking up the return value and arguments of a function.
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>msgset</tag></term>
<listitem><para>
<indexterm>
  <primary>error messages</primary>
  <secondary>sets of related</secondary>
</indexterm>

A set of related error messages.</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>procedure</tag></term>
<listitem><para>
<indexterm>
  <primary>Procedure element</primary>
</indexterm><indexterm>
  <primary>Step element</primary>
</indexterm><indexterm>
  <primary>SubStep element</primary>
</indexterm>

A procedure.  Procedures contain <tag>step</tag>s, which
may contain <tag>substeps</tag>.</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>sidebar</tag></term>
<listitem><para>A sidebar.</para></listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section xml:id="s.inline"><info><title>Inline Elements</title></info>
<para>
<indexterm>
  <primary>inline elements</primary>
</indexterm><indexterm>
  <primary>text</primary>
  <secondary>inline elements</secondary>
</indexterm>

Users of DocBook are provided with a surfeit of inline elements.
Inline elements are used to mark up running text.  In published
documents, inline elements often cause a font change or other small
change, but they do not cause line or paragraph breaks.
</para>
<para>
In practice, writers generally settle on the tagging of inline elements that
suits their time and subject matter. This may be a large number of
elements or only a handful. What is important is that you choose to mark up
not every possible item, but only those for which distinctive tagging will
be useful in the production of the finished document for the readers who
will search through it.
</para>
<para>
The following comprehensive list may be a useful tool for the process
of narrowing down the elements that you will choose to mark up; it is
not intended to overwhelm you by its sheer length. For convenience,
we've divided the inlines into several subcategories.
</para>
<para>
The classification used here is not meant to be authoritative, only
helpful in providing a feel for the nature of the inlines.  Several
elements appear in more than one category, and arguments could be made
to support the placement of additional elements in other categories or
entirely new categories.
</para>

<section xml:id="s.inline.tradpub">
<title>Traditional publishing inlines</title>

<para>
<indexterm>
  <primary>general writing (traditional publishing inlines)</primary>
</indexterm><indexterm>
  <primary>traditional publishing, inline elements</primary>
</indexterm>

These inlines identify things that commonly occur in general writing:
</para>
<variablelist>
<varlistentry>
<term><tag>abbrev</tag></term>
<listitem><para><?tdg-purp abbrev?>.
<indexterm>
  <primary>Abbrev element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>acronym</tag></term>
<listitem><para><?tdg-purp acronym?>.
<indexterm>
  <primary>Acronym element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>emphasis</tag></term>
<listitem><para><?tdg-purp emphasis?>.<indexterm>
  <primary>Emphasis element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>footnote</tag></term>
<listitem>
<para><?tdg-purp footnote?>.  The location of the <tag>footnote</tag>
element identifies the location of the first reference to the
footnote. Additional references to the same footnote can be inserted with
<tag>footnoteref</tag>.
<indexterm>
  <primary>FootnoteRef element</primary>
</indexterm><indexterm>
  <primary>Footnote element</primary>
</indexterm>
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>phrase</tag></term>
<listitem><para><?tdg-purp phrase?>.<indexterm>
  <primary>Phrase element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>quote</tag></term>
<listitem><para><?tdg-purp quote?>.<indexterm>
  <primary>Quote element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>trademark</tag></term>
<listitem><para><?tdg-purp trademark?>.<indexterm>
  <primary>Trademark element</primary>
</indexterm>
</para></listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="s.inline.xref"><info><title>Cross references</title></info>
<para>
<indexterm>
  <primary>cross references</primary>
</indexterm><indexterm>
  <primary>Link element</primary>
</indexterm><indexterm>
  <primary>GlossTerm element</primary>
</indexterm><indexterm>
  <primary>LinkEnd attribute</primary>
</indexterm>

The cross reference inlines identify both explicit cross references,
such as <tag>link</tag>, and implicit cross references like
<tag>glossterm</tag>. You can make the most of the implicit
references explicit with a <tag class="attribute">linkend</tag>
attribute.
</para>
<variablelist>
<varlistentry>
<term><tag>anchor</tag></term>
<listitem><para><?tdg-purp anchor?>.<indexterm>
  <primary>Anchor element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>citation</tag></term>
<listitem><para><?tdg-purp citation?>.<indexterm>
  <primary>Citation element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>citerefentry</tag></term>
<listitem><para><?tdg-purp citerefentry?>.<indexterm>
  <primary>CiteRefEntry element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>citetitle</tag></term>
<listitem><para><?tdg-purp citetitle?>.<indexterm>
  <primary>CiteTitle element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>firstterm</tag></term>
<listitem><para><?tdg-purp firstterm?>.<indexterm>
  <primary>FirstTerm element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>glossterm</tag></term>
<listitem><para><?tdg-purp glossterm?>.<indexterm>
  <primary>GlossTerm element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>link</tag></term>
<listitem><para><?tdg-purp link?>.<indexterm>
  <primary>Link element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>olink</tag></term>
<listitem><para><?tdg-purp olink?>.<indexterm>
  <primary>OLink element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>xref</tag></term>
<listitem><para><?tdg-purp xref?>.<indexterm>
  <primary>XRef element</primary>
</indexterm>
</para></listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="s.inline.markup"><info><title>Markup</title></info>
<para>
<indexterm>
  <primary>markup</primary>
  <secondary>elements</secondary>
</indexterm>

These inlines are used to mark up text for special presentation:
</para>
<variablelist>
<varlistentry>
<term><tag>foreignphrase</tag></term>
<listitem><para><?tdg-purp foreignphrase?>.<indexterm>
  <primary>ForeignPhrase element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>wordasword</tag></term>
<listitem><para><?tdg-purp wordasword?>.<indexterm>
  <primary>WordAsWord element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>computeroutput</tag></term>
<listitem><para><?tdg-purp computeroutput?>.<indexterm>
  <primary>ComputerOutput element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>literal</tag></term>
<listitem><para><?tdg-purp literal?>.<indexterm>
  <primary>Literal element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>markup</tag></term>
<listitem><para><?tdg-purp markup?>.<indexterm>
  <primary>Markup element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>prompt</tag></term>
<listitem><para><?tdg-purp prompt?>.<indexterm>
  <primary>Prompt element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>replaceable</tag></term>
<listitem><para><?tdg-purp replaceable?>.<indexterm>
  <primary>Replaceable element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>tag</tag></term>
<listitem><para><?tdg-purp tag?>.<indexterm>
  <primary>tag element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>userinput</tag></term>
<listitem><para><?tdg-purp userinput?>.<indexterm>
  <primary>UserInput element</primary>
</indexterm>
</para></listitem>
</varlistentry>
</variablelist>
</section>

<section xml:id="s.inline.math">
<info><title>Mathematics</title></info>
<para><indexterm><primary>elements</primary>
<secondary>mathematics</secondary>
</indexterm><indexterm><primary>mathematics (DocBook)</primary>
</indexterm><indexterm><primary>equations (elements)</primary>
</indexterm><indexterm><primary>MathML, incorporating</primary>
</indexterm><indexterm><primary>namespaces</primary>
</indexterm>DocBook does not define a complete set of elements for
representing equations. No one has ever pressed the DocBook
maintainers to add this functionality, and the prevailing opinion is
that incorporating
<link xlink:href="http://www.w3.org/TR/REC-MathML/">MathML</link> is
probably the best long-term solution.
For simple mathematics that doesn't require extensive markup, the
<tag>mathphrase</tag> element may be sufficient.</para>
<variablelist>
<varlistentry>
<term><tag>inlineequation</tag></term>
<listitem><para><?tdg-purp inlineequation?>.<indexterm>
  <primary>InlineEquation element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>mathphrase</tag></term>
<listitem><para><?tdg-purp mathphrase?>.<indexterm>
  <primary>mathphrase element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>subscript</tag></term>
<listitem><para><?tdg-purp subscript?>.<indexterm>
  <primary>Subscript element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>superscript</tag></term>
<listitem><para><?tdg-purp superscript?>.<indexterm>
  <primary>Superscript element</primary>
</indexterm>
</para></listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="s.inline.ui"><info><title>User interfaces</title></info>
<para>
These elements describe aspects of a user interface:
<indexterm>
  <primary>user interfaces, describing (elements)</primary>
</indexterm><indexterm>
  <primary>elements</primary>
  <secondary>user interfaces, describing</secondary>
</indexterm>

</para>
<variablelist>
<varlistentry>
<term><tag>accel</tag></term>
     <listitem><para><?tdg-purp accel?>.<indexterm>
  <primary>Accel element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>guibutton</tag></term>
     <listitem><para><?tdg-purp guibutton?>.<indexterm>
  <primary>GuIButton element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>guiicon</tag></term>
     <listitem><para><?tdg-purp guiicon?>.<indexterm>
  <primary>GUIIcon element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>guilabel</tag></term>
     <listitem><para><?tdg-purp guilabel?>.</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>guimenu</tag></term>
     <listitem><para><?tdg-purp guimenu?>.<indexterm>
  <primary>GUIMenu element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>guimenuitem</tag></term>
     <listitem><para><?tdg-purp guimenuitem?>.<indexterm>
  <primary>GUIMenuItem element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>guisubmenu</tag></term>
     <listitem><para><?tdg-purp guisubmenu?>.<indexterm>
  <primary>GUISubmenu element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>keycap</tag></term>
     <listitem><para><?tdg-purp keycap?>.<indexterm>
  <primary>KeyCap element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>keycode</tag></term>
     <listitem><para><?tdg-purp keycode?>.<indexterm>
  <primary>KeyCode class</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>keycombo</tag></term>
     <listitem><para><?tdg-purp keycombo?>.<indexterm>
  <primary>KeyCombo element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>keysym</tag></term>
     <listitem><para><?tdg-purp keysym?>.<indexterm>
  <primary>KeySym element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>menuchoice</tag></term>
     <listitem><para><?tdg-purp menuchoice?>.<indexterm>
  <primary>MenuChoice element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>mousebutton</tag></term>
     <listitem><para><?tdg-purp mousebutton?>.<indexterm>
  <primary>MouseButton element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>shortcut</tag></term>
     <listitem><para><?tdg-purp shortcut?>.<indexterm>
  <primary>Shortcut element</primary>
</indexterm>
</para></listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="s.inline.prog"><info><title>Programming languages and constructs</title></info>
<para>
<indexterm>
  <primary>programming languages (elements)</primary>
</indexterm><indexterm>
  <primary>constructs (programming), elements</primary>
</indexterm><indexterm>
  <primary>inline elements</primary>
  <secondary>programming languages and constructs</secondary>
</indexterm><indexterm>
  <primary>elements</primary>
  <secondary>programming languages and constructs</secondary>
</indexterm><indexterm>
  <primary>inline elements</primary>
  <secondary>technical</secondary>
</indexterm>

Many of the technical inlines in DocBook are related to programming.
</para>
<variablelist>
<varlistentry>
<term><tag>classname</tag></term>
     <listitem><para><?tdg-purp classname?>.<indexterm>
  <primary>ClassName element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>constant</tag></term>
     <listitem><para><?tdg-purp constant?>.<indexterm>
  <primary>Constant element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>errorcode</tag></term>
     <listitem><para><?tdg-purp errorcode?>.<indexterm>
  <primary>ErrorCode element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>errorname</tag></term>
     <listitem><para><?tdg-purp errorname?>.<indexterm>
  <primary>ErrorName element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>errortype</tag></term>
     <listitem><para><?tdg-purp errortype?>.<indexterm>
  <primary>ErrorType element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>function</tag></term>
     <listitem><para><?tdg-purp function?>.<indexterm>
  <primary>Function element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>literal</tag></term>
     <listitem><para><?tdg-purp literal?>.<indexterm>
  <primary>Literal element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>msgtext</tag></term>
     <listitem><para><?tdg-purp msgtext?>.<indexterm>
  <primary>MsgText element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>parameter</tag></term>
     <listitem><para><?tdg-purp parameter?>.<indexterm>
  <primary>Parameter element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>property</tag></term>
     <listitem><para><?tdg-purp property?>.<indexterm>
  <primary>Property element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>replaceable</tag></term>
     <listitem><para><?tdg-purp replaceable?>.<indexterm>
  <primary>Replaceable element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>returnvalue</tag></term>
     <listitem><para><?tdg-purp returnvalue?>.<indexterm>
  <primary>ReturnValue element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>symbol</tag></term>
     <listitem><para><?tdg-purp symbol?>.<indexterm>
  <primary>Symbol element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>token</tag></term>
     <listitem><para><?tdg-purp token?>.<indexterm>
  <primary>Token element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>type</tag></term>
     <listitem><para><?tdg-purp type?>.<indexterm>
  <primary>Type element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>varname</tag></term>
     <listitem><para><?tdg-purp varname?>.<indexterm>
  <primary>VarName element</primary>
</indexterm>
</para></listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="s.inline.os"><info><title>Operating systems</title></info>
<para>
<indexterm>
  <primary>operating systems</primary>
  <secondary>inline elements</secondary>
</indexterm>

These inlines identify parts of an operating system, or an
operating environment:
</para>
<variablelist>
<varlistentry>
<term><tag>application</tag></term>
     <listitem><para><?tdg-purp application?>.<indexterm>
  <primary>Application element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>command</tag></term>
     <listitem><para><?tdg-purp command?>.<indexterm>
  <primary>Command element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>envar</tag></term>
     <listitem><para><?tdg-purp envar?>.<indexterm>
  <primary>EnVar element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>filename</tag></term>
     <listitem><para><?tdg-purp filename?>.<indexterm>
  <primary>Filename element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>msgtext</tag></term>
     <listitem><para><?tdg-purp msgtext?>.<indexterm>
  <primary>MsgText element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>option</tag></term>
     <listitem><para><?tdg-purp option?>.<indexterm>
  <primary>Option element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>parameter</tag></term>
     <listitem><para><?tdg-purp parameter?>.<indexterm>
  <primary>Parameter element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>prompt</tag></term>
     <listitem><para><?tdg-purp prompt?>.<indexterm>
  <primary>Prompt element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>systemitem</tag></term>
     <listitem><para><?tdg-purp systemitem?>.<indexterm>
  <primary>SystemItem element</primary>
</indexterm>
</para></listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="s.inline.general"><info><title>General purpose</title></info>
<para>
<indexterm>
  <primary>general-purpose technical inline elements</primary>
</indexterm><indexterm>
  <primary>inline elements</primary>
  <secondary>technical (general-purpose)</secondary>
</indexterm>

There are also a number of general-purpose technical inlines.
</para>
<variablelist>
<varlistentry>
<term><tag>application</tag></term>
     <listitem><para><?tdg-purp application?>.<indexterm>
  <primary>Application element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>database</tag></term>
     <listitem><para><?tdg-purp database?>.<indexterm>
  <primary>Database element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>email</tag></term>
     <listitem><para><?tdg-purp email?>.<indexterm>
  <primary>Email element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>filename</tag></term>
     <listitem><para><?tdg-purp filename?>.<indexterm>
  <primary>Filename element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>hardware</tag></term>
     <listitem><para><?tdg-purp hardware?>.<indexterm>
  <primary>Hardware element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>literal</tag></term>
     <listitem><para><?tdg-purp literal?>.<indexterm>
  <primary>Literal element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>option</tag></term>
     <listitem><para><?tdg-purp option?>.<indexterm>
  <primary>Option element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>optional</tag></term>
     <listitem><para><?tdg-purp optional?>.<indexterm>
  <primary>Optional element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>replaceable</tag></term>
     <listitem><para><?tdg-purp replaceable?>.<indexterm>
  <primary>Replaceable element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>symbol</tag></term>
     <listitem><para><?tdg-purp symbol?>.<indexterm>
  <primary>Symbol element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>token</tag></term>
     <listitem><para><?tdg-purp token?>.<indexterm>
  <primary>Token element</primary>
</indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>type</tag></term>
     <listitem><para><?tdg-purp type?>.<indexterm>
  <primary>Type element</primary>
</indexterm>
</para></listitem>
</varlistentry>
</variablelist>
</section>
</section>
</section>
<section xml:id="ch02-makebook"><info><title>Making a DocBook Book</title></info>
<para>
<indexterm>
  <primary>DocBook DTD</primary>
  <secondary>Book, making</secondary>
</indexterm><indexterm>
  <primary>books</primary>
  <secondary>DocBook, making</secondary>
</indexterm><indexterm>
  <primary>meta-information</primary>
  <secondary>DocBook Book</secondary>
</indexterm>

A typical <tag>book</tag>, in English at least, consists of 
some meta-information in an <tag>info</tag>
(<tag>title</tag>, <tag>author</tag>,
<tag>copyright</tag>, and so on), one or more <tag>preface</tag>s, several <tag>chapter</tag>s, and perhaps a
few <tag>appendix</tag>es. A <tag>book</tag> may also
contain <tag>bibliography</tag>s,
<tag>glossary</tag>s, <tag>index</tag>es and a
<tag>colophon</tag>.
</para>
<para>
<xref linkend="ex-typicalbook"/> shows the structure of a typical book.
Additional content is required where the ellipses occur.
<indexterm>
  <primary>books</primary>
  <secondary>typical structure</secondary>
</indexterm>

</para>
<example xml:id="ex-typicalbook"><info><title>A Typical Book</title></info>

<programlisting>&lt;book&gt;
&lt;bookinfo&gt;
  &lt;title&gt;My First Book&lt;/title&gt;
  &lt;author&gt;&lt;firstname&gt;Jane&lt;/firstname&gt;&lt;surname&gt;Doe&lt;/surname&gt;&lt;/author&gt;
  &lt;copyright&gt;&lt;year&gt;1998&lt;/year&gt;&lt;holder&gt;Jane Doe&lt;/holder&gt;&lt;/copyright&gt;
&lt;/bookinfo&gt;
&lt;preface&gt;&lt;title&gt;Foreword&lt;/title&gt; ... &lt;/preface&gt;
&lt;chapter&gt; ... &lt;/chapter&gt;
&lt;chapter&gt; ... &lt;/chapter&gt;
&lt;chapter&gt; ... &lt;/chapter&gt;
&lt;appendix&gt; ... &lt;/appendix&gt;
&lt;appendix&gt; ... &lt;/appendix&gt;
&lt;index&gt; ... &lt;/index&gt;
&lt;/book&gt;</programlisting>
</example>
</section>
<section xml:id="ch02-makechap"><info><title>Making a Chapter</title></info>
<para>
<indexterm>
  <primary>Chapter element</primary>
  <secondary>typical chapter, structure</secondary>
</indexterm><indexterm>
  <primary>Preface element</primary>
  <secondary>typical structure</secondary>
</indexterm><indexterm>
  <primary>Appendix element</primary>
  <secondary>typical structure</secondary>
</indexterm>

<tag>chapter</tag>s, <tag>preface</tag>s, and
<tag>appendix</tag>es all have a similar structure. They
consist of a <tag>title</tag>, possibly some additional
meta-information, and any number of block-level elements followed by
any number of top-level sections. Each section may in turn contain any
number of block-level elements followed by any number from the next
section level, as shown in <xref linkend="ex-typicalchap"/>.
</para>
<example xml:id="ex-typicalchap"><info><title>A Typical Chapter</title></info>

<programlisting>&lt;chapter&gt;&lt;title&gt;My Chapter&lt;/title&gt;
&lt;para&gt; ... &lt;/para&gt;
&lt;sect1&gt;&lt;title&gt;First Section&lt;/title&gt;
&lt;para&gt; ... &lt;/para&gt;
&lt;example&gt; ... &lt;/example&gt;
&lt;/sect1&gt;
&lt;/chapter&gt;
</programlisting>
</example>
</section>
<section xml:id="making-article"><info><title>Making an Article</title></info>

<para>
<indexterm>
  <primary>articles</primary>
  <secondary>creating</secondary>
</indexterm><indexterm>
  <primary>elements</primary>
  <secondary>component-level</secondary>
</indexterm><indexterm>
  <primary>components</primary>
  <secondary>elements</secondary>
</indexterm><indexterm>
  <primary>journal articles</primary>
</indexterm><indexterm>
  <primary>white papers, creating</primary>
</indexterm>

For documents smaller than a book, such as: journal articles, white
papers, or technical notes, <tag>article</tag> is frequently
the most logical starting point. The body of an
<tag>article</tag> is essentially the same as the body of a
<tag>chapter</tag> or any other component-level element, as
shown in <xref linkend="ex-typicalart"/>
</para>
<para>
<tag>article</tag>s may include
<tag>appendix</tag>es, <tag>bibliography</tag>s,
<tag>index</tag>es and <tag>glossary</tag>s.
</para>
<example xml:id="ex-typicalart"><info><title>A Typical Article</title></info>

<programlisting>&lt;article&gt;
&lt;artheader&gt;
  &lt;title&gt;My Article&lt;/title&gt;
  &lt;author&gt;&lt;honorific&gt;Dr&lt;/honorific&gt;&lt;firstname&gt;Emilio&lt;/firstname&gt;
          &lt;surname&gt;Lizardo&lt;/surname&gt;&lt;/author&gt;
&lt;/artheader&gt;
&lt;para&gt; ... &lt;/para&gt;
&lt;sect1&gt;&lt;title&gt;On the Possibility of Going Home&lt;/title&gt;
&lt;para&gt; ... &lt;/para&gt;
&lt;/sect1&gt;
&lt;bibliography&gt; ... &lt;/bibliography&gt;
&lt;/article&gt;
</programlisting>
</example>
</section>
<section xml:id="making-refentry"><info><title>Making a Reference Page</title></info>
<para>
<indexterm>
  <primary>reference pages</primary>
  <secondary>creating</secondary>
</indexterm><indexterm>
  <primary>manual page, creating</primary>
</indexterm><indexterm>
  <primary>UNIX</primary>
  <secondary>manpage</secondary>
</indexterm><indexterm>
  <primary>manpage (UNIX)</primary>
</indexterm>

The reference page or manual page in DocBook was inspired by, and in
fact designed to reproduce, the common <acronym>UNIX</acronym> “manpage”
concept. (We use the word "page" loosely here to mean a document of
variable length containing reference material on a specific topic.)
DocBook is rich in markup tailored for such documents, which often
vary greatly in content, however well-structured they may be. To
reflect both the structure and the variability of such texts, DocBook
specifies that reference pages have a strict sequence of parts, even
though several of them are actually optional.
</para>

<para><indexterm>
  <primary>RefEntry element</primary>
  <secondary>elements, obligatory</secondary>
</indexterm><indexterm>
  <primary>RefNameDiv element</primary>
</indexterm><indexterm>
  <primary>RefSect1 element</primary>
</indexterm>Of the following sequence of elements that may appear in a
<tag class="element">refentry</tag>, only two are obligatory:
<tag class="element">refnamediv</tag> and
<tag class="element">refsect1</tag>.</para>

<variablelist>
<varlistentry>
<term><tag class="element">info</tag></term>
<listitem>
<para>
<indexterm>
  <primary>info element</primary>
  <secondary>reference page, meta-information</secondary>
</indexterm><indexterm>
  <primary>meta-information</primary>
  <secondary>reference page</secondary>
</indexterm>

The <tag class="element">info</tag> element contains
meta-information about the reference page (which should not be
confused with <tag class="element">refmeta</tag>, which it
precedes). It marks up information about the author of the document,
or the product to which it pertains, or the document's revision
history, or other such information.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag class="element">refmeta</tag></term>
<listitem>
<para>
<indexterm>
  <primary>RefMeta element</primary>
</indexterm><indexterm>
  <primary>titles</primary>
  <secondary>reference pages</secondary>
</indexterm><indexterm>
  <primary>volume number (reference page)</primary>
</indexterm><indexterm>
  <primary>ManVolNum</primary>
</indexterm><indexterm>
  <primary>UNIX</primary>
  <secondary>ManVolNum</secondary>
</indexterm><indexterm>
  <primary>uname command and uname function, distinguishing</primary>
</indexterm>

<tag class="element">refmeta</tag> contains a title for
the reference page (which may be inferred if the
<tag>refmeta</tag> element is not present) and an indication
of the volume number in which this reference page occurs. The
<tag>manvolnum</tag> is a very <acronym>UNIX</acronym>-centric concept.  In
traditional <acronym>UNIX</acronym> documentation, the subject of a reference page is
typically identified by name and volume number; this allows you to
distinguish between the <command>uname</command> command,
<quote>uname(1)</quote> in volume 1 of the documentation and the
<function>uname</function> function, <quote>uname(3)</quote> in
volume 3.
</para>
<para>
<indexterm>
  <primary>RefMiscInfo element</primary>
</indexterm><indexterm>
  <primary>miscellaneous information, reference pages</primary>
</indexterm>

Additional information of this sort such as conformance or
vendor information specific to the particular environment you are
working in, may be stored in <tag>refmiscinfo</tag>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag class="element">refnamediv</tag></term>
<listitem>
<para>
<indexterm>
  <primary>RefNameDiv element</primary>
</indexterm><indexterm>
  <primary>RefDescriptor element</primary>
</indexterm><indexterm>
  <primary>RefName element</primary>
</indexterm><indexterm>
  <primary>RefPurpose element</primary>
</indexterm><indexterm>
  <primary>purpose (reference pages)</primary>
</indexterm><indexterm>
  <primary>RefClass element</primary>
</indexterm><indexterm>
  <primary>operating systems</primary>
  <secondary>configurations, software support</secondary>
</indexterm>

The first obligatory element is <tag class="element">refnamediv</tag>, which is a wrapper for
information about whatever you're documenting, rather than the
document itself. It can begin with a <tag class="element">refdescriptor</tag> if several items are being
documented as a group and the group has a name. The <tag class="element">refnamediv</tag> must contain at least one
<tag class="element">refname</tag>, that is, the name of
whatever you're documenting, and a single short statement that sums up
the use or function of the item(s) at a glance: their <tag class="element">refpurpose</tag>. Also available is the <tag class="element">refclass</tag>, intended to detail the
operating system configurations that the software element in question
supports.
</para>
<para>
<indexterm>
  <primary>titles</primary>
  <secondary>reference pages</secondary>
</indexterm><indexterm>
  <primary>RefEntryTitle element</primary>
</indexterm>

If no <tag>refentrytitle</tag> is given in the
<tag>refmeta</tag>, the title of the reference page is the
<tag>refdescriptor</tag>, if present, or the first
<tag>refname</tag>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag class="element">refsynopsisdiv</tag></term>
<listitem>
<para>
<indexterm>
  <primary>RefSynopsisDiv element</primary>
</indexterm><indexterm>
  <primary>synopses</primary>
  <secondary>reference topics</secondary>
</indexterm><indexterm>
  <primary>commands</primary>
  <secondary>syntax summary</secondary>
</indexterm><indexterm>
  <primary>functions</primary>
  <secondary>function prototype</secondary>
</indexterm><indexterm>
  <primary>Title element</primary>
</indexterm>

A <tag class="element">refsynopsisdiv</tag> is intended
to provide a quick synopsis of the topic covered by the reference
page. For commands, this is generally a syntax summary of the command,
and for functions, the function prototype, but other options are
possible. A <tag class="element">title</tag> is allowed, but
not required, presumably because the application that processes
reference pages will generate the appropriate title if it is not
given. In traditional <acronym>UNIX</acronym> documentation, its title is always
“Synopsis”.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>refsect1</tag>…<tag>refsect3</tag></term>
<listitem>
<para>
<indexterm>
  <primary>sections</primary>
  <secondary>RefEntry, levels</secondary>
</indexterm><indexterm>
  <primary>RefSect1…RefSect3</primary>
</indexterm>

Within <tag>refentry</tag>s, there are only three levels
of sectioning elements: <tag>refsect1</tag>,
<tag>refsect2</tag>, and <tag>refsect3</tag>.</para>
</listitem>
</varlistentry>
</variablelist>

<para>
<xref linkend="ex-samprefpage"/> shows the beginning of a <tag class="element">refentry</tag> that illustrates one possible
reference page:
<indexterm>
  <primary>reference pages</primary>
  <secondary>sample page</secondary>
</indexterm>
</para>
<example xml:id="ex-samprefpage"><info><title>A Sample Reference Page</title></info>

<programlisting>

&lt;refentry id="printf"&gt;

&lt;refmeta&gt;
&lt;refentrytitle&gt;printf&lt;/refentrytitle&gt;
&lt;manvolnum&gt;3S&lt;/manvolnum&gt;
&lt;/refmeta&gt;

&lt;refnamediv&gt;
&lt;refname&gt;printf&lt;/refname&gt;
&lt;refname&gt;fprintf&lt;/refname&gt;
&lt;refname&gt;sprintf&lt;/refname&gt;
&lt;refpurpose&gt;print formatted output&lt;/refpurpose&gt;
&lt;/refnamediv&gt;

&lt;refsynopsisdiv&gt;

&lt;funcsynopsis&gt;
&lt;funcsynopsisinfo&gt;
#include &amp;lt;stdio.h&amp;gt;
&lt;/funcsynopsisinfo&gt;
&lt;funcprototype&gt;
  &lt;funcdef&gt;int &lt;function&gt;printf&lt;/function&gt;&lt;/funcdef&gt;
  &lt;paramdef&gt;const char *&lt;parameter&gt;format&lt;/parameter&gt;&lt;/paramdef&gt;
  &lt;paramdef&gt;...&lt;/paramdef&gt;
&lt;/funcprototype&gt;

&lt;funcprototype&gt;
  &lt;funcdef&gt;int &lt;function&gt;fprintf&lt;/function&gt;&lt;/funcdef&gt;
  &lt;paramdef&gt;FILE *&lt;parameter&gt;strm&lt;/parameter&gt;&lt;/paramdef&gt;
  &lt;paramdef&gt;const char *&lt;parameter&gt;format&lt;/parameter&gt;&lt;/paramdef&gt;
  &lt;paramdef&gt;...&lt;/paramdef&gt;
&lt;/funcprototype&gt;

&lt;funcprototype&gt;
  &lt;funcdef&gt;int &lt;function&gt;sprintf&lt;/function&gt;&lt;/funcdef&gt;
  &lt;paramdef&gt;char *&lt;parameter&gt;s&lt;/parameter&gt;&lt;/paramdef&gt;
  &lt;paramdef&gt;const char *&lt;parameter&gt;format&lt;/parameter&gt;&lt;/paramdef&gt;
  &lt;paramdef&gt;...&lt;/paramdef&gt;
&lt;/funcprototype&gt;
&lt;/funcsynopsis&gt;

&lt;/refsynopsisdiv&gt;

&lt;refsect1&gt;&lt;title&gt;Description&lt;/title&gt;
&lt;para&gt;
&lt;indexterm&gt;&lt;primary&gt;functions&lt;/primary&gt;
  &lt;secondary&gt;printf&lt;/secondary&gt;&lt;/indexterm&gt;
&lt;indexterm&gt;&lt;primary&gt;printing function&lt;/primary&gt;&lt;/indexterm&gt;

&lt;function&gt;printf&lt;/function&gt; places output on the standard
output stream stdout.
&amp;hellip;
&lt;/para&gt;
&lt;/refsect1&gt;
&lt;/refentry&gt;</programlisting>
</example>
</section>
<section xml:id="ch02-makefrontback"><info><title>Making Front- and Backmatter</title></info>
<para>
<indexterm>
  <primary>frontmatter, books and articles</primary>
</indexterm><indexterm>
  <primary>backmatter, books and articles</primary>
</indexterm><indexterm>
  <primary>indexes</primary>
  <secondary>creating, books and articles</secondary>
</indexterm><indexterm>
  <primary>glossaries</primary>
  <secondary>creating</secondary>
</indexterm><indexterm>
  <primary>tables of contents</primary>
  <secondary>creating, books and articles</secondary>
</indexterm>

DocBook contains markup for the usual variety of front- and backmatter
necessary for books and articles: indexes, glossaries, bibliographies,
and tables of contents. In many cases, these components are generated
automatically, at least in part, from your document by an external
processor, but you can create them by hand, and in either case, store
them in DocBook.
</para>
<para>
<indexterm>
  <primary>markup</primary>
  <secondary>backmatter, books and articles</secondary>
</indexterm>

Some forms of backmatter, like indexes and glossaries, usually require
additional markup <emphasis>in the document</emphasis> to make
generation by an application possible.  Bibliographies are usually
composed by hand like the rest of your text, unless you are
automatically selecting bibliographic entries out of some larger
database.  Our principal concern here is to acquaint you with the kind
of markup you need to include in your documents if you want to
construct these components.
</para>
<para>
Frontmatter, like the table of contents, is almost always generated
automatically from the text of a document by the processing
application. If you need information about how to mark up a table of
contents in DocBook, please consult the reference page for
<tag>toc</tag>.
</para>
<section xml:id="makeindex"><info><title>Making an Index</title></info>
<para>
<indexterm>
  <primary>indexes</primary>
  <secondary>marking index terms</secondary>
</indexterm>
In some highly-structured documents such as reference manuals, you can
automate the whole process of generating an index successfully without
altering or adding to the original source. You can design a processing
application to select the information and compile it into an adequate
index. But this is rare.
</para>
<para>
In most cases—and even in the case of some reference
manuals—a useful index still requires human intervention to mark
occurrences of words or concepts that will appear in the text of the
index.
</para>
<section xml:id="s.indexterms"><info><title>Marking index terms</title></info>
<para>
<indexterm>
  <primary>singular index markers</primary>
</indexterm><indexterm>
  <primary>ranges, index entries</primary>
</indexterm>

Docbook distinguishes two kinds of index markers: those that are
singular and result in a single page entry in the index itself, and
those that are multiple and refer to a range of pages.
</para>
<para>You put a singular index marker where the subject it refers to
actually occurs in your text:
<screen>
&lt;para&gt;
The tiger&lt;indexterm&gt;
&lt;primary&gt;Big Cats&lt;/primary&gt;
&lt;secondary&gt;Tigers&lt;/secondary&gt;&lt;/indexterm&gt;
is a very large cat indeed.
&lt;/para&gt;
</screen> 
<indexterm>
  <primary>primary level index entries</primary>
</indexterm><indexterm>
  <primary>secondary level index entries</primary>
</indexterm><indexterm>
  <primary>tertiary level index entries</primary>
</indexterm>
This index term has two levels, <tag>primary</tag> and
<tag>secondary</tag>.  They correspond to an increasing amount
of indented text in the resultant index. DocBook allows for three
levels of index terms, with the third labeled
<tag>tertiary</tag>.
</para>
<para>
<indexterm>
  <primary>starting index terms (ranges)</primary>
</indexterm><indexterm>
  <primary>ending index terms (ranges)</primary>
</indexterm>

There are two ways that you can index a range of text. The first is to
put index marks at both the beginning and end of the discussion.  The
mark at the beginning asserts that it is the start of a range, and the
mark at the end refers back to the beginning. In this way, the
processing application can determine what range of text is
indexed. Here's the previous tiger example recast as starting and
ending index terms:
</para>
<screen>
&lt;para&gt;
The tiger&lt;indexterm id="tiger-desc" class="startofrange"&gt;
&lt;primary&gt;Big Cats&lt;/primary&gt;
&lt;secondary&gt;Tigers&lt;/secondary&gt;&lt;/indexterm&gt;
is a very large cat indeed…
&lt;/para&gt;
⋮
&lt;para&gt;
So much for tigers&lt;indexterm startref="tiger-desc" class="endofrange"&gt;. Let's talk about
leopards.  
&lt;/para&gt;
</screen>
<para>
<indexterm>
  <primary>ID attribute</primary>
  <secondary>index entries, ranges</secondary>
</indexterm><indexterm>
  <primary>Class attribute</primary>
  <secondary>index entries, ranges</secondary>
</indexterm>

Note that the mark at the start of the range identifies itself as the
start of a range with the <tag class="attribute">class</tag>
attribute, and provides an <tag class="attribute">id</tag>.
The mark at the end of the range points back to the start.
</para>
<para>
<indexterm>
  <primary>IndexTerm element</primary>
  <secondary>Zone attribute</secondary>
</indexterm><indexterm>
  <primary>Zone attribute (indexterm)</primary>
</indexterm>

Another way to mark up a range of text is to specify that the entire
content of an element, such as a chapter or section, is the complete
range.  In this case, all you need is for the index term to point to
the <tag class="attribute">id</tag> of the element that
contains the content in question. The <tag class="attribute">zone</tag> attribute of <tag>indexterm</tag>
provides this functionality.
</para>
<para>
One of the interesting features of this method is that the actual
index marks do not have to occur anywhere near the text being
indexed. It is possible to collect all of them together, for example,
in one file, but it is not invalid to have the index marker occur near
the element it indexes.
</para>
<para>
Suppose the discussion of tigers in your document comprises a
whole text object (like a <tag class="element">sect1</tag>
or a <tag class="element">chapter</tag>) with an
<tag class="attribute">id</tag> value of 
<literal>tiger-desc</literal>. You can put the following
tag anywhere in your document to index that range of text:
<screen>
&lt;indexterm zone="tiger-desc"&gt;
&lt;primary&gt;Big Cats&lt;/primary&gt;
&lt;secondary&gt;Tigers&lt;/secondary&gt;&lt;/indexterm&gt;
</screen> 
</para>
<para>
<indexterm>
  <primary>see and see also index entries</primary>
</indexterm>
DocBook also contains markup for index hits that point to other index
hits (of the same type such as "See Cats, big" or "See also
Lions"). See the reference pages for <tag>see</tag> and
<tag>seealso</tag>.
</para>
</section>
<section xml:id="s.printindex"><info><title>Printing an index</title></info>
<para>
<indexterm>
  <primary>indexes</primary>
  <secondary>printing</secondary>
</indexterm>

After you have added the appropriate markup to your document, an
external application can use this information to build an index. The
resulting index must have information about the page numbers on which
the concepts appear. It's usually the document formatter that builds
the index.  In this case, it may never be instantiated in DocBook.
</para>
<para>
<indexterm>
  <primary>indexes</primary>
  <secondary>index marked up in DocBook (example)</secondary>
</indexterm>

However, there are applications that can produce an index marked up in
DocBook.  The following example includes some one- and two-level
<tag class="element">indexentry</tag> elements (which
correspond to the primary and secondary levels in the
<tag>indexterm</tag>s themselves) that begin with the letter D:

<screen>&lt;index&gt;&lt;title&gt;Index&lt;/title&gt;
&lt;indexdiv&gt;&lt;title&gt;D&lt;/title&gt;
&lt;indexentry&gt;
  &lt;primaryie&gt;database (bibliographic), 253, 255&lt;/primaryie&gt;
     &lt;secondaryie&gt;structure, 255&lt;/secondaryie&gt;
     &lt;secondaryie&gt;tools, 259&lt;/secondaryie&gt;
&lt;/indexentry&gt;
&lt;indexentry&gt;
  &lt;primaryie&gt;dates (language specific), 179&lt;/primaryie&gt;
&lt;/indexentry&gt;
&lt;indexentry&gt;
  &lt;primaryie&gt;DC fonts, &lt;emphasis&gt;172&lt;/emphasis&gt;, 177&lt;/primaryie&gt;
     &lt;secondaryie&gt;Math fonts, 177&lt;/secondaryie&gt;
&lt;/indexentry&gt;
&lt;/indexdiv&gt;
&lt;/index&gt;
</screen> 
</para>
</section>
</section>
<section xml:id="s.glossary"><info><title>Making a Glossary</title></info>
<para>
<indexterm>
  <primary>glossaries</primary>
  <secondary>creating</secondary>
</indexterm>

<tag>glossary</tag>s, like <tag>bibliography</tag>s, are often
constructed by hand.  However, some applications are capable of
building a skeletal index from glossary term markup in the document.
If all of your terms are defined in some glossary database, it may
even be possible to construct the complete glossary automatically.
</para>
<para>
<indexterm>
  <primary>markup</primary>
  <secondary>glossaries</secondary>
</indexterm><indexterm>
  <primary>GlossTerm element</primary>
</indexterm><indexterm>
  <primary>LinkEnd attribute</primary>
  <secondary>GlossTerm tag</secondary>
</indexterm><indexterm>
  <primary>ID attribute</primary>
  <secondary>glossary entries</secondary>
</indexterm><indexterm>
  <primary>links</primary>
  <secondary>glossary terms (text) to glossary entries</secondary>
</indexterm>

To enable automatic glossary generation, or simply automatic linking
from glossary terms in the text to glossary entries, you must add
markup to your documents.  In the text, you markup a term for
compilation later with the inline <tag>glossterm</tag>
tag. This tag can have a <tag class="attribute">linkend</tag>
attribute whose value is the ID of the actual entry in the
glossary.<footnote>
<para>
Some sophisticated formatters might even be able to establish the link
simply by examining the content of the terms and the glossary. In that
case, the author is not required to make explicit links.
</para>
</footnote>
</para>
<para>
For instance, if you have this markup in your document:
</para>
<screen>
&lt;glossterm linkend="xml"&gt;Extensible Markup Language&lt;/glossterm&gt; is a new standard… 
</screen>
<para>
<indexterm>
  <primary>glossaries</primary>
  <secondary>example</secondary>
</indexterm>

your glossary might look like this:
</para>

<screen>&lt;glossary&gt;&lt;title&gt;Example Glossary&lt;/title&gt;
⋮
&lt;glossdiv&gt;&lt;title&gt;E&lt;/title&gt;

&lt;glossentry id="xml"&gt;&lt;glossterm&gt;Extensible Markup Language&lt;/glossterm&gt;
  &lt;acronym&gt;XML&lt;/acronym&gt;
&lt;glossdef&gt;
  &lt;para&gt;Some reasonable definition here.&lt;/para&gt;
  &lt;glossseealso otherterm="sgml"&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;

&lt;/glossdiv&gt;
</screen>
<para>
Note that the <tag class="element">glossterm</tag> tag
reappears in the glossary to mark up the term and distinguish it from
its definition within the <tag class="element">glossentry</tag>.
The <tag class="attribute">id</tag> that
the <tag class="element">glossentry</tag> referenced in the
text is the <acronym>ID</acronym> of the <tag class="element">glossentry</tag> in the <tag>glossary</tag>
itself. You can use the link between source and glossary to create a
link in the online form of your document, as we have done with the
online form of the glossary in this book.
</para>
</section>
<section xml:id="s.bibliography"><info><title>Making a Bibliography</title></info>
<para>
<indexterm>
  <primary>bibliographies, creating</primary>
</indexterm><indexterm>
  <primary>raw data</primary>
  <secondary>bibliographies</secondary>
</indexterm><indexterm>
  <primary>cooked data</primary>
  <secondary>bibliographies</secondary>
</indexterm><indexterm>
  <primary>BiblioEntry element</primary>
</indexterm>

There are two ways to set up a bibliography in DocBook: you can have
the data <emphasis>raw</emphasis> or
<emphasis>cooked</emphasis>. Here's an example of a raw
bibliographical item, wrapped in the <tag class="element">biblioentry</tag> element:
</para>
<screen>
&lt;biblioentry xreflabel="Kites75"&gt;
  &lt;authorgroup&gt;
    &lt;author&gt;&lt;firstname&gt;Andrea&lt;/firstname&gt;&lt;surname&gt;Bahadur&lt;/surname&gt;&lt;/author&gt;
    &lt;author&gt;&lt;firstname&gt;Mark&lt;/&gt;&lt;surname&gt;Shwarek&lt;/&gt;&lt;/author&gt;
  &lt;/authorgroup&gt;
  &lt;copyright&gt;&lt;year&gt;1974&lt;/year&gt;&lt;year&gt;1975&lt;/year&gt;
     &lt;holder&gt;Product Development International Holding N. V.&lt;/holder&gt;
     &lt;/copyright&gt;
  &lt;isbn&gt;0-88459-021-6&lt;/isbn&gt;    
  &lt;publisher&gt;
    &lt;publishername&gt;Plenary Publications International, Inc.&lt;/publishername&gt;
  &lt;/publisher&gt;
  &lt;title&gt;Kites&lt;/title&gt;
  &lt;subtitle&gt;Ancient Craft to Modern Sport&lt;/subtitle&gt;
  &lt;pagenums&gt;988-999&lt;/pagenums&gt;
  &lt;seriesinfo&gt;
    &lt;title&gt;The Family Creative Workshop&lt;/title&gt;
    &lt;seriesvolnums&gt;1-22&lt;/seriesvolnums&gt;
    &lt;editor&gt;
      &lt;firstname&gt;Allen&lt;/firstname&gt;
      &lt;othername role=middle&gt;Davenport&lt;/othername&gt;
      &lt;surname&gt;Bragdon&lt;/surname&gt;
      &lt;contrib&gt;Editor in Chief&lt;/contrib&gt;
    &lt;/editor&gt;
  &lt;/seriesinfo&gt;
&lt;/biblioentry&gt;
</screen>
<para>
The “raw” data in a <tag class="element">biblioentry</tag> is comprehensive to a
fault—there are enough fields to suit a host of different
bibliographical styles, and that is the point. An abundance of data
requires processing applications to select, punctuate, order, and
format the bibliographical data, and it is unlikely that all the
information provided will actually be output.
</para>
<para>
<indexterm>
  <primary>Bibliomixed element</primary>
</indexterm>

All the “cooked” data in a <tag class="element">bibliomixed</tag> entry in a bibliography, on the
other hand, is intended to be presented to the reader in the form and
sequence in which it is provided. It even includes punctuation between
the fields of data:
</para>
<screen>
&lt;bibliomixed&gt;
  &lt;bibliomset relation=article&gt;
    &lt;surname&gt;Walsh&lt;/surname&gt;, &lt;firstname&gt;Norman&lt;/firstname&gt;.
    &lt;title role=article&gt;Introduction to Cascading Style Sheets&lt;/title&gt;.
  &lt;/bibliomset&gt;
  &lt;bibliomset relation=journal&gt;
    &lt;title&gt;The World Wide Web Journal&lt;/title&gt; 
    &lt;volumenum&gt;2&lt;/volumenum&gt;&lt;issuenum&gt;1&lt;/issuenum&gt;.
    &lt;publishername&gt;O'Reilly &amp; Associates, Inc.&lt;/publishername&gt; and
    &lt;corpname&gt;The World Wide Web Consortium&lt;/corpname&gt;.
    &lt;pubdate&gt;Winter, 1996&lt;/pubdate&gt;&lt;/bibliomset&gt;.
&lt;/bibliomixed&gt;
</screen>

<para>Clearly, these two ways of marking up bibliographical entries are
suited to different circumstances.  You should use one or the other
for your bibliography, not both. Strictly speaking, mingling the raw
and the cooked may be “kosher” as far as the <acronym>DTD</acronym> is
concerned, but it will almost certainly cause problems for most
processing applications.
<indexterm startref="documentsDocBookch02" class="endofrange"/>
</para>
</section>
</section>
</chapter>