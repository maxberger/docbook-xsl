<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
	 xmlns:xlink="http://www.w3.org/1999/xlink"
	 version="5.0" xml:id="ch-parse">
<?dbhtml filename="ch03.html"?>
<title>Parsing DocBook Documents</title>
<info>
  <pubdate>$Date$</pubdate>
  <releaseinfo>$Revision$</releaseinfo>
</info>

<para><indexterm xml:id="parsDocch4" class="startofrange"><primary>parsing</primary>
  <secondary>DocBook documents</secondary></indexterm>
<indexterm xml:id="docDTDparsch4" class="startofrange"><primary>DocBook DTD</primary>
  <secondary>parsing documents</secondary>
</indexterm>A key feature of <acronym>XML</acronym> markup is that you
<emphasis>validate</emphasis> it.  The DocBook schema is a precise description
of valid nesting: the order of elements, and their content.  All
DocBook documents must conform to this description or they are not
DocBook documents (by definition).
<indexterm><primary>parsers</primary>
  <secondary>validating</secondary></indexterm>
<indexterm><primary>validation</primary>
  <secondary>parsers</secondary>
</indexterm>The validation technology that is built into XML is the
Document Type Definition or <acronym>DTD</acronym>. A
<firstterm>validating parser</firstterm>
is a program that can read the <acronym>DTD</acronym> and a particular
document and determine whether the exact nesting and order of elements
in the document is valid according to the <acronym>DTD</acronym>.
</para>

<para>DocBook is now defined by a RELAX NG grammar so it is no longer
necessary to validate with the DTD. In fact, it isn't even very valuable
since the DTD version doesn't enforce many DocBook constraints.
Instead, an external RELAX NG validator must be used.</para>

<para>RELAX NG validation is performed on a document <emphasis>after</emphasis>
it has been parsed. It is possible for parse errors to occur as well as
validation errors (if, for example, your document isn't well-formed XML).
We're going to assume that your documents are well formed and not discuss
XML parsing errors.</para>

<para>
<indexterm><primary>text editors</primary>
  <secondary>unstructured, parsing and</secondary>
</indexterm>If you are not using a structured editor that can enforce
the markup as you type, validation with an external tool is a
particularly important step in the document creation process. You
cannot expect to get rational results from subsequent processing (such
as document publishing) if your documents are not valid.
</para>

<para>There are several free RELAX NG validators including
Jing and MSV. For more detail about available RELAX NG tools,
see <link xlink:href="http://www.relax-ng.org/"/>.</para>

<section xml:id="s.id-idref">
<title>ID/IDREF constraints and validation</title>

<para>Before we begin, we need to get a slightly tricky subject out of the
way: ID/IDREF constraints. In XML, attributes of type ID and IDREF provide
a straightforward cross-referencing mechanism. The value of an attribute of
type IDREF must be the same as the value of some other attribute of type
ID in the document.
Checking these constraints is not a core part of RELAX NG, instead
they are provided by a set of “DTD Compatibility” extensions.</para>

<para>Unfortunately, schema extensibility and DTD compatibility don't
mix well. Several aspects of the RELAX NG grammar for DocBook introduce
errors with respect to ID/IDREF constraint checking.</para>

<para>Luckily, because DocBook uses <tag class="attribute">xml:id</tag>
for its ID attribute, it's not necessary to enforce the constraints
with RELAX NG.</para>

<para>You can either tell your processor not to perform the DTD
compatibility extension checks, or ignore the warning messages that
they produce.</para>
</section>

<section xml:id="ch03-validate"><title>Validating Your Documents</title>

<para>As examples, we'll describe how you can use Jing and MSV for
validation. For information about your particular validator, consult
the documentation that came with it.
</para>

<section><title>Using Jing</title>

<para><indexterm><primary>Jing validator</primary>
  <secondary>RELAX NG documents, validating</secondary>
</indexterm>The <command>jing</command> tool performs RELAX NG
validation.</para>

<screen>java -jar jing.jar -t -i docbook.rng test.xml
Elapsed time 562+75=637 milliseconds</screen>

<para>The elapsed time is printed because we used the
<option>-t</option> option. Without that option, it produces no output
if there are no errors. The <option>-i</option> option suppresses
ID/IDREF checks.</para>
</section>

<section><title>Using MSV</title>

<para><indexterm><primary>MSV validator</primary>
  <secondary>RELAX NG documents, validating</secondary>
</indexterm>The <command>MSV</command> tool performs RELAX NG
validation.</para>

<screen>java -jar msv.jar docbook.rng test.xml
start parsing a grammar.
warnings are found. use -warning switch to see all warnings.
validating test.xml
the document is valid.</screen>

<para>If you use the <option>-warnings</option> option, you'll see the
ID/IDREF warnings.</para>
</section>
</section>
<section xml:id="ch03-parseerr"><title>Understanding Validation Errors</title>
<para>
<indexterm xml:id="errorparsech4" class="startofrange"><primary>errors</primary>
  <secondary>validation</secondary>
</indexterm><indexterm><primary>validation</primary>
  <secondary>errors</secondary></indexterm>
<indexterm><primary>error messages</primary>
  <secondary>validation</secondary>
</indexterm>Every validator produces slightly different error messages, but most
indicate exactly (at least technically<footnote>
<para>
It is often the case that you can correct an error in the document in
several ways.  The parser suggests one possible fix, but this is not
always the right fix.  For example, the parser may suggest that you
can correct out of context data by adding another element, when in
fact it's “obvious” to human eyes that the problem is a
missing end tag.
</para>
</footnote>) what is wrong and where the error occurred.  With a little
experience, this information is all you'll need to quickly identify
what's wrong.
</para>

<para>In the rest of this section, we'll look at a number of common errors
and the messages they produce in <command>msv</command>.  We've
chosen <command>msv</command> because it generally produces informative
error messages.</para>

<section><title>Character Data Not Allowed Here</title>

<para><indexterm><primary>error messages</primary>
  <secondary>character data out of context</secondary></indexterm>
<indexterm><primary>characters</primary>
  <secondary>errors (out of context)</secondary></indexterm>
<indexterm><primary>start tags</primary>
  <secondary>errors</secondary>
</indexterm>Out of context character data is frequently caused by a
missing start tag, but sometimes it's just the result of typing in the
wrong place!
</para>
<programlisting>
<textobject>
<textdata fileref="examples/errs/badpcdata.xml"/>
</textobject>
</programlisting>
<screen>java -jar msv.jar docbook.rng badpcdata.xml
start parsing a grammar.
warnings are found. use -warning switch to see all warnings.
validating badpcdata.xml
Error at line:10, column:7 of badpcdata.xml
  unexpected character literal</screen>
<para>
<indexterm><primary>Chapter element</primary>
  <secondary>errors, character data</secondary></indexterm>

You can't put character data directly in a <tag>chapter</tag>.
Here, a wrapper element, such as <tag>para</tag>, is
missing around the sentence between the first two paragraphs.
</para>
</section>
<section><title>Misspelled Start Tag</title>
<para><indexterm><primary>start tags</primary>
  <secondary>errors</secondary>
    <tertiary>misspelling</tertiary>
</indexterm>If you spell it wrong, the parser gets confused.
</para>
<programlisting>
<textobject>
<textdata fileref="examples/errs/misspell.xml"/>
</textobject>
</programlisting>
<screen>java -jar msv.jar docbook.rng misspell.xml
start parsing a grammar.
warnings are found. use -warning switch to see all warnings.
validating misspell.xml
Error at line:9, column:7 of misspell.xml
  tag name "paar" is not allowed. Possible tag names are: &lt;address>,&lt;anchor>,
&lt;annotation>,&lt;bibliography>,&lt;bibliolist>,&lt;blockquote>,&lt;bridgehead>,
&lt;calloutlist>,&lt;caution>,&lt;classsynopsis>,&lt;cmdsynopsis>,
&lt;constraintdef>,&lt;constructorsynopsis>,&lt;destructorsynopsis>,&lt;epigraph>,
&lt;equation>,&lt;example>,&lt;fieldsynopsis>,&lt;figure>,&lt;formalpara>,
&lt;funcsynopsis>,&lt;glossary>,&lt;glosslist>,&lt;important>,&lt;index>,
&lt;indexterm>,&lt;informalequation>,&lt;informalexample>,&lt;informalfigure>,
&lt;informaltable>,&lt;itemizedlist>,&lt;literallayout>,&lt;mediaobject>,
&lt;methodsynopsis>,&lt;msgset>,&lt;note>,&lt;orderedlist>,&lt;para>,
&lt;procedure>,&lt;productionset>,&lt;programlisting>,&lt;programlistingco>,
&lt;qandaset>,&lt;refentry>,&lt;remark>,&lt;revhistory>,&lt;screen>,&lt;screenco>,
&lt;screenshot>,&lt;section>,&lt;section>,&lt;segmentedlist>,&lt;sidebar>,
&lt;simpara>,&lt;simplelist>,&lt;simplesect>,&lt;synopsis>,&lt;table>,&lt;task>,
&lt;tip>,&lt;toc>,&lt;variablelist>,&lt;warning></screen>

<para>
Luckily, these are pretty easy to spot, unless you accidentally spell
the name of another element.  In that case, your error might appear to
be out of context.
</para>
</section>
<section><title>Out of Context Start Tag</title>
<para><indexterm><primary>start tags</primary>
  <secondary>errors</secondary>
    <tertiary>out of context</tertiary></indexterm>
<indexterm><primary>tags</primary>
  <secondary>context errors</secondary>
</indexterm>Sometimes the problem isn't spelling, but placing a tag in
the wrong context. When this happens, the parser tries to figure out
what it can add to your document to make it valid. Then it proceeds as
if it had seen what was added in order to recover from the error seen,
which can cause future errors.
</para>
<programlisting>
<textobject>
<textdata fileref="examples/errs/context.xml"/>
</textobject>
</programlisting>
<screen>$ java -jar msv.jar docbook.rng context.xml
start parsing a grammar.
warnings are found. use -warning switch to see all warnings.
validating context.xml
Error at line:9, column:14 of context.xml
  tag name "title" is not allowed. Possible tag names are: &lt;abbrev>,&lt;accel>,
&lt;acronym>,&lt;address>,…,&lt;varname>,&lt;warning>,&lt;wordasword>,&lt;xref></screen>

<para><indexterm><primary>titles</primary>
  <secondary>formal elements</secondary>
    <tertiary>errors</tertiary></indexterm>
<indexterm><primary>paragraphs</primary>
  <secondary>titles</secondary>
</indexterm>In this example, we probably wanted a
<tag>formalpara</tag>, so that we could have a title on the paragraph.
But note that the parser didn't suggest this alternative. The parser
only tries to add additional elements, rather than rename elements
that it's already seen.
</para>
</section>
</section>
</chapter>
