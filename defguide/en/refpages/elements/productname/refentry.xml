<refentry id="productname.element">
<?dbhtml filename="productname.html"?>
<refentryinfo>
<pubdate>$Date$</pubdate>
<releaseinfo>$Revision$</releaseinfo>
</refentryinfo>

<refmeta>
<indexterm><primary>elements</primary>
<secondary>productname</secondary></indexterm>
<refentrytitle>productname</refentrytitle>
<refmiscinfo>Element</refmiscinfo>
</refmeta>
<refnamediv>
<refname>productname</refname>
<refpurpose>&productname.purpose;</refpurpose>
</refnamediv>

&productname.synopsis.gen;
<refsect1 condition='ref.description'><title>Description</title>

<para>
A <sgmltag>ProductName</sgmltag> is the formal name of any product. Identifying
a product this way may be useful if you need to provide explicit disclaimers
about product names or information.
</para>

<para>
For example, the copyright statement on this book includes the following general
notice:

<blockquote>
<para>Some of the designations used by manufacturers and sellers to distinguish
their products are claimed as trademarks. Where those designations appear
in this book, and O'Reilly &amp; Associates, Inc., was aware of the trademark
claim, the designations have been printed in caps or initial caps.</para>
</blockquote>

or words to that effect. If every product name in this book had
been diligently coded as a <sgmltag>ProductName</sgmltag>, we could
have automatically generated a complete list of all the product
names and mentioned them explicitly in the notice.
</para>

<para>
In running prose, the distinction between an <sgmltag>Application</sgmltag> and a
<sgmltag>ProductName</sgmltag> may be very subjective.
</para>

<refsect2 id="dbreproc.productname"><title>Processing expectations</title>
<para>
&format.inline;
</para>
<para>
Two of the values of the <sgmltag class='attribute'>Class</sgmltag>
attribute on <sgmltag>ProductName</sgmltag>, <literal>Trade</literal> and
<literal>Registered</literal>, make assertions about
trademarks. DocBook also has a <sgmltag>TradeMark</sgmltag> element;
presumably the same markup is intended regardless of which one is
used.
</para>
<para>
The <literal>Service</literal> and <sgmltag>Copyright</sgmltag> values should
also generate the anticipated marks, if appropriate.
</para>
</refsect2>

<refsect2 role='fu' revision="4.0"><title>&FutureChanges;</title>
<para>
<!--do not index this occurance-->
&fu.interfacedefinition;
</para>
</refsect2>



&productname.parents.gen;
&productname.children.gen;
</refsect1>
<refsect1 condition='ref.elem.attrdesc'><title>Attributes</title>
<variablelist>
<varlistentry><term>class</term>
<listitem>
<para>
<sgmltag class="attribute">Class</sgmltag> indicates the type of
<sgmltag>ProductName</sgmltag>.
</para>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 condition='ref.elem.seealso'><title>See Also</title>
&productname.seealso.gen;
</refsect1>
<refsect1><title>Examples</title>

<informalexample role="example-source">
<programlisting>&productname.example.1.txt;</programlisting>
</informalexample>

<anchor id="ex.os.productname.1" role="HACK-ex.out.start"/>
&productname.example.1.gen;
<anchor id="ex.oe.productname.1" role="HACK-ex.out.end"/>

<para>
As noted above, the <sgmltag>TradeMark</sgmltag> element could also be used:
</para>

<informalexample role="example-source">
<programlisting>&productname.example.2.txt;</programlisting>
</informalexample>

<anchor id="ex.os.productname.2" role="HACK-ex.out.start"/>
&productname.example.2.gen;
<anchor id="ex.oe.productname.2" role="HACK-ex.out.end"/>

&productname.example.seealso.gen;
</refsect1>
</refentry>

