#!/bin/bash

# This script is usually called by the xslt script.
#
# Usage: saxon [shellopts] src.xml style.xsl output.{xml|html} [styleopts]
#

DONE=0
VERSION=653
EXTVERSION=643
DEBUG=0
XARG=""
YARG=""
RARG=""
MEMORY=""
VALIDATE=""
# which parser to use
PARSER=auto

MYDIR=`dirname $0`
. $MYDIR/common-functions.sh

# identify the directory for DocBook XSL
for dir in "/sourceforge/docbook/xsl" \
           "$MYDIR/xsl" \
           "/usr/share/sgml/docbook/stylesheet/xsl/nwalsh" ; do
  if [ -d "$dir" ]; then
    DOCBOOKXSL="$dir"
    break
  fi
done

while [ "$DONE" = "0" ]; do
    case $1 in
	-d)	DEBUG=1;
		shift;
		;;
	-6*)	VERSION=$1;
		shift;
		;;
	-7*)	VERSION=$1;
		shift;
		;;
	-8*)	VERSION=$1;
	        EXTVERSION=8
		shift;
		;;
	-x)     shift;
		XARG="-x $1";
		shift;
		;;
	-y)     shift;
		YARG="-y $1";
		shift;
		;;
	-r)     shift;
		RARG="-r $1";
		shift;
		;;
        -m)     shift
		MEMORY="-Xmx$1";
		shift;
		;;
        -parser) shift
		PARSER="$1"
                shift
		;;
        -q)     shift
		VERBOSE=false
		;;
        -val)   shift
		VALIDATE=-val
		;;
        -v)     shift
		VERBOSE=true
		;;
        -X)     shift
		DOCBOOKXSL="$1";
		shift;
		;;
	-*)	DONE=1;
		echo "unexpected argument: $*" 1>&2
		exit 1
		;;
	*)	DONE=1
    esac
done

XMLSRC=$1; shift
XMLSTY=$1; shift
OUTPUT=$1; shift

if [ "$OUTPUT" = "-" ]; then
    OUTPUT="";
fi

if [ "$OUTPUT" != "" ]; then
  OUTPUT="-o $OUTPUT"
fi

if [ ! -d "$DOCBOOKXSL" ]; then
  echo "DocBook XSL dir '$DOCBOOKXSL' doesn't exist" 1>&2
  echo "  Try using the '-X <dir>' argument" 1>&2
  exit 1
fi

# Toss the leading hyphen
VERSION=`echo $VERSION | sed -e 's/^-//'`

case $VERSION in
    8a)
	VERSION="sa-8.0";
	;;
    8b)
	VERSION="b8.0";
	;;
    77|751|653|652|651|65|644|643)
        :                       # handled normally below
	;;
    *)	echo "unexpected Saxon version $VERSION" 1>&2
	exit 1
	;;
esac

case $PARSER in
    auto|xerces2|xerces1|crimson|native)
        :                       # handled normally below
	;;
    *)	echo "unexpected parser selected, '$PARSER'" 1>&2
        echo "must be one of 'auto', 'xerces2', 'xerces1', 'crimson', or 'native'" 1>&2
	exit 1
	;;
esac


DOTTEDVERSION=`echo $VERSION | sed -e 's/\([0-9]\)\([0-9]\)/\1.\2/g; s/\([0-9]\)\([0-9]\)/\1.\2/g;'`

##
## locate saxon.jar
##
SAXON=
for jar in "/usr/local/java/saxon-$DOTTEDVERSION/saxon.jar" \
           "/usr/local/java/saxon-$DOTTEDVERSION/saxon7.jar" \
           "/usr/local/java/saxon-$DOTTEDVERSION/saxon8sa.jar" \
           "/usr/local/java/saxon$DOTTEDVERSION/saxon8sa.jar" \
           "/usr/local/share/java/saxon-$DOTTEDVERSION/saxon.jar" \
           "/usr/local/share/java/saxon-$DOTTEDVERSION/saxon7.jar" \
           "/usr/local/share/java/saxon$DOTTEDVERSION/saxon8sa.jar" \
           "/usr/share/java/saxon-$DOTTEDVERSION.jar" \
           "/usr/local/java/saxon/saxon.jar" \
           "/usr/local/share/java/saxon/saxon.jar" \
           "/usr/share/java/saxon.jar"; do
  if [ -f "$jar" -a "$SAXON" = "" ]; then
    SAXON="$jar"
    break
  fi
done
if [ ! -f "$SAXON" ]; then
  echo "warning: cannot locate Saxon JAR file" 1>&2
fi

##
## DocBook extensions
##
if [ ! "$NDWEXT" ]; then
  for ext in "$DOCBOOKXSL/extensions/saxon$EXTVERSION/.classes" \
             "$DOCBOOKXSL/extensions/saxon$EXTVERSION.jar" \
             "/usr/share/sgml/docbook/stylesheet/xsl/nwalsh/extensions/saxon$EXTVERSION.jar" ; do
    if [ -d $ext -o -f $ext ]; then
      NDWEXT=$ext;
      break
    fi
  done
  if [ ! "$NDWEXT" ]; then
    echo "warning: cannot locate DocBook XSL Saxon extensions" 1>&2
  fi
fi

##
## Saxon debugging stuff
##
if [ "$DEBUG" = "1" ]; then
  for try in "/usr/local/java/saxon-$DOTTEDVERSION/.classes" \
             "/usr/local/share/java/saxon-$DOTTEDVERSION/.classes" \
             "/usr/share/java/saxon-$DOTTEDVERSION/.classes"; do
    if [ -d "$try" ]; then
        SAXON="$try:$SAXON"
    fi
  done
fi

##
## set the desired parser
##
## From SAXON documentation:
##
## SAXON comes with a bundled XML parser, a modified copy of the
## AElred parser, adapted to notify comments to the application. SAXON
## has been tested successfully in the past with Xerces, Lark, SUN
## Project X, Crimson, Oracle XML, xerces, xml4j, and xp. Use of a
## SAX2-compliant parser is preferred, as SAX1 does not allow XML
## comments to be passed to the application. However, SAXON works with
## either. All the relevant classes must be installed on your Java
## CLASSPATH.
##
## These are the settings which control the parser:
##   javax.xml.parsers.DocumentBuilderFactory
##   javax.xml.parsers.SAXParserFactory
##

# first choice is xerces2
if [ "$PARSER" = "xerces2" -o "$PARSER" = "auto" ]; then
  PARSERCLASS=`findxerces2`
  if [ "$PARSERCLASS" ]; then
    DBFACTORY="-Djavax.xml.parsers.DocumentBuilderFactory=org.apache.xerces.jaxp.DocumentBuilderFactoryImpl"
    SPFACTORY="-Djavax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserFactoryImpl"
  fi
fi

# next choice is xerces1
if [ "$PARSER" = "xerces1" ] || [ ! "$PARSERCLASS" -a "$PARSER" = "auto" ]; then
  PARSERCLASS=`findxerces1`
  if [ "$PARSERCLASS" ]; then
    DBFACTORY="-Djavax.xml.parsers.DocumentBuilderFactory=org.apache.xerces.jaxp.DocumentBuilderFactoryImpl"
    SPFACTORY="-Djavax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserFactoryImpl"
  fi
fi

# next choice is crimson
if [ "$PARSER" = "crimson" ] || [ ! "$PARSERCLASS" -a "$PARSER" = "auto" ]; then
  PARSERCLASS=`findcrimson`
  if [ "$PARSERCLASS" ]; then
    DBFACTORY="-Djavax.xml.parsers.DocumentBuilderFactory=org.apache.crimson.jaxp.DocumentBuilderFactoryImpl"
    SPFACTORY="-Djavax.xml.parsers.SAXParserFactory=org.apache.crimson.jaxp.SAXParserFactoryImpl"
  fi
fi

if [ "$PARSER" != "native" -a ! "$PARSERCLASS" ]; then
  echo "warning: cannot locate an alternate SAX parser, PEs may not work correctly" 1>&2
fi

##
## selecting the transformer not handled.  xalan2 can provide this, 
## javax.xml.transform.TransformerFactory
##  = org.apache.xalan.processor.TransformerFactoryImpl
TRANSFACTORY=com.icl.saxon.TransformerFactoryImpl

##
## optionally replace the URI resolver with the Apache
## resolver classes
## FIXME: do we specifically *not* want to use the sun resolver?
##
RESOLVER=`findresolver`
if [ -f "$RESOLVER" -o -d "$RESOLVER" ]; then
  # use the apache resolver
  XARG=${XARG:--x org.apache.xml.resolver.tools.ResolvingXMLReader}
  YARG=${YARG:--y org.apache.xml.resolver.tools.ResolvingXMLReader}
  RARG=${RARG:--r org.apache.xml.resolver.tools.CatalogResolver}
fi

CLASSPATH=`fixclasspath "$SAXON:$NDWEXT:$RESOLVER:$PARSERCLASS:$CLASSPATH"`

TFLAG=
if [ "$DEBUG" != "0" ]; then
  TFLAG="-T"
fi

HTTP_PROXY=
HTTPS_PROXY=

if [ "$http_proxy_host" != "" ]; then
    HTTP_PROXY="-Dhttp.proxyHost=$http_proxy_host -Dhttp.proxyPort=$http_proxy_port"
    HTTPS_PROXY="-Dhttps.proxyHost=$http_proxy_host -Dhttps.proxyPort=$http_proxy_port"
fi

if [ ${VERBOSE} ] && ${VERBOSE}; then
  echo java $MEMORY -cp $CLASSPATH $DBFACTORY $SPFACTORY \
      -Djavax.xml.transform.TransformerFactory=$TRANSFACTORY \
      com.icl.saxon.StyleSheet $TFLAG $VALIDATE \
      $XARG $YARG $RARG $OUTPUT $XMLSRC $XMLSTY "$@"
fi

#echo VERSION=$VERSION

if [ "$VERSION" = "sa-8.0" ]; then
  JAVA_HOME=/usr/local/jdk1.4.2
  JAVA=$JAVA_HOME/bin/java
#  exec $JAVA $HTTP_PROXY $HTTPS_PROXY $MEMORY -cp $CLASSPATH $DBFACTORY $SPFACTORY \
#       -Djavax.xml.transform.TransformerFactory=$TRANSFACTORY \
#       com.saxonica.Transform $TFLAG $VALIDATE $SAXONOPT \
#       $XARG $YARG $RARG $OUTPUT $XMLSRC $XMLSTY "$@"
  CLASSPATH=/usr/local/java/saxonsa-8.0/saxon8sa.jar:/home/ndw/java
  exec $JAVA $HTTP_PROXY $HTTPS_PROXY $MEMORY -cp $CLASSPATH \
       com.saxonica.Transform $TFLAG $VALIDATE $SAXONOPT \
       $OUTPUT $XMLSRC $XMLSTY "$@"
else if [ "$VERSION" = "b8.0" ]; then
  JAVA_HOME=/usr/local/jdk1.4.2
  JAVA=$JAVA_HOME/bin/java
  CLASSPATH=/usr/local/java/saxonb-8.0/saxon8.jar:/home/ndw/java
  echo $JAVA $HTTP_PROXY $HTTPS_PROXY $MEMORY -cp $CLASSPATH \
       net.sf.saxon.Transform $TFLAG $VALIDATE $SAXONOPT \
       $OUTPUT $XMLSRC $XMLSTY "$@"
  exec $JAVA $HTTP_PROXY $HTTPS_PROXY $MEMORY -cp $CLASSPATH \
       net.sf.saxon.Transform $TFLAG $VALIDATE $SAXONOPT \
       $OUTPUT $XMLSRC $XMLSTY "$@"
else if [ "$VERSION" = "77" ]; then
  JAVA_HOME=/usr/local/jdk1.4.2
  JAVA=$JAVA_HOME/bin/java
  exec $JAVA $HTTP_PROXY $HTTPS_PROXY $MEMORY -cp $CLASSPATH $DBFACTORY $SPFACTORY \
       -Djavax.xml.transform.TransformerFactory=$TRANSFACTORY \
       net.sf.saxon.Transform $TFLAG \
       $XARG $YARG $RARG $OUTPUT $XMLSRC $XMLSTY "$@"
else
  exec java $HTTP_PROXY $HTTPS_PROXY $MEMORY -cp $CLASSPATH $DBFACTORY $SPFACTORY \
       -Djavax.xml.transform.TransformerFactory=$TRANSFACTORY \
       com.icl.saxon.StyleSheet $TFLAG \
       $XARG $YARG $RARG $OUTPUT $XMLSRC $XMLSTY "$@"
fi
fi
fi