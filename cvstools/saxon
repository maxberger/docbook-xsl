#!/bin/bash

# This script is usually called by the xslt script.
#
# Usage: saxon [shellopts] src.xml style.xsl output.{xml|html} [styleopts]
#

DONE=0
VERSION=652
EXTVERSION=643
DEBUG=0
XARG=""
YARG=""
RARG=""
MEMORY=""
QUIET=0


MYDIR=`dirname $0`
. $MYDIR/common-functions.sh

# identify the directory for DocBook XSL
for dir in "/sourceforge/docbook/xsl" \
           "$MYDIR/xsl" \
           "/usr/share/sgml/docbook/stylesheet/xsl/nwalsh" ; do
  if [ -d "$dir" ]; then
    DOCBOOKXSL="$dir"
    break
  fi
done

while [ "$DONE" = "0" ]; do
    case $1 in
	-d)	DEBUG=1;
		shift;
		;;
	-6*)	VERSION=$1;
		shift;
		;;
	-x)     shift;
		XARG="-x $1";
		shift;
		;;
	-y)     shift;
		YARG="-y $1";
		shift;
		;;
	-r)     shift;
		RARG="-r $1";
		shift;
		;;
        -m)     shift
		MEMORY="-Xmx$1";
		shift;
		;;
        -q)     shift
		QUIET=1
		;;
        -X)     shift
		DOCBOOKXSL="$1";
		shift;
		;;
	-*)	DONE=1;
		echo "unexpected argument: $*" 1>&2
		exit 1
		;;
	*)	DONE=1
    esac
done

XMLSRC=$1; shift
XMLSTY=$1; shift
OUTPUT=$1; shift

if [ "$OUTPUT" = "-" ]; then
    OUTPUT="";
fi

if [ "$OUTPUT" != "" ]; then
  OUTPUT="-o $OUTPUT"
fi

if [ ! -d "$DOCBOOKXSL" ]; then
  echo "DocBook XSL dir '$DOCBOOKXSL' doesn't exist" 1>&2
  echo "  Try using the '-X <dir>' argument" 1>&2
  exit 1
fi

case $VERSION in
   652|651|65|644|643)
        :                       # handled normally below
	;;
    *)	echo "unexpected Saxon version $VERSION" 1>&2
	exit 1
	;;
esac


DOTTEDVERSION=`echo $VERSION | sed -e 's/\([0-9]\)\([0-9]\)/\1.\2/g; s/\([0-9]\)\([0-9]\)/\1.\2/g;'`

##
## locate saxon.jar
##
for jar in "/usr/local/java/saxon-$DOTTEDVERSION/saxon.jar" \
           "/usr/local/share/java/saxon-$DOTTEDVERSION/saxon.jar" \
           "/usr/share/java/saxon-$DOTTEDVERSION.jar" \
           "/usr/local/java/saxon/saxon.jar" \
           "/usr/local/share/java/saxon/saxon.jar" \
           "/usr/share/java/saxon.jar"; do
  if [ -f "$jar" ]; then
    SAXON="$jar"
    break
  fi
done
if [ ! -f "$SAXON" ]; then
  echo "warning: cannot locate Saxon JAR file" 1>&2
fi

##
## DocBook extensions
##
if [ ! "$NDWEXT" ]; then
  for ext in "$DOCBOOKXSL/extensions/saxon$EXTVERSION/.classes" \
             "$DOCBOOKXSL/extensions/saxon$EXTVERSION.jar" \
             "/usr/share/sgml/docbook/stylesheet/xsl/nwalsh/extensions/saxon$EXTVERSION.jar" ; do
    if [ -d $ext -o -f $ext ]; then
      NDWEXT=$ext;
      break
    fi
  done
  if [ ! "$NDWEXT" ]; then
    echo "warning: cannot locate DocBook XSL Saxon extensions" 1>&2
  fi
fi

##
## Saxon debugging stuff
##
if [ "$DEBUG" = "1" ]; then
  for try in "/usr/local/java/saxon-$DOTTEDVERSION/.classes" \
             "/usr/local/share/java/saxon-$DOTTEDVERSION/.classes" \
             "/usr/share/java/saxon-$DOTTEDVERSION/.classes"; do
    if [ -d "$try" ]; then
        SAXON="$try:$SAXON"
    fi
  done
fi

##
## locate Xerces classpath
##
XERCES=`findxerces1`
if [ "$XERCES" ]; then
  DBFACTORY="-Djavax.xml.parsers.DocumentBuilderFactory=org.apache.xerces.jaxp.DocumentBuilderFactoryImpl"
  SPFACTORY="-Djavax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserFactoryImpl"
fi

##
## locate JAXP classpath
##
JAXP=`findjaxp`
if [ "$JAXP" ]; then
  echo "don't know how to set javax.xml.parsers.DocumentBuilderFactory nor javax.xml.parsers.SAXParserFactory for Sun JAXP"
fi

if [ ! "$JAXP" -a ! "$XERCES" ]; then
  echo "warning: cannot locate an alternate SAX parser, PEs may not work correctly" 1>&2
  # FIXME: test that it works at all
fi

##
## optionally replace the URI resolver with the Apache
## resolver classes
## FIXME: do we specifically *not* want to use the sun resolver?
##
for path in $RESOLVER \
	    "/projects/apache/xml-commons/java/build/classes" ; do
  if [ -f "$path" -o -d "$path" ]; then
    RESOLVER="$path"
    break
  fi
done
if [ -f "$RESOLVER" -o -d "$RESOLVER" ]; then
  # use the apache resolver
  XARG=${XARG:--x org.apache.xml.resolver.tools.ResolvingXMLReader}
  YARG=${YARG:--y org.apache.xml.resolver.tools.ResolvingXMLReader}
  RARG=${RARG:--r org.apache.xml.resolver.tools.CatalogResolver}
fi

CLASSPATH=$SAXON:$NDWEXT:$JAXP:$RESOLVER:$XERCES:$CLASSPATH

# echo "classpath is $CLASSPATH"

if [ "$QUIET" = "0" ]; then
  echo saxon$VERSION $OUTPUT $XMLSRC $XMLSTY "$@"

  if [ "$MEMORY" != "" ]; then
      echo "java $MEMORY ..."
  fi
fi

TRANSFACTORY=com.icl.saxon.TransformerFactoryImpl

TFLAG=
if [ "$DEBUG" != "0" ]; then
  TFLAG="-T"
fi

exec java $MEMORY $FOO \
     -cp $CLASSPATH \
     $DBFACTORY $SPFACTORY \
     -Djavax.xml.transform.TransformerFactory=$TRANSFACTORY \
     com.icl.saxon.StyleSheet \
     $TFLAG \
     $XARG $YARG $RARG $OUTPUT $XMLSRC $XMLSTY "$@"
